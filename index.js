!function(t){var e={};function i(n){if(e[n])return e[n].exports;var s=e[n]={i:n,l:!1,exports:{}};return t[n].call(s.exports,s,s.exports,i),s.l=!0,s.exports}i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)i.d(n,s,function(e){return t[e]}.bind(null,s));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=61)}([function(t,e){t.exports='<div data-scene-information-popup class="scene-information-popup">\n    <div class="scene-information-popup__wrapper">\n        <span class="scene-information-popup__text" data-scene-information-popup-text></span>\n        <span class="scene-information-popup__close" data-scene-information-popup-close></span>\n    </div>\n</div>'},function(t,e,i){var n,s,r;(function(a,o){var h=(a=a||i(28)).window,c=a.document,l=new function(){var t=/^(statics|enumerable|beans|preserve)$/,e=[],i=e.slice,n=Object.create,s=Object.getOwnPropertyDescriptor,r=Object.defineProperty,a=e.forEach||function(t,e){for(var i=0,n=this.length;i<n;i++)t.call(e,this[i],i,this)},h=function(t,e){for(var i in this)this.hasOwnProperty(i)&&t.call(e,this[i],i,this)},c=Object.assign||function(t){for(var e=1,i=arguments.length;e<i;e++){var n=arguments[e];for(var s in n)n.hasOwnProperty(s)&&(t[s]=n[s])}return t},l=function(t,e,i){if(t){var n=s(t,"length");(n&&"number"==typeof n.value?a:h).call(t,e,i=i||t)}return i};function u(e,i,n,a,o){var h={};function c(t,c){"string"==typeof(c=c||(c=s(i,t))&&(c.get?c:c.value))&&"#"===c[0]&&(c=e[c.substring(1)]||c);var l,u="function"==typeof c,d=c,f=o||u&&!c.base?c&&c.get?t in e:e[t]:null;o&&f||(u&&f&&(c.base=f),u&&!1!==a&&(l=t.match(/^([gs]et|is)(([A-Z])(.*))$/))&&(h[l[3].toLowerCase()+l[4]]=l[2]),d&&!u&&d.get&&"function"==typeof d.get&&p.isPlainObject(d)||(d={value:d,writable:!0}),(s(e,t)||{configurable:!0}).configurable&&(d.configurable=!0,d.enumerable=null!=n?n:!l),r(e,t,d))}if(i){for(var l in i)i.hasOwnProperty(l)&&!t.test(l)&&c(l);for(var l in h){var u=h[l],d=e["set"+u],f=e["get"+u]||d&&e["is"+u];!f||!0!==a&&0!==f.length||c(l,{get:f,set:d})}}return e}function p(){for(var t=0,e=arguments.length;t<e;t++){var i=arguments[t];i&&c(this,i)}return this}return u(p,{inject:function(t){if(t){var e=!0===t.statics?t:t.statics,i=t.beans,n=t.preserve;e!==t&&u(this.prototype,t,t.enumerable,i,n),u(this,e,null,i,n)}for(var s=1,r=arguments.length;s<r;s++)this.inject(arguments[s]);return this},extend:function(){for(var t,e,i,s=this,a=0,o=arguments.length;a<o&&(!t||!e);a++)i=arguments[a],t=t||i.initialize,e=e||i.prototype;return e=(t=t||function(){s.apply(this,arguments)}).prototype=e||n(this.prototype),r(e,"constructor",{value:t,writable:!0,configurable:!0}),u(t,this),arguments.length&&this.inject.apply(t,arguments),t.base=s,t}}).inject({enumerable:!1,initialize:p,set:p,inject:function(){for(var t=0,e=arguments.length;t<e;t++){var i=arguments[t];i&&u(this,i,i.enumerable,i.beans,i.preserve)}return this},extend:function(){var t=n(this);return t.inject.apply(t,arguments)},each:function(t,e){return l(this,t,e)},clone:function(){return new this.constructor(this)},statics:{set:c,each:l,create:n,define:r,describe:s,clone:function(t){return c(new t.constructor,t)},isPlainObject:function(t){var e=null!=t&&t.constructor;return e&&(e===Object||e===p||"Object"===e.name)},pick:function(t,e){return t!==o?t:e},slice:function(t,e,n){return i.call(t,e,n)}}})};t.exports=l,l.inject({enumerable:!1,toString:function(){return null!=this._id?(this._class||"Object")+(this._name?" '"+this._name+"'":" @"+this._id):"{ "+l.each(this,(function(t,e){if(!/^_/.test(e)){var i=typeof t;this.push(e+": "+("number"===i?f.instance.number(t):"string"===i?"'"+t+"'":t))}}),[]).join(", ")+" }"},getClassName:function(){return this._class||""},importJSON:function(t){return l.importJSON(t,this)},exportJSON:function(t){return l.exportJSON(this,t)},toJSON:function(){return l.serialize(this)},set:function(t,e){return t&&l.filter(this,t,e,this._prioritize),this}},{beans:!1,statics:{exports:{},extend:function t(){var e=t.base.apply(this,arguments),i=e.prototype._class;return i&&!l.exports[i]&&(l.exports[i]=e),e},equals:function(t,e){if(t===e)return!0;if(t&&t.equals)return t.equals(e);if(e&&e.equals)return e.equals(t);if(t&&e&&"object"==typeof t&&"object"==typeof e){if(Array.isArray(t)&&Array.isArray(e)){if((i=t.length)!==e.length)return!1;for(;i--;)if(!l.equals(t[i],e[i]))return!1}else{var i,n=Object.keys(t);if((i=n.length)!==Object.keys(e).length)return!1;for(;i--;){var s=n[i];if(!e.hasOwnProperty(s)||!l.equals(t[s],e[s]))return!1}}return!0}return!1},read:function(t,e,i,n){if(this===l){var s=this.peek(t,e);return t.__index++,s}var r=this.prototype,a=r._readIndex,h=e||a&&t.__index||0,c=t.length,u=t[h];if(n=n||c-h,u instanceof this||i&&i.readNull&&null==u&&n<=1)return a&&(t.__index=h+1),u&&i&&i.clone?u.clone():u;if(u=l.create(r),a&&(u.__read=!0),u=u.initialize.apply(u,h>0||h+n<c?l.slice(t,h,h+n):t)||u,a){t.__index=h+u.__read;var p=u.__filtered;p&&(t.__filtered=p,u.__filtered=o),u.__read=o}return u},peek:function(t,e){return t[t.__index=e||t.__index||0]},remain:function(t){return t.length-(t.__index||0)},readList:function(t,e,i,n){for(var s,r=[],a=e||0,o=n?a+n:t.length,h=a;h<o;h++)r.push(Array.isArray(s=t[h])?this.read(s,0,i):this.read(t,h,i,1));return r},readNamed:function(t,e,i,n,s){var r=this.getNamed(t,e),a=r!==o;if(a){var h=t.__filtered;h||((h=t.__filtered=l.create(t[0])).__unfiltered=t[0]),h[e]=o}var c=a?[r]:t;return this.read(c,i,n,s)},getNamed:function(t,e){var i=t[0];if(t._hasObject===o&&(t._hasObject=1===t.length&&l.isPlainObject(i)),t._hasObject)return e?i[e]:t.__filtered||i},hasNamed:function(t,e){return!!this.getNamed(t,e)},filter:function(t,e,i,n){var s;function r(n){if(!(i&&n in i||s&&n in s)){var r=e[n];r!==o&&(t[n]=r)}}if(n){for(var a,h={},c=0,l=n.length;c<l;c++)(a=n[c])in e&&(r(a),h[a]=!0);s=h}return Object.keys(e.__unfiltered||e).forEach(r),t},isPlainValue:function(t,e){return l.isPlainObject(t)||Array.isArray(t)||e&&"string"==typeof t},serialize:function(t,e,i,n){e=e||{};var s,r=!n;if(r&&(e.formatter=new f(e.precision),n={length:0,definitions:{},references:{},add:function(t,e){var i="#"+t._id,n=this.references[i];if(!n){this.length++;var s=e.call(t),r=t._class;r&&s[0]!==r&&s.unshift(r),this.definitions[i]=s,n=this.references[i]=[i]}return n}}),t&&t._serialize){s=t._serialize(e,n);var a=t._class;!a||t._compactSerialize||!r&&i||s[0]===a||s.unshift(a)}else if(Array.isArray(t)){s=[];for(var o=0,h=t.length;o<h;o++)s[o]=l.serialize(t[o],e,i,n)}else if(l.isPlainObject(t)){s={};var c=Object.keys(t);for(o=0,h=c.length;o<h;o++){var u=c[o];s[u]=l.serialize(t[u],e,i,n)}}else s="number"==typeof t?e.formatter.number(t,e.precision):t;return r&&n.length>0?[["dictionary",n.definitions],s]:s},deserialize:function(t,e,i,n,s){var r=t,a=!i,o=a&&t&&t.length&&"dictionary"===t[0][0];if(i=i||{},Array.isArray(t)){var h=t[0],c="dictionary"===h;if(1==t.length&&/^#/.test(h))return i.dictionary[h];r=[];for(var u=(h=l.exports[h])?1:0,p=t.length;u<p;u++)r.push(l.deserialize(t[u],e,i,c,o));if(h){var d=r;r=e?e(h,d,a||s):new h(d)}}else if(l.isPlainObject(t))for(var f in r={},n&&(i.dictionary=r),t)r[f]=l.deserialize(t[f],e,i);return o?r[1]:r},exportJSON:function(t,e){var i=l.serialize(t,e);return e&&0==e.asString?i:JSON.stringify(i)},importJSON:function(t,e){return l.deserialize("string"==typeof t?JSON.parse(t):t,(function(t,i,n){var s=n&&e&&e.constructor===t,r=s?e:l.create(t.prototype);if(1===i.length&&r instanceof I&&(s||!(r instanceof P))){var a=i[0];l.isPlainObject(a)&&(a.insert=!1,s&&(i=i.concat([{insert:!0}])))}return(s?r.set:t).apply(r,i),s&&(e=null),r}))},push:function(t,e){var i=e.length;if(i<4096)t.push.apply(t,e);else{var n=t.length;t.length+=i;for(var s=0;s<i;s++)t[n+s]=e[s]}return t},splice:function(t,e,i,n){var s=e&&e.length,r=i===o;(i=r?t.length:i)>t.length&&(i=t.length);for(var a=0;a<s;a++)e[a]._index=i+a;if(r)return l.push(t,e),[];var h=[i,n];e&&l.push(h,e);for(var c=t.splice.apply(t,h),u=(a=0,c.length);a<u;a++)c[a]._index=o;for(a=i+s,u=t.length;a<u;a++)t[a]._index=a;return c},capitalize:function(t){return t.replace(/\b[a-z]/g,(function(t){return t.toUpperCase()}))},camelize:function(t){return t.replace(/-(.)/g,(function(t,e){return e.toUpperCase()}))},hyphenate:function(t){return t.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase()}}});var u={on:function(t,e){if("string"!=typeof t)l.each(t,(function(t,e){this.on(e,t)}),this);else{var i=this._eventTypes,n=i&&i[t],s=this._callbacks=this._callbacks||{};-1===(s=s[t]=s[t]||[]).indexOf(e)&&(s.push(e),n&&n.install&&1===s.length&&n.install.call(this,t))}return this},off:function(t,e){if("string"==typeof t){var i,n=this._eventTypes,s=n&&n[t],r=this._callbacks&&this._callbacks[t];return r&&(!e||-1!==(i=r.indexOf(e))&&1===r.length?(s&&s.uninstall&&s.uninstall.call(this,t),delete this._callbacks[t]):-1!==i&&r.splice(i,1)),this}l.each(t,(function(t,e){this.off(e,t)}),this)},once:function(t,e){return this.on(t,(function i(){e.apply(this,arguments),this.off(t,i)}))},emit:function(t,e){var i=this._callbacks&&this._callbacks[t];if(!i)return!1;var n=l.slice(arguments,1),s=e&&e.target&&!e.currentTarget;i=i.slice(),s&&(e.currentTarget=this);for(var r=0,a=i.length;r<a;r++)if(0==i[r].apply(this,n)){e&&e.stop&&e.stop();break}return s&&delete e.currentTarget,!0},responds:function(t){return!(!this._callbacks||!this._callbacks[t])},attach:"#on",detach:"#off",fire:"#emit",_installEvents:function(t){var e=this._eventTypes,i=this._callbacks,n=t?"install":"uninstall";if(e)for(var s in i)if(i[s].length>0){var r=e[s],a=r&&r[n];a&&a.call(this,s)}},statics:{inject:function t(e){var i=e._events;if(i){var n={};l.each(i,(function(t,i){var s="string"==typeof t,r=s?t:i,a=l.capitalize(r),o=r.substring(2).toLowerCase();n[o]=s?{}:t,r="_"+r,e["get"+a]=function(){return this[r]},e["set"+a]=function(t){var e=this[r];e&&this.off(o,e),t&&this.on(o,t),this[r]=t}})),e._eventTypes=n}return t.base.apply(this,arguments)}}},p=l.extend({_class:"PaperScope",initialize:function t(){ut=this,this.settings=new l({applyMatrix:!0,insertItems:!0,handleSize:4,hitTolerance:0}),this.project=null,this.projects=[],this.tools=[],this._id=t._id++,t._scopes[this._id]=this;var e=t.prototype;if(!this.support){var i=ot.getContext(1,1)||{};e.support={nativeDash:"setLineDash"in i||"mozDash"in i,nativeBlendModes:ht.nativeModes},ot.release(i)}if(!this.agent){var n=a.navigator.userAgent.toLowerCase(),s=(/(darwin|win|mac|linux|freebsd|sunos)/.exec(n)||[])[0],r="darwin"===s?"mac":s,o=e.agent=e.browser={platform:r};r&&(o[r]=!0),n.replace(/(opera|chrome|safari|webkit|firefox|msie|trident|atom|node|jsdom)\/?\s*([.\d]+)(?:.*version\/([.\d]+))?(?:.*rv\:v?([.\d]+))?/g,(function(t,e,i,n,s){if(!o.chrome){var r="opera"===e?n:/^(node|trident)$/.test(e)?s:i;o.version=r,o.versionNumber=parseFloat(r),e={trident:"msie",jsdom:"node"}[e]||e,o.name=e,o[e]=!0}})),o.chrome&&delete o.webkit,o.atom&&delete o.chrome}},version:"0.12.3",getView:function(){var t=this.project;return t&&t._view},getPaper:function(){return this},execute:function(t,e){var i=ut.PaperScript.execute(t,this,e);return Q.updateFocus(),i},install:function(t){var e=this;for(var i in l.each(["project","view","tool"],(function(i){l.define(t,i,{configurable:!0,get:function(){return e[i]}})})),this)!/^_/.test(i)&&this[i]&&(t[i]=this[i])},setup:function(t){return ut=this,this.project=new S(t),this},createCanvas:function(t,e){return ot.getCanvas(t,e)},activate:function(){ut=this},clear:function(){for(var t=this.projects,e=this.tools,i=t.length-1;i>=0;i--)t[i].remove();for(i=e.length-1;i>=0;i--)e[i].remove()},remove:function(){this.clear(),delete p._scopes[this._id]},statics:new function(){function t(t){return t+="Attribute",function(e,i){return e[t](i)||e[t]("data-paper-"+i)}}return{_scopes:{},_id:0,get:function(t){return this._scopes[t]||null},getAttribute:t("get"),hasAttribute:t("has")}}}),d=l.extend(u,{initialize:function(t){this._scope=ut,this._index=this._scope[this._list].push(this)-1,!t&&this._scope[this._reference]||this.activate()},activate:function(){if(!this._scope)return!1;var t=this._scope[this._reference];return t&&t!==this&&t.emit("deactivate"),this._scope[this._reference]=this,this.emit("activate",t),!0},isActive:function(){return this._scope[this._reference]===this},remove:function(){return null!=this._index&&(l.splice(this._scope[this._list],null,this._index,1),this._scope[this._reference]==this&&(this._scope[this._reference]=null),this._scope=null,!0)},getView:function(){return this._scope.getView()}}),f=l.extend({initialize:function(t){this.precision=l.pick(t,5),this.multiplier=Math.pow(10,this.precision)},number:function(t){return this.precision<16?Math.round(t*this.multiplier)/this.multiplier:t},pair:function(t,e,i){return this.number(t)+(i||",")+this.number(e)},point:function(t,e){return this.number(t.x)+(e||",")+this.number(t.y)},size:function(t,e){return this.number(t.width)+(e||",")+this.number(t.height)},rectangle:function(t,e){return this.point(t,e)+(e||",")+this.size(t,e)}});f.instance=new f;var g=new function(){var t=[[.5773502691896257],[0,.7745966692414834],[.33998104358485626,.8611363115940526],[0,.5384693101056831,.906179845938664],[.2386191860831969,.6612093864662645,.932469514203152],[0,.4058451513773972,.7415311855993945,.9491079123427585],[.1834346424956498,.525532409916329,.7966664774136267,.9602898564975363],[0,.3242534234038089,.6133714327005904,.8360311073266358,.9681602395076261],[.14887433898163122,.4333953941292472,.6794095682990244,.8650633666889845,.9739065285171717],[0,.26954315595234496,.5190961292068118,.7301520055740494,.8870625997680953,.978228658146057],[.1252334085114689,.3678314989981802,.5873179542866175,.7699026741943047,.9041172563704749,.9815606342467192],[0,.2304583159551348,.44849275103644687,.6423493394403402,.8015780907333099,.9175983992229779,.9841830547185881],[.10805494870734367,.31911236892788974,.5152486363581541,.6872929048116855,.827201315069765,.9284348836635735,.9862838086968123],[0,.20119409399743451,.3941513470775634,.5709721726085388,.7244177313601701,.8482065834104272,.937273392400706,.9879925180204854],[.09501250983763744,.2816035507792589,.45801677765722737,.6178762444026438,.755404408355003,.8656312023878318,.9445750230732326,.9894009349916499]],e=[[1],[.8888888888888888,.5555555555555556],[.6521451548625461,.34785484513745385],[.5688888888888889,.47862867049936647,.23692688505618908],[.46791393457269104,.3607615730481386,.17132449237917036],[.4179591836734694,.3818300505051189,.27970539148927664,.1294849661688697],[.362683783378362,.31370664587788727,.22238103445337448,.10122853629037626],[.3302393550012598,.31234707704000286,.26061069640293544,.1806481606948574,.08127438836157441],[.29552422471475287,.26926671930999635,.21908636251598204,.1494513491505806,.06667134430868814],[.2729250867779006,.26280454451024665,.23319376459199048,.18629021092773426,.1255803694649046,.05566856711617366],[.24914704581340277,.2334925365383548,.20316742672306592,.16007832854334622,.10693932599531843,.04717533638651183],[.2325515532308739,.22628318026289723,.2078160475368885,.17814598076194574,.13887351021978725,.09212149983772845,.04048400476531588],[.2152638534631578,.2051984637212956,.18553839747793782,.15720316715819355,.12151857068790319,.08015808715976021,.03511946033175186],[.2025782419255613,.19843148532711158,.1861610000155622,.16626920581699392,.13957067792615432,.10715922046717194,.07036604748810812,.03075324199611727],[.1894506104550685,.18260341504492358,.16915651939500254,.14959598881657674,.12462897125553388,.09515851168249279,.062253523938647894,.027152459411754096]],i=Math.abs,n=Math.sqrt,s=Math.pow,r=Math.log2||function(t){return Math.log(t)*Math.LOG2E};function a(t,e,i){return t<e?e:t>i?i:t}function o(t,e,n){function s(t){var e=134217729*t,i=t-e+e;return[i,t-i]}var r=e*e-t*n,a=e*e+t*n;if(3*i(r)<a){var o=s(t),h=s(e),c=s(n),l=e*e,u=t*n;r=l-u+(h[0]*h[0]-l+2*h[0]*h[1]+h[1]*h[1]-(o[0]*c[0]-u+o[0]*c[1]+o[1]*c[0]+o[1]*c[1]))}return r}function h(){var t=Math.max.apply(Math,arguments);return t&&(t<1e-8||t>1e8)?s(2,-Math.round(r(t))):0}return{EPSILON:1e-12,MACHINE_EPSILON:112e-18,CURVETIME_EPSILON:1e-8,GEOMETRIC_EPSILON:1e-7,TRIGONOMETRIC_EPSILON:1e-8,KAPPA:4*(n(2)-1)/3,isZero:function(t){return t>=-1e-12&&t<=1e-12},clamp:a,integrate:function(i,n,s,r){for(var a=t[r-2],o=e[r-2],h=.5*(s-n),c=h+n,l=0,u=r+1>>1,p=1&r?o[l++]*i(c):0;l<u;){var d=h*a[l];p+=o[l++]*(i(c+d)+i(c-d))}return h*p},findRoot:function(t,e,n,s,r,o,h){for(var c=0;c<o;c++){var l=t(n),u=l/e(n),p=n-u;if(i(u)<h){n=p;break}l>0?(r=n,n=p<=s?.5*(s+r):p):(s=n,n=p>=r?.5*(s+r):p)}return a(n,s,r)},solveQuadratic:function(t,e,s,r,c,l){var u,p=1/0;if(i(t)<1e-12){if(i(e)<1e-12)return i(s)<1e-12?-1:0;u=-s/e}else{var d=o(t,e*=-.5,s);if(d&&i(d)<112e-18){var f=h(i(t),i(e),i(s));f&&(d=o(t*=f,e*=f,s*=f))}if(d>=-112e-18){var g=d<0?0:n(d),_=e+(e<0?-g:g);0===_?p=-(u=s/t):(u=_/t,p=s/_)}}var v=0,m=null==c,x=c-1e-12,y=l+1e-12;return isFinite(u)&&(m||u>x&&u<y)&&(r[v++]=m?u:a(u,c,l)),p!==u&&isFinite(p)&&(m||p>x&&p<y)&&(r[v++]=m?p:a(p,c,l)),v},solveCubic:function(t,e,r,o,c,l,u){var p,d,f,_,v,m=h(i(t),i(e),i(r),i(o));function x(i){var n=t*(p=i);_=(n+(d=n+e))*p+(f=d*p+r),v=f*p+o}if(m&&(t*=m,e*=m,r*=m,o*=m),i(t)<1e-12)t=e,d=r,f=o,p=1/0;else if(i(o)<1e-12)d=e,f=r,p=0;else{x(-e/t/3);var y=v/t,w=s(i(y),1/3),b=y<0?-1:1,k=-_/t,C=k>0?1.324717957244746*Math.max(w,n(k)):w,S=p-b*C;if(S!==p){do{x(S),S=0===_?p:p-v/_/(1+112e-18)}while(b*S>b*p);i(t)*p*p>i(o/p)&&(d=((f=-o/p)-r)/p)}}var I=g.solveQuadratic(t,d,f,c,l,u),A=null==l;return isFinite(p)&&(0===I||I>0&&p!==c[0]&&p!==c[1])&&(A||p>l-1e-12&&p<u+1e-12)&&(c[I++]=A?p:a(p,l,u)),I}}},_={_id:1,_pools:{},get:function(t){if(t){var e=this._pools[t];return e||(e=this._pools[t]={_id:1}),e._id++}return this._id++}},v=l.extend({_class:"Point",_readIndex:!0,initialize:function(t,e){var i=typeof t,n=this.__read,s=0;if("number"===i){var r="number"==typeof e;this._set(t,r?e:t),n&&(s=r?2:1)}else if("undefined"===i||null===t)this._set(0,0),n&&(s=null===t?1:0);else{var a="string"===i?t.split(/[\s,]+/)||[]:t;s=1,Array.isArray(a)?this._set(+a[0],+(a.length>1?a[1]:a[0])):"x"in a?this._set(a.x||0,a.y||0):"width"in a?this._set(a.width||0,a.height||0):"angle"in a?(this._set(a.length||0,0),this.setAngle(a.angle||0)):(this._set(0,0),s=0)}return n&&(this.__read=s),this},set:"#initialize",_set:function(t,e){return this.x=t,this.y=e,this},equals:function(t){return this===t||t&&(this.x===t.x&&this.y===t.y||Array.isArray(t)&&this.x===t[0]&&this.y===t[1])||!1},clone:function(){return new v(this.x,this.y)},toString:function(){var t=f.instance;return"{ x: "+t.number(this.x)+", y: "+t.number(this.y)+" }"},_serialize:function(t){var e=t.formatter;return[e.number(this.x),e.number(this.y)]},getLength:function(){return Math.sqrt(this.x*this.x+this.y*this.y)},setLength:function(t){if(this.isZero()){var e=this._angle||0;this._set(Math.cos(e)*t,Math.sin(e)*t)}else{var i=t/this.getLength();g.isZero(i)&&this.getAngle(),this._set(this.x*i,this.y*i)}},getAngle:function(){return 180*this.getAngleInRadians.apply(this,arguments)/Math.PI},setAngle:function(t){this.setAngleInRadians.call(this,t*Math.PI/180)},getAngleInDegrees:"#getAngle",setAngleInDegrees:"#setAngle",getAngleInRadians:function(){if(arguments.length){var t=v.read(arguments),e=this.getLength()*t.getLength();if(g.isZero(e))return NaN;var i=this.dot(t)/e;return Math.acos(i<-1?-1:i>1?1:i)}return this.isZero()?this._angle||0:this._angle=Math.atan2(this.y,this.x)},setAngleInRadians:function(t){if(this._angle=t,!this.isZero()){var e=this.getLength();this._set(Math.cos(t)*e,Math.sin(t)*e)}},getQuadrant:function(){return this.x>=0?this.y>=0?1:4:this.y>=0?2:3}},{beans:!1,getDirectedAngle:function(){var t=v.read(arguments);return 180*Math.atan2(this.cross(t),this.dot(t))/Math.PI},getDistance:function(){var t=v.read(arguments),e=t.x-this.x,i=t.y-this.y,n=e*e+i*i,s=l.read(arguments);return s?n:Math.sqrt(n)},normalize:function(t){t===o&&(t=1);var e=this.getLength(),i=0!==e?t/e:0,n=new v(this.x*i,this.y*i);return i>=0&&(n._angle=this._angle),n},rotate:function(t,e){if(0===t)return this.clone();t=t*Math.PI/180;var i=e?this.subtract(e):this,n=Math.sin(t),s=Math.cos(t);return i=new v(i.x*s-i.y*n,i.x*n+i.y*s),e?i.add(e):i},transform:function(t){return t?t._transformPoint(this):this},add:function(){var t=v.read(arguments);return new v(this.x+t.x,this.y+t.y)},subtract:function(){var t=v.read(arguments);return new v(this.x-t.x,this.y-t.y)},multiply:function(){var t=v.read(arguments);return new v(this.x*t.x,this.y*t.y)},divide:function(){var t=v.read(arguments);return new v(this.x/t.x,this.y/t.y)},modulo:function(){var t=v.read(arguments);return new v(this.x%t.x,this.y%t.y)},negate:function(){return new v(-this.x,-this.y)},isInside:function(){return w.read(arguments).contains(this)},isClose:function(){var t=v.read(arguments),e=l.read(arguments);return this.getDistance(t)<=e},isCollinear:function(){var t=v.read(arguments);return v.isCollinear(this.x,this.y,t.x,t.y)},isColinear:"#isCollinear",isOrthogonal:function(){var t=v.read(arguments);return v.isOrthogonal(this.x,this.y,t.x,t.y)},isZero:function(){var t=g.isZero;return t(this.x)&&t(this.y)},isNaN:function(){return isNaN(this.x)||isNaN(this.y)},isInQuadrant:function(t){return this.x*(t>1&&t<4?-1:1)>=0&&this.y*(t>2?-1:1)>=0},dot:function(){var t=v.read(arguments);return this.x*t.x+this.y*t.y},cross:function(){var t=v.read(arguments);return this.x*t.y-this.y*t.x},project:function(){var t=v.read(arguments),e=t.isZero()?0:this.dot(t)/t.dot(t);return new v(t.x*e,t.y*e)},statics:{min:function(){var t=v.read(arguments),e=v.read(arguments);return new v(Math.min(t.x,e.x),Math.min(t.y,e.y))},max:function(){var t=v.read(arguments),e=v.read(arguments);return new v(Math.max(t.x,e.x),Math.max(t.y,e.y))},random:function(){return new v(Math.random(),Math.random())},isCollinear:function(t,e,i,n){return Math.abs(t*n-e*i)<=1e-8*Math.sqrt((t*t+e*e)*(i*i+n*n))},isOrthogonal:function(t,e,i,n){return Math.abs(t*i+e*n)<=1e-8*Math.sqrt((t*t+e*e)*(i*i+n*n))}}},l.each(["round","ceil","floor","abs"],(function(t){var e=Math[t];this[t]=function(){return new v(e(this.x),e(this.y))}}),{})),m=v.extend({initialize:function(t,e,i,n){this._x=t,this._y=e,this._owner=i,this._setter=n},_set:function(t,e,i){return this._x=t,this._y=e,i||this._owner[this._setter](this),this},getX:function(){return this._x},setX:function(t){this._x=t,this._owner[this._setter](this)},getY:function(){return this._y},setY:function(t){this._y=t,this._owner[this._setter](this)},isSelected:function(){return!!(this._owner._selection&this._getSelection())},setSelected:function(t){this._owner._changeSelection(this._getSelection(),t)},_getSelection:function(){return"setPosition"===this._setter?4:0}}),x=l.extend({_class:"Size",_readIndex:!0,initialize:function(t,e){var i=typeof t,n=this.__read,s=0;if("number"===i){var r="number"==typeof e;this._set(t,r?e:t),n&&(s=r?2:1)}else if("undefined"===i||null===t)this._set(0,0),n&&(s=null===t?1:0);else{var a="string"===i?t.split(/[\s,]+/)||[]:t;s=1,Array.isArray(a)?this._set(+a[0],+(a.length>1?a[1]:a[0])):"width"in a?this._set(a.width||0,a.height||0):"x"in a?this._set(a.x||0,a.y||0):(this._set(0,0),s=0)}return n&&(this.__read=s),this},set:"#initialize",_set:function(t,e){return this.width=t,this.height=e,this},equals:function(t){return t===this||t&&(this.width===t.width&&this.height===t.height||Array.isArray(t)&&this.width===t[0]&&this.height===t[1])||!1},clone:function(){return new x(this.width,this.height)},toString:function(){var t=f.instance;return"{ width: "+t.number(this.width)+", height: "+t.number(this.height)+" }"},_serialize:function(t){var e=t.formatter;return[e.number(this.width),e.number(this.height)]},add:function(){var t=x.read(arguments);return new x(this.width+t.width,this.height+t.height)},subtract:function(){var t=x.read(arguments);return new x(this.width-t.width,this.height-t.height)},multiply:function(){var t=x.read(arguments);return new x(this.width*t.width,this.height*t.height)},divide:function(){var t=x.read(arguments);return new x(this.width/t.width,this.height/t.height)},modulo:function(){var t=x.read(arguments);return new x(this.width%t.width,this.height%t.height)},negate:function(){return new x(-this.width,-this.height)},isZero:function(){var t=g.isZero;return t(this.width)&&t(this.height)},isNaN:function(){return isNaN(this.width)||isNaN(this.height)},statics:{min:function(t,e){return new x(Math.min(t.width,e.width),Math.min(t.height,e.height))},max:function(t,e){return new x(Math.max(t.width,e.width),Math.max(t.height,e.height))},random:function(){return new x(Math.random(),Math.random())}}},l.each(["round","ceil","floor","abs"],(function(t){var e=Math[t];this[t]=function(){return new x(e(this.width),e(this.height))}}),{})),y=x.extend({initialize:function(t,e,i,n){this._width=t,this._height=e,this._owner=i,this._setter=n},_set:function(t,e,i){return this._width=t,this._height=e,i||this._owner[this._setter](this),this},getWidth:function(){return this._width},setWidth:function(t){this._width=t,this._owner[this._setter](this)},getHeight:function(){return this._height},setHeight:function(t){this._height=t,this._owner[this._setter](this)}}),w=l.extend({_class:"Rectangle",_readIndex:!0,beans:!0,initialize:function(t,e,i,n){var s,r=typeof t;if("number"===r?(this._set(t,e,i,n),s=4):"undefined"===r||null===t?(this._set(0,0,0,0),s=null===t?1:0):1===arguments.length&&(Array.isArray(t)?(this._set.apply(this,t),s=1):t.x!==o||t.width!==o?(this._set(t.x||0,t.y||0,t.width||0,t.height||0),s=1):t.from===o&&t.to===o&&(this._set(0,0,0,0),l.filter(this,t),s=1)),s===o){var a,h,c=v.readNamed(arguments,"from"),u=l.peek(arguments),p=c.x,d=c.y;if(u&&u.x!==o||l.hasNamed(arguments,"to")){var f=v.readNamed(arguments,"to");a=f.x-p,h=f.y-d,a<0&&(p=f.x,a=-a),h<0&&(d=f.y,h=-h)}else{var g=x.read(arguments);a=g.width,h=g.height}this._set(p,d,a,h),s=arguments.__index;var _=arguments.__filtered;_&&(this.__filtered=_)}return this.__read&&(this.__read=s),this},set:"#initialize",_set:function(t,e,i,n){return this.x=t,this.y=e,this.width=i,this.height=n,this},clone:function(){return new w(this.x,this.y,this.width,this.height)},equals:function(t){var e=l.isPlainValue(t)?w.read(arguments):t;return e===this||e&&this.x===e.x&&this.y===e.y&&this.width===e.width&&this.height===e.height||!1},toString:function(){var t=f.instance;return"{ x: "+t.number(this.x)+", y: "+t.number(this.y)+", width: "+t.number(this.width)+", height: "+t.number(this.height)+" }"},_serialize:function(t){var e=t.formatter;return[e.number(this.x),e.number(this.y),e.number(this.width),e.number(this.height)]},getPoint:function(t){return new(t?v:m)(this.x,this.y,this,"setPoint")},setPoint:function(){var t=v.read(arguments);this.x=t.x,this.y=t.y},getSize:function(t){return new(t?x:y)(this.width,this.height,this,"setSize")},_fw:1,_fh:1,setSize:function(){var t=x.read(arguments),e=this._sx,i=this._sy,n=t.width,s=t.height;e&&(this.x+=(this.width-n)*e),i&&(this.y+=(this.height-s)*i),this.width=n,this.height=s,this._fw=this._fh=1},getLeft:function(){return this.x},setLeft:function(t){if(!this._fw){var e=t-this.x;this.width-=.5===this._sx?2*e:e}this.x=t,this._sx=this._fw=0},getTop:function(){return this.y},setTop:function(t){if(!this._fh){var e=t-this.y;this.height-=.5===this._sy?2*e:e}this.y=t,this._sy=this._fh=0},getRight:function(){return this.x+this.width},setRight:function(t){if(!this._fw){var e=t-this.x;this.width=.5===this._sx?2*e:e}this.x=t-this.width,this._sx=1,this._fw=0},getBottom:function(){return this.y+this.height},setBottom:function(t){if(!this._fh){var e=t-this.y;this.height=.5===this._sy?2*e:e}this.y=t-this.height,this._sy=1,this._fh=0},getCenterX:function(){return this.x+this.width/2},setCenterX:function(t){this._fw||.5===this._sx?this.x=t-this.width/2:(this._sx&&(this.x+=2*(t-this.x)*this._sx),this.width=2*(t-this.x)),this._sx=.5,this._fw=0},getCenterY:function(){return this.y+this.height/2},setCenterY:function(t){this._fh||.5===this._sy?this.y=t-this.height/2:(this._sy&&(this.y+=2*(t-this.y)*this._sy),this.height=2*(t-this.y)),this._sy=.5,this._fh=0},getCenter:function(t){return new(t?v:m)(this.getCenterX(),this.getCenterY(),this,"setCenter")},setCenter:function(){var t=v.read(arguments);return this.setCenterX(t.x),this.setCenterY(t.y),this},getArea:function(){return this.width*this.height},isEmpty:function(){return 0===this.width||0===this.height},contains:function(t){return t&&t.width!==o||4===(Array.isArray(t)?t:arguments).length?this._containsRectangle(w.read(arguments)):this._containsPoint(v.read(arguments))},_containsPoint:function(t){var e=t.x,i=t.y;return e>=this.x&&i>=this.y&&e<=this.x+this.width&&i<=this.y+this.height},_containsRectangle:function(t){var e=t.x,i=t.y;return e>=this.x&&i>=this.y&&e+t.width<=this.x+this.width&&i+t.height<=this.y+this.height},intersects:function(){var t=w.read(arguments),e=l.read(arguments)||0;return t.x+t.width>this.x-e&&t.y+t.height>this.y-e&&t.x<this.x+this.width+e&&t.y<this.y+this.height+e},intersect:function(){var t=w.read(arguments),e=Math.max(this.x,t.x),i=Math.max(this.y,t.y),n=Math.min(this.x+this.width,t.x+t.width),s=Math.min(this.y+this.height,t.y+t.height);return new w(e,i,n-e,s-i)},unite:function(){var t=w.read(arguments),e=Math.min(this.x,t.x),i=Math.min(this.y,t.y),n=Math.max(this.x+this.width,t.x+t.width),s=Math.max(this.y+this.height,t.y+t.height);return new w(e,i,n-e,s-i)},include:function(){var t=v.read(arguments),e=Math.min(this.x,t.x),i=Math.min(this.y,t.y),n=Math.max(this.x+this.width,t.x),s=Math.max(this.y+this.height,t.y);return new w(e,i,n-e,s-i)},expand:function(){var t=x.read(arguments),e=t.width,i=t.height;return new w(this.x-e/2,this.y-i/2,this.width+e,this.height+i)},scale:function(t,e){return this.expand(this.width*t-this.width,this.height*(e===o?t:e)-this.height)}},l.each([["Top","Left"],["Top","Right"],["Bottom","Left"],["Bottom","Right"],["Left","Center"],["Top","Center"],["Right","Center"],["Bottom","Center"]],(function(t,e){var i=t.join(""),n=/^[RL]/.test(i);e>=4&&(t[1]+=n?"Y":"X");var s=t[n?0:1],r=t[n?1:0],a="get"+s,o="get"+r,h="set"+s,c="set"+r,l="set"+i;this["get"+i]=function(t){return new(t?v:m)(this[a](),this[o](),this,l)},this[l]=function(){var t=v.read(arguments);this[h](t.x),this[c](t.y)}}),{beans:!0})),b=w.extend({initialize:function(t,e,i,n,s,r){this._set(t,e,i,n,!0),this._owner=s,this._setter=r},_set:function(t,e,i,n,s){return this._x=t,this._y=e,this._width=i,this._height=n,s||this._owner[this._setter](this),this}},new function(){var t=w.prototype;return l.each(["x","y","width","height"],(function(t){var e=l.capitalize(t),i="_"+t;this["get"+e]=function(){return this[i]},this["set"+e]=function(t){this[i]=t,this._dontNotify||this._owner[this._setter](this)}}),l.each(["Point","Size","Center","Left","Top","Right","Bottom","CenterX","CenterY","TopLeft","TopRight","BottomLeft","BottomRight","LeftCenter","TopCenter","RightCenter","BottomCenter"],(function(e){var i="set"+e;this[i]=function(){this._dontNotify=!0,t[i].apply(this,arguments),this._dontNotify=!1,this._owner[this._setter](this)}}),{isSelected:function(){return!!(2&this._owner._selection)},setSelected:function(t){var e=this._owner;e._changeSelection&&e._changeSelection(2,t)}}))}),k=l.extend({_class:"Matrix",initialize:function t(e,i){var n=arguments.length,s=!0;if(n>=6?this._set.apply(this,arguments):1===n||2===n?e instanceof t?this._set(e._a,e._b,e._c,e._d,e._tx,e._ty,i):Array.isArray(e)?this._set.apply(this,i?e.concat([i]):e):s=!1:n?s=!1:this.reset(),!s)throw new Error("Unsupported matrix parameters");return this},set:"#initialize",_set:function(t,e,i,n,s,r,a){return this._a=t,this._b=e,this._c=i,this._d=n,this._tx=s,this._ty=r,a||this._changed(),this},_serialize:function(t,e){return l.serialize(this.getValues(),t,!0,e)},_changed:function(){var t=this._owner;t&&(t._applyMatrix?t.transform(null,!0):t._changed(25))},clone:function(){return new k(this._a,this._b,this._c,this._d,this._tx,this._ty)},equals:function(t){return t===this||t&&this._a===t._a&&this._b===t._b&&this._c===t._c&&this._d===t._d&&this._tx===t._tx&&this._ty===t._ty},toString:function(){var t=f.instance;return"[["+[t.number(this._a),t.number(this._c),t.number(this._tx)].join(", ")+"], ["+[t.number(this._b),t.number(this._d),t.number(this._ty)].join(", ")+"]]"},reset:function(t){return this._a=this._d=1,this._b=this._c=this._tx=this._ty=0,t||this._changed(),this},apply:function(t,e){var i=this._owner;return!!i&&(i.transform(null,!0,l.pick(t,!0),e),this.isIdentity())},translate:function(){var t=v.read(arguments),e=t.x,i=t.y;return this._tx+=e*this._a+i*this._c,this._ty+=e*this._b+i*this._d,this._changed(),this},scale:function(){var t=v.read(arguments),e=v.read(arguments,0,{readNull:!0});return e&&this.translate(e),this._a*=t.x,this._b*=t.x,this._c*=t.y,this._d*=t.y,e&&this.translate(e.negate()),this._changed(),this},rotate:function(t){t*=Math.PI/180;var e=v.read(arguments,1),i=e.x,n=e.y,s=Math.cos(t),r=Math.sin(t),a=i-i*s+n*r,o=n-i*r-n*s,h=this._a,c=this._b,l=this._c,u=this._d;return this._a=s*h+r*l,this._b=s*c+r*u,this._c=-r*h+s*l,this._d=-r*c+s*u,this._tx+=a*h+o*l,this._ty+=a*c+o*u,this._changed(),this},shear:function(){var t=v.read(arguments),e=v.read(arguments,0,{readNull:!0});e&&this.translate(e);var i=this._a,n=this._b;return this._a+=t.y*this._c,this._b+=t.y*this._d,this._c+=t.x*i,this._d+=t.x*n,e&&this.translate(e.negate()),this._changed(),this},skew:function(){var t=v.read(arguments),e=v.read(arguments,0,{readNull:!0}),i=Math.PI/180,n=new v(Math.tan(t.x*i),Math.tan(t.y*i));return this.shear(n,e)},append:function(t,e){if(t){var i=this._a,n=this._b,s=this._c,r=this._d,a=t._a,o=t._c,h=t._b,c=t._d,l=t._tx,u=t._ty;this._a=a*i+h*s,this._c=o*i+c*s,this._b=a*n+h*r,this._d=o*n+c*r,this._tx+=l*i+u*s,this._ty+=l*n+u*r,e||this._changed()}return this},prepend:function(t,e){if(t){var i=this._a,n=this._b,s=this._c,r=this._d,a=this._tx,o=this._ty,h=t._a,c=t._c,l=t._b,u=t._d,p=t._tx,d=t._ty;this._a=h*i+c*n,this._c=h*s+c*r,this._b=l*i+u*n,this._d=l*s+u*r,this._tx=h*a+c*o+p,this._ty=l*a+u*o+d,e||this._changed()}return this},appended:function(t){return this.clone().append(t)},prepended:function(t){return this.clone().prepend(t)},invert:function(){var t=this._a,e=this._b,i=this._c,n=this._d,s=this._tx,r=this._ty,a=t*n-e*i,o=null;return a&&!isNaN(a)&&isFinite(s)&&isFinite(r)&&(this._a=n/a,this._b=-e/a,this._c=-i/a,this._d=t/a,this._tx=(i*r-n*s)/a,this._ty=(e*s-t*r)/a,o=this),o},inverted:function(){return this.clone().invert()},concatenate:"#append",preConcatenate:"#prepend",chain:"#appended",_shiftless:function(){return new k(this._a,this._b,this._c,this._d,0,0)},_orNullIfIdentity:function(){return this.isIdentity()?null:this},isIdentity:function(){return 1===this._a&&0===this._b&&0===this._c&&1===this._d&&0===this._tx&&0===this._ty},isInvertible:function(){var t=this._a*this._d-this._c*this._b;return t&&!isNaN(t)&&isFinite(this._tx)&&isFinite(this._ty)},isSingular:function(){return!this.isInvertible()},transform:function(t,e,i){return arguments.length<3?this._transformPoint(v.read(arguments)):this._transformCoordinates(t,e,i)},_transformPoint:function(t,e,i){var n=t.x,s=t.y;return e||(e=new v),e._set(n*this._a+s*this._c+this._tx,n*this._b+s*this._d+this._ty,i)},_transformCoordinates:function(t,e,i){for(var n=0,s=2*i;n<s;n+=2){var r=t[n],a=t[n+1];e[n]=r*this._a+a*this._c+this._tx,e[n+1]=r*this._b+a*this._d+this._ty}return e},_transformCorners:function(t){var e=t.x,i=t.y,n=e+t.width,s=i+t.height,r=[e,i,n,i,n,s,e,s];return this._transformCoordinates(r,r,4)},_transformBounds:function(t,e,i){for(var n=this._transformCorners(t),s=n.slice(0,2),r=s.slice(),a=2;a<8;a++){var o=n[a],h=1&a;o<s[h]?s[h]=o:o>r[h]&&(r[h]=o)}return e||(e=new w),e._set(s[0],s[1],r[0]-s[0],r[1]-s[1],i)},inverseTransform:function(){return this._inverseTransform(v.read(arguments))},_inverseTransform:function(t,e,i){var n=this._a,s=this._b,r=this._c,a=this._d,o=this._tx,h=this._ty,c=n*a-s*r,l=null;if(c&&!isNaN(c)&&isFinite(o)&&isFinite(h)){var u=t.x-this._tx,p=t.y-this._ty;e||(e=new v),l=e._set((u*a-p*r)/c,(p*n-u*s)/c,i)}return l},decompose:function(){var t,e,i,n=this._a,s=this._b,r=this._c,a=this._d,o=n*a-s*r,h=Math.sqrt,c=Math.atan2,l=180/Math.PI;if(0!==n||0!==s){var u=h(n*n+s*s);t=Math.acos(n/u)*(s>0?1:-1),e=[u,o/u],i=[c(n*r+s*a,u*u),0]}else if(0!==r||0!==a){var p=h(r*r+a*a);t=Math.asin(r/p)*(a>0?1:-1),e=[o/p,p],i=[0,c(n*r+s*a,p*p)]}else t=0,i=e=[0,0];return{translation:this.getTranslation(),rotation:t*l,scaling:new v(e),skewing:new v(i[0]*l,i[1]*l)}},getValues:function(){return[this._a,this._b,this._c,this._d,this._tx,this._ty]},getTranslation:function(){return new v(this._tx,this._ty)},getScaling:function(){return this.decompose().scaling},getRotation:function(){return this.decompose().rotation},applyToContext:function(t){this.isIdentity()||t.transform(this._a,this._b,this._c,this._d,this._tx,this._ty)}},l.each(["a","b","c","d","tx","ty"],(function(t){var e=l.capitalize(t),i="_"+t;this["get"+e]=function(){return this[i]},this["set"+e]=function(t){this[i]=t,this._changed()}}),{})),C=l.extend({_class:"Line",initialize:function(t,e,i,n,s){var r=!1;arguments.length>=4?(this._px=t,this._py=e,this._vx=i,this._vy=n,r=s):(this._px=t.x,this._py=t.y,this._vx=e.x,this._vy=e.y,r=i),r||(this._vx-=this._px,this._vy-=this._py)},getPoint:function(){return new v(this._px,this._py)},getVector:function(){return new v(this._vx,this._vy)},getLength:function(){return this.getVector().getLength()},intersect:function(t,e){return C.intersect(this._px,this._py,this._vx,this._vy,t._px,t._py,t._vx,t._vy,!0,e)},getSide:function(t,e){return C.getSide(this._px,this._py,this._vx,this._vy,t.x,t.y,!0,e)},getDistance:function(t){return Math.abs(this.getSignedDistance(t))},getSignedDistance:function(t){return C.getSignedDistance(this._px,this._py,this._vx,this._vy,t.x,t.y,!0)},isCollinear:function(t){return v.isCollinear(this._vx,this._vy,t._vx,t._vy)},isOrthogonal:function(t){return v.isOrthogonal(this._vx,this._vy,t._vx,t._vy)},statics:{intersect:function(t,e,i,n,s,r,a,o,h,c){h||(i-=t,n-=e,a-=s,o-=r);var l=i*o-n*a;if(!g.isZero(l)){var u=t-s,p=e-r,d=(a*p-o*u)/l,f=(i*p-n*u)/l;if(c||-1e-12<d&&d<1+1e-12&&-1e-12<f&&f<1+1e-12)return c||(d=d<=0?0:d>=1?1:d),new v(t+d*i,e+d*n)}},getSide:function(t,e,i,n,s,r,a,o){a||(i-=t,n-=e);var h=s-t,c=h*n-(r-e)*i;return!o&&g.isZero(c)&&(c=(h*i+h*i)/(i*i+n*n))>=0&&c<=1&&(c=0),c<0?-1:c>0?1:0},getSignedDistance:function(t,e,i,n,s,r,a){return a||(i-=t,n-=e),0===i?n>0?s-t:t-s:0===n?i<0?r-e:e-r:((s-t)*n-(r-e)*i)/Math.sqrt(i*i+n*n)},getDistance:function(t,e,i,n,s,r,a){return Math.abs(C.getSignedDistance(t,e,i,n,s,r,a))}}}),S=d.extend({_class:"Project",_list:"projects",_reference:"project",_compactSerialize:!0,initialize:function(t){d.call(this,!0),this._children=[],this._namedChildren={},this._activeLayer=null,this._currentStyle=new $(null,null,this),this._view=Q.create(this,t||ot.getCanvas(1,1)),this._selectionItems={},this._selectionCount=0,this._updateVersion=0},_serialize:function(t,e){return l.serialize(this._children,t,!0,e)},_changed:function(t,e){if(1&t){var i=this._view;i&&(i._needsUpdate=!0,!i._requested&&i._autoUpdate&&i.requestUpdate())}var n=this._changes;if(n&&e){var s=this._changesById,r=e._id,a=s[r];a?a.flags|=t:n.push(s[r]={item:e,flags:t})}},clear:function(){for(var t=this._children,e=t.length-1;e>=0;e--)t[e].remove()},isEmpty:function(){return!this._children.length},remove:function t(){return!!t.base.call(this)&&(this._view&&this._view.remove(),!0)},getView:function(){return this._view},getCurrentStyle:function(){return this._currentStyle},setCurrentStyle:function(t){this._currentStyle.set(t)},getIndex:function(){return this._index},getOptions:function(){return this._scope.settings},getLayers:function(){return this._children},getActiveLayer:function(){return this._activeLayer||new P({project:this,insert:!0})},getSymbolDefinitions:function(){var t=[],e={};return this.getItems({class:L,match:function(i){var n=i._definition,s=n._id;return e[s]||(e[s]=!0,t.push(n)),!1}}),t},getSymbols:"getSymbolDefinitions",getSelectedItems:function(){var t=this._selectionItems,e=[];for(var i in t){var n=t[i],s=n._selection;1&s&&n.isInserted()?e.push(n):s||this._updateSelection(n)}return e},_updateSelection:function(t){var e=t._id,i=this._selectionItems;t._selection?i[e]!==t&&(this._selectionCount++,i[e]=t):i[e]===t&&(this._selectionCount--,delete i[e])},selectAll:function(){for(var t=this._children,e=0,i=t.length;e<i;e++)t[e].setFullySelected(!0)},deselectAll:function(){var t=this._selectionItems;for(var e in t)t[e].setFullySelected(!1)},addLayer:function(t){return this.insertLayer(o,t)},insertLayer:function(t,e){if(e instanceof P){e._remove(!1,!0),l.splice(this._children,[e],t,0),e._setProject(this,!0);var i=e._name;i&&e.setName(i),this._changes&&e._changed(5),this._activeLayer||(this._activeLayer=e)}else e=null;return e},_insertItem:function(t,e,i){return e=this.insertLayer(t,e)||(this._activeLayer||this._insertItem(o,new P(I.NO_INSERT),!0)).insertChild(t,e),i&&e.activate&&e.activate(),e},getItems:function(t){return I._getItems(this,t)},getItem:function(t){return I._getItems(this,t,null,null,!0)[0]||null},importJSON:function(t){this.activate();var e=this._activeLayer;return l.importJSON(t,e&&e.isEmpty()&&e)},removeOn:function(t){var e=this._removeSets;if(e){"mouseup"===t&&(e.mousedrag=null);var i=e[t];if(i){for(var n in i){var s=i[n];for(var r in e){var a=e[r];a&&a!=i&&delete a[s._id]}s.remove()}e[t]=null}}},draw:function(t,e,i){this._updateVersion++,t.save(),e.applyToContext(t);for(var n=this._children,s=new l({offset:new v(0,0),pixelRatio:i,viewMatrix:e.isIdentity()?null:e,matrices:[new k],updateMatrix:!0}),r=0,a=n.length;r<a;r++)n[r].draw(t,s);if(t.restore(),this._selectionCount>0){t.save(),t.strokeWidth=1;var o=this._selectionItems,h=this._scope.settings.handleSize,c=this._updateVersion;for(var u in o)o[u]._drawSelection(t,e,h,o,c);t.restore()}}}),I=l.extend(u,{statics:{extend:function t(e){return e._serializeFields&&(e._serializeFields=l.set({},this.prototype._serializeFields,e._serializeFields)),t.base.apply(this,arguments)},NO_INSERT:{insert:!1}},_class:"Item",_name:null,_applyMatrix:!0,_canApplyMatrix:!0,_canScaleStroke:!1,_pivot:null,_visible:!0,_blendMode:"normal",_opacity:1,_locked:!1,_guide:!1,_clipMask:!1,_selection:0,_selectBounds:!0,_selectChildren:!1,_serializeFields:{name:null,applyMatrix:null,matrix:new k,pivot:null,visible:!0,blendMode:"normal",opacity:1,locked:!1,guide:!1,clipMask:!1,selected:!1,data:{}},_prioritize:["applyMatrix"]},new function(){var t=["onMouseDown","onMouseUp","onMouseDrag","onClick","onDoubleClick","onMouseMove","onMouseEnter","onMouseLeave"];return l.each(t,(function(t){this._events[t]={install:function(t){this.getView()._countItemEvent(t,1)},uninstall:function(t){this.getView()._countItemEvent(t,-1)}}}),{_events:{onFrame:{install:function(){this.getView()._animateItem(this,!0)},uninstall:function(){this.getView()._animateItem(this,!1)}},onLoad:{},onError:{}},statics:{_itemHandlers:t}})},{initialize:function(){},_initialize:function(t,e){var i=t&&l.isPlainObject(t),n=i&&!0===t.internal,s=this._matrix=new k,r=i&&t.project||ut.project,a=ut.settings;return this._id=n?null:_.get(),this._parent=this._index=null,this._applyMatrix=this._canApplyMatrix&&a.applyMatrix,e&&s.translate(e),s._owner=this,this._style=new $(r._currentStyle,this,r),n||i&&0==t.insert||!a.insertItems&&(!i||!0!==t.insert)?this._setProject(r):(i&&t.parent||r)._insertItem(o,this,!0),i&&t!==I.NO_INSERT&&this.set(t,{internal:!0,insert:!0,project:!0,parent:!0}),i},_serialize:function(t,e){var i={},n=this;function s(s){for(var r in s){var a=n[r];l.equals(a,"leading"===r?1.2*s.fontSize:s[r])||(i[r]=l.serialize(a,t,"data"!==r,e))}}return s(this._serializeFields),this instanceof A||s(this._style._defaults),[this._class,i]},_changed:function(t){var e=this._symbol,i=this._parent||e,n=this._project;8&t&&(this._bounds=this._position=this._decomposed=o),16&t&&(this._globalMatrix=o),i&&72&t&&I._clearBoundsCache(i),2&t&&I._clearBoundsCache(this),n&&n._changed(t,this),e&&e._changed(t)},getId:function(){return this._id},getName:function(){return this._name},setName:function(t){if(this._name&&this._removeNamed(),t===+t+"")throw new Error("Names consisting only of numbers are not supported.");var e=this._getOwner();if(t&&e){var i=e._children,n=e._namedChildren;(n[t]=n[t]||[]).push(this),t in i||(i[t]=this)}this._name=t||o,this._changed(256)},getStyle:function(){return this._style},setStyle:function(t){this.getStyle().set(t)}},l.each(["locked","visible","blendMode","opacity","guide"],(function(t){var e=l.capitalize(t),i="_"+t,n={locked:256,visible:265};this["get"+e]=function(){return this[i]},this["set"+e]=function(e){e!=this[i]&&(this[i]=e,this._changed(n[t]||257))}}),{}),{beans:!0,getSelection:function(){return this._selection},setSelection:function(t){if(t!==this._selection){this._selection=t;var e=this._project;e&&(e._updateSelection(this),this._changed(257))}},_changeSelection:function(t,e){var i=this._selection;this.setSelection(e?i|t:i&~t)},isSelected:function(){if(this._selectChildren)for(var t=this._children,e=0,i=t.length;e<i;e++)if(t[e].isSelected())return!0;return!!(1&this._selection)},setSelected:function(t){if(this._selectChildren)for(var e=this._children,i=0,n=e.length;i<n;i++)e[i].setSelected(t);this._changeSelection(1,t)},isFullySelected:function(){var t=this._children,e=!!(1&this._selection);if(t&&e){for(var i=0,n=t.length;i<n;i++)if(!t[i].isFullySelected())return!1;return!0}return e},setFullySelected:function(t){var e=this._children;if(e)for(var i=0,n=e.length;i<n;i++)e[i].setFullySelected(t);this._changeSelection(1,t)},isClipMask:function(){return this._clipMask},setClipMask:function(t){this._clipMask!=(t=!!t)&&(this._clipMask=t,t&&(this.setFillColor(null),this.setStrokeColor(null)),this._changed(257),this._parent&&this._parent._changed(2048))},getData:function(){return this._data||(this._data={}),this._data},setData:function(t){this._data=t},getPosition:function(t){var e=t?v:m,i=this._position||(this._position=this._getPositionFromBounds());return new e(i.x,i.y,this,"setPosition")},setPosition:function(){this.translate(v.read(arguments).subtract(this.getPosition(!0)))},_getPositionFromBounds:function(t){return this._pivot?this._matrix._transformPoint(this._pivot):(t||this.getBounds()).getCenter(!0)},getPivot:function(){var t=this._pivot;return t?new m(t.x,t.y,this,"setPivot"):null},setPivot:function(){this._pivot=v.read(arguments,0,{clone:!0,readNull:!0}),this._position=o}},l.each({getStrokeBounds:{stroke:!0},getHandleBounds:{handle:!0},getInternalBounds:{internal:!0}},(function(t,e){this[e]=function(e){return this.getBounds(e,t)}}),{beans:!0,getBounds:function(t,e){var i=e||t instanceof k,n=l.set({},i?e:t,this._boundsOptions);n.stroke&&!this.getStrokeScaling()||(n.cacheItem=this);var s=this._getCachedBounds(i&&t,n).rect;return arguments.length?s:new b(s.x,s.y,s.width,s.height,this,"setBounds")},setBounds:function(){var t=w.read(arguments),e=this.getBounds(),i=this._matrix,n=new k,s=t.getCenter();n.translate(s),t.width==e.width&&t.height==e.height||(i.isInvertible()||(i.set(i._backup||(new k).translate(i.getTranslation())),e=this.getBounds()),n.scale(0!==e.width?t.width/e.width:0,0!==e.height?t.height/e.height:0)),s=e.getCenter(),n.translate(-s.x,-s.y),this.transform(n)},_getBounds:function(t,e){var i=this._children;return i&&i.length?(I._updateBoundsCache(this,e.cacheItem),I._getBounds(i,t,e)):new w},_getBoundsCacheKey:function(t,e){return[t.stroke?1:0,t.handle?1:0,e?1:0].join("")},_getCachedBounds:function(t,e,i){t=t&&t._orNullIfIdentity();var n=e.internal&&!i,s=e.cacheItem,r=n?null:this._matrix._orNullIfIdentity(),a=s&&(!t||t.equals(r))&&this._getBoundsCacheKey(e,n),o=this._bounds;if(I._updateBoundsCache(this._parent||this._symbol,s),a&&o&&a in o)return{rect:(p=o[a]).rect.clone(),nonscaling:p.nonscaling};var h=this._getBounds(t||r,e),c=h.rect||h,l=this._style,u=h.nonscaling||l.hasStroke()&&!l.getStrokeScaling();if(a){o||(this._bounds=o={});var p=o[a]={rect:c.clone(),nonscaling:u,internal:n}}return{rect:c,nonscaling:u}},_getStrokeMatrix:function(t,e){var i=this.getStrokeScaling()?null:e&&e.internal?this:this._parent||this._symbol&&this._symbol._item,n=i?i.getViewMatrix().invert():t;return n&&n._shiftless()},statics:{_updateBoundsCache:function(t,e){if(t&&e){var i=e._id,n=t._boundsCache=t._boundsCache||{ids:{},list:[]};n.ids[i]||(n.list.push(e),n.ids[i]=e)}},_clearBoundsCache:function(t){var e=t._boundsCache;if(e){t._bounds=t._position=t._boundsCache=o;for(var i=0,n=e.list,s=n.length;i<s;i++){var r=n[i];r!==t&&(r._bounds=r._position=o,r._boundsCache&&I._clearBoundsCache(r))}}},_getBounds:function(t,e,i){var n=1/0,s=-n,r=n,a=s,o=!1;i=i||{};for(var h=0,c=t.length;h<c;h++){var l=t[h];if(l._visible&&!l.isEmpty(!0)){var u=l._getCachedBounds(e&&e.appended(l._matrix),i,!0),p=u.rect;n=Math.min(p.x,n),r=Math.min(p.y,r),s=Math.max(p.x+p.width,s),a=Math.max(p.y+p.height,a),u.nonscaling&&(o=!0)}}return{rect:isFinite(n)?new w(n,r,s-n,a-r):new w,nonscaling:o}}}}),{beans:!0,_decompose:function(){return this._applyMatrix?null:this._decomposed||(this._decomposed=this._matrix.decompose())},getRotation:function(){var t=this._decompose();return t?t.rotation:0},setRotation:function(t){var e=this.getRotation();if(null!=e&&null!=t){var i=this._decomposed;this.rotate(t-e),i&&(i.rotation=t,this._decomposed=i)}},getScaling:function(){var t=this._decompose(),e=t&&t.scaling;return new m(e?e.x:1,e?e.y:1,this,"setScaling")},setScaling:function(){var t=this.getScaling(),e=v.read(arguments,0,{clone:!0,readNull:!0});if(t&&e&&!t.equals(e)){var i=this.getRotation(),n=this._decomposed,s=new k,r=this.getPosition(!0);s.translate(r),i&&s.rotate(i),s.scale(e.x/t.x,e.y/t.y),i&&s.rotate(-i),s.translate(r.negate()),this.transform(s),n&&(n.scaling=e,this._decomposed=n)}},getMatrix:function(){return this._matrix},setMatrix:function(){var t=this._matrix;t.initialize.apply(t,arguments)},getGlobalMatrix:function(t){var e=this._globalMatrix;if(e)for(var i=this._parent,n=[];i;){if(!i._globalMatrix){e=null;for(var s=0,r=n.length;s<r;s++)n[s]._globalMatrix=null;break}n.push(i),i=i._parent}e||(e=this._globalMatrix=this._matrix.clone(),(i=this._parent)&&e.prepend(i.getGlobalMatrix(!0)));return t?e:e.clone()},getViewMatrix:function(){return this.getGlobalMatrix().prepend(this.getView()._matrix)},getApplyMatrix:function(){return this._applyMatrix},setApplyMatrix:function(t){(this._applyMatrix=this._canApplyMatrix&&!!t)&&this.transform(null,!0)},getTransformContent:"#getApplyMatrix",setTransformContent:"#setApplyMatrix"},{getProject:function(){return this._project},_setProject:function(t,e){if(this._project!==t){this._project&&this._installEvents(!1),this._project=t;for(var i=this._children,n=0,s=i&&i.length;n<s;n++)i[n]._setProject(t);e=!0}e&&this._installEvents(!0)},getView:function(){return this._project._view},_installEvents:function t(e){t.base.call(this,e);for(var i=this._children,n=0,s=i&&i.length;n<s;n++)i[n]._installEvents(e)},getLayer:function(){for(var t=this;t=t._parent;)if(t instanceof P)return t;return null},getParent:function(){return this._parent},setParent:function(t){return t.addChild(this)},_getOwner:"#getParent",getChildren:function(){return this._children},setChildren:function(t){this.removeChildren(),this.addChildren(t)},getFirstChild:function(){return this._children&&this._children[0]||null},getLastChild:function(){return this._children&&this._children[this._children.length-1]||null},getNextSibling:function(){var t=this._getOwner();return t&&t._children[this._index+1]||null},getPreviousSibling:function(){var t=this._getOwner();return t&&t._children[this._index-1]||null},getIndex:function(){return this._index},equals:function(t){return t===this||t&&this._class===t._class&&this._style.equals(t._style)&&this._matrix.equals(t._matrix)&&this._locked===t._locked&&this._visible===t._visible&&this._blendMode===t._blendMode&&this._opacity===t._opacity&&this._clipMask===t._clipMask&&this._guide===t._guide&&this._equals(t)||!1},_equals:function(t){return l.equals(this._children,t._children)},clone:function(t){var e=new this.constructor(I.NO_INSERT),i=this._children,n=l.pick(t?t.insert:o,t===o||!0===t),s=l.pick(t?t.deep:o,!0);i&&e.copyAttributes(this),i&&!s||e.copyContent(this),i||e.copyAttributes(this),n&&e.insertAbove(this);var r=this._name,a=this._parent;if(r&&a){i=a._children;for(var h=r,c=1;i[r];)r=h+" "+c++;r!==h&&e.setName(r)}return e},copyContent:function(t){for(var e=t._children,i=0,n=e&&e.length;i<n;i++)this.addChild(e[i].clone(!1),!0)},copyAttributes:function(t,e){this.setStyle(t._style);for(var i=["_locked","_visible","_blendMode","_opacity","_clipMask","_guide"],n=0,s=i.length;n<s;n++){var r=i[n];t.hasOwnProperty(r)&&(this[r]=t[r])}e||this._matrix.set(t._matrix,!0),this.setApplyMatrix(t._applyMatrix),this.setPivot(t._pivot),this.setSelection(t._selection);var a=t._data,o=t._name;this._data=a?l.clone(a):null,o&&this.setName(o)},rasterize:function(t,e){var i=this.getStrokeBounds(),n=(t||this.getView().getResolution())/72,s=i.getTopLeft().floor(),r=i.getBottomRight().ceil(),a=new x(r.subtract(s)),h=new E(I.NO_INSERT);if(!a.isZero()){var c=ot.getCanvas(a.multiply(n)),u=c.getContext("2d"),p=(new k).scale(n).translate(s.negate());u.save(),p.applyToContext(u),this.draw(u,new l({matrices:[p]})),u.restore(),h.setCanvas(c)}return h.transform((new k).translate(s.add(a.divide(2))).scale(1/n)),(e===o||e)&&h.insertAbove(this),h},contains:function(){var t=this._matrix;return t.isInvertible()&&!!this._contains(t._inverseTransform(v.read(arguments)))},_contains:function(t){var e=this._children;if(e){for(var i=e.length-1;i>=0;i--)if(e[i].contains(t))return!0;return!1}return t.isInside(this.getInternalBounds())},isInside:function(){return w.read(arguments).contains(this.getBounds())},_asPathItem:function(){return new D.Rectangle({rectangle:this.getInternalBounds(),matrix:this._matrix,insert:!1})},intersects:function(t,e){return t instanceof I&&this._asPathItem().getIntersections(t._asPathItem(),null,e,!0).length>0}},new function(){function t(){return this._hitTest(v.read(arguments),O.getOptions(arguments))}function e(){var t=v.read(arguments),e=O.getOptions(arguments),i=[];return this._hitTest(t,l.set({all:i},e)),i}function i(t,e,i,n){var s=this._children;if(s)for(var r=s.length-1;r>=0;r--){var a=s[r],o=a!==n&&a._hitTest(t,e,i);if(o&&!e.all)return o}return null}return S.inject({hitTest:t,hitTestAll:e,_hitTest:i}),{hitTest:t,hitTestAll:e,_hitTestChildren:i}},{_hitTest:function(t,e,i){if(this._locked||!this._visible||this._guide&&!e.guides||this.isEmpty())return null;var n=this._matrix,s=i?i.appended(n):this.getGlobalMatrix().prepend(this.getView()._matrix),r=Math.max(e.tolerance,1e-12),a=e._tolerancePadding=new x(D._getStrokePadding(r,n._shiftless().invert()));if(!(t=n._inverseTransform(t))||!this._children&&!this.getBounds({internal:!0,stroke:!0,handle:!0}).expand(a.multiply(2))._containsPoint(t))return null;var o,h,c=!(e.guides&&!this._guide||e.selected&&!this.isSelected()||e.type&&e.type!==l.hyphenate(this._class)||e.class&&!(this instanceof e.class)),u=e.match,p=this;function d(t){return t&&u&&!u(t)&&(t=null),t&&e.all&&e.all.push(t),t}function f(e,i){var n=i?o["get"+i]():p.getPosition();if(t.subtract(n).divide(a).length<=1)return new O(e,p,{name:i?l.hyphenate(i):e,point:n})}var g=e.position,_=e.center,v=e.bounds;if(c&&this._parent&&(g||_||v)){if((_||v)&&(o=this.getInternalBounds()),!(h=g&&f("position")||_&&f("center","Center"))&&v)for(var m=["TopLeft","TopRight","BottomLeft","BottomRight","LeftCenter","TopCenter","RightCenter","BottomCenter"],y=0;y<8&&!h;y++)h=f("bounds",m[y]);h=d(h)}return h||(h=this._hitTestChildren(t,e,s)||c&&d(this._hitTestSelf(t,e,s,this.getStrokeScaling()?null:s._shiftless().invert()))||null),h&&h.point&&(h.point=n.transform(h.point)),h},_hitTestSelf:function(t,e){if(e.fill&&this.hasFill()&&this._contains(t))return new O("fill",this)},matches:function(t,e){var i=typeof t;if("object"===i){for(var n in t)if(t.hasOwnProperty(n)&&!this.matches(n,t[n]))return!1;return!0}if("function"===i)return t(this);if("match"===t)return e(this);var s=/^(empty|editable)$/.test(t)?this["is"+l.capitalize(t)]():"type"===t?l.hyphenate(this._class):this[t];if("class"===t){if("function"==typeof e)return this instanceof e;s=this._class}if("function"==typeof e)return!!e(s);if(e){if(e.test)return e.test(s);if(l.isPlainObject(e))return function t(e,i){for(var n in e)if(e.hasOwnProperty(n)){var s=e[n],r=i[n];if(l.isPlainObject(s)&&l.isPlainObject(r)){if(!t(s,r))return!1}else if(!l.equals(s,r))return!1}return!0}(e,s)}return l.equals(s,e)},getItems:function(t){return I._getItems(this,t,this._matrix)},getItem:function(t){return I._getItems(this,t,this._matrix,null,!0)[0]||null},statics:{_getItems:function t(e,i,n,s,r){if(!s){var a="object"==typeof i&&i,o=a&&a.overlapping,h=a&&a.inside,c=(m=o||h)&&w.read([m]);s={items:[],recursive:a&&!1!==a.recursive,inside:!!h,overlapping:!!o,rect:c,path:o&&new D.Rectangle({rectangle:c,insert:!1})},a&&(i=l.filter({},i,{recursive:!0,inside:!0,overlapping:!0}))}var u=e._children,p=s.items;n=(c=s.rect)&&(n||new k);for(var d=0,f=u&&u.length;d<f;d++){var g=u[d],_=n&&n.appended(g._matrix),v=!0;if(c){var m=g.getBounds(_);if(!c.intersects(m))continue;c.contains(m)||s.overlapping&&(m.contains(c)||s.path.intersects(g,_))||(v=!1)}if(v&&g.matches(i)&&(p.push(g),r))break;if(!1!==s.recursive&&t(g,i,_,s,r),r&&p.length>0)break}return p}}},{importJSON:function(t){var e=l.importJSON(t,this);return e!==this?this.addChild(e):e},addChild:function(t){return this.insertChild(o,t)},insertChild:function(t,e){var i=e?this.insertChildren(t,[e]):null;return i&&i[0]},addChildren:function(t){return this.insertChildren(this._children.length,t)},insertChildren:function(t,e){var i=this._children;if(i&&e&&e.length>0){for(var n={},s=(e=l.slice(e)).length-1;s>=0;s--){var r=(c=e[s])&&c._id;!c||n[r]?e.splice(s,1):(c._remove(!1,!0),n[r]=!0)}l.splice(i,e,t,0);for(var a=this._project,o=a._changes,h=(s=0,e.length);s<h;s++){var c,u=(c=e[s])._name;c._parent=this,c._setProject(a,!0),u&&c.setName(u),o&&c._changed(5)}this._changed(11)}else e=null;return e},_insertItem:"#insertChild",_insertAt:function(t,e){var i=t&&t._getOwner(),n=t!==this&&i?this:null;return n&&(n._remove(!1,!0),i._insertItem(t._index+e,n)),n},insertAbove:function(t){return this._insertAt(t,1)},insertBelow:function(t){return this._insertAt(t,0)},sendToBack:function(){var t=this._getOwner();return t?t._insertItem(0,this):null},bringToFront:function(){var t=this._getOwner();return t?t._insertItem(o,this):null},appendTop:"#addChild",appendBottom:function(t){return this.insertChild(0,t)},moveAbove:"#insertAbove",moveBelow:"#insertBelow",addTo:function(t){return t._insertItem(o,this)},copyTo:function(t){return this.clone(!1).addTo(t)},reduce:function(t){var e=this._children;if(e&&1===e.length){var i=e[0].reduce(t);return this._parent?(i.insertAbove(this),this.remove()):i.remove(),i}return this},_removeNamed:function(){var t=this._getOwner();if(t){var e=t._children,i=t._namedChildren,n=this._name,s=i[n],r=s?s.indexOf(this):-1;-1!==r&&(e[n]==this&&delete e[n],s.splice(r,1),s.length?e[n]=s[0]:delete i[n])}},_remove:function(t,e){var i=this._getOwner(),n=this._project,s=this._index;return this._style&&this._style._dispose(),!!i&&(this._name&&this._removeNamed(),null!=s&&(n._activeLayer===this&&(n._activeLayer=this.getNextSibling()||this.getPreviousSibling()),l.splice(i._children,null,s,1)),this._installEvents(!1),t&&n._changes&&this._changed(5),e&&i._changed(11,this),this._parent=null,!0)},remove:function(){return this._remove(!0,!0)},replaceWith:function(t){var e=t&&t.insertBelow(this);return e&&this.remove(),e},removeChildren:function(t,e){if(!this._children)return null;t=t||0,e=l.pick(e,this._children.length);for(var i=l.splice(this._children,null,t,e-t),n=i.length-1;n>=0;n--)i[n]._remove(!0,!1);return i.length>0&&this._changed(11),i},clear:"#removeChildren",reverseChildren:function(){if(this._children){this._children.reverse();for(var t=0,e=this._children.length;t<e;t++)this._children[t]._index=t;this._changed(11)}},isEmpty:function(t){var e=this._children,i=e?e.length:0;if(t){for(var n=0;n<i;n++)if(!e[n].isEmpty(t))return!1;return!0}return!i},isEditable:function(){for(var t=this;t;){if(!t._visible||t._locked)return!1;t=t._parent}return!0},hasFill:function(){return this.getStyle().hasFill()},hasStroke:function(){return this.getStyle().hasStroke()},hasShadow:function(){return this.getStyle().hasShadow()},_getOrder:function(t){function e(t){var e=[];do{e.unshift(t)}while(t=t._parent);return e}for(var i=e(this),n=e(t),s=0,r=Math.min(i.length,n.length);s<r;s++)if(i[s]!=n[s])return i[s]._index<n[s]._index?1:-1;return 0},hasChildren:function(){return this._children&&this._children.length>0},isInserted:function(){return!!this._parent&&this._parent.isInserted()},isAbove:function(t){return-1===this._getOrder(t)},isBelow:function(t){return 1===this._getOrder(t)},isParent:function(t){return this._parent===t},isChild:function(t){return t&&t._parent===this},isDescendant:function(t){for(var e=this;e=e._parent;)if(e===t)return!0;return!1},isAncestor:function(t){return!!t&&t.isDescendant(this)},isSibling:function(t){return this._parent===t._parent},isGroupedWith:function(t){for(var e=this._parent;e;){if(e._parent&&/^(Group|Layer|CompoundPath)$/.test(e._class)&&t.isDescendant(e))return!0;e=e._parent}return!1}},l.each(["rotate","scale","shear","skew"],(function(t){var e="rotate"===t;this[t]=function(){var i=(e?l:v).read(arguments),n=v.read(arguments,0,{readNull:!0});return this.transform((new k)[t](i,n||this.getPosition(!0)))}}),{translate:function(){var t=new k;return this.transform(t.translate.apply(t,arguments))},transform:function(t,e,i,n){var s=this._matrix,r=t&&!t.isIdentity(),a=(e||this._applyMatrix)&&(!s.isIdentity()||r||e&&i&&this._children);if(!r&&!a)return this;if(r){!t.isInvertible()&&s.isInvertible()&&(s._backup=s.getValues()),s.prepend(t,!0);var o=this._style,h=o.getFillColor(!0),c=o.getStrokeColor(!0);h&&h.transform(t),c&&c.transform(t)}if(a&&(a=this._transformContent(s,i,n))){var l=this._pivot;l&&s._transformPoint(l,l,!0),s.reset(!0),n&&this._canApplyMatrix&&(this._applyMatrix=!0)}var u=this._bounds,p=this._position;(r||a)&&this._changed(25);var d=r&&u&&t.decompose();if(d&&d.skewing.isZero()&&d.rotation%90==0){for(var f in u){var g=u[f];if(g.nonscaling)delete u[f];else if(a||!g.internal){var _=g.rect;t._transformBounds(_,_)}}this._bounds=u;var v=u[this._getBoundsCacheKey(this._boundsOptions||{})];v&&(this._position=this._getPositionFromBounds(v.rect))}else r&&p&&this._pivot&&(this._position=t._transformPoint(p,p));return this},_transformContent:function(t,e,i){var n=this._children;if(n){for(var s=0,r=n.length;s<r;s++)n[s].transform(t,!0,e,i);return!0}},globalToLocal:function(){return this.getGlobalMatrix(!0)._inverseTransform(v.read(arguments))},localToGlobal:function(){return this.getGlobalMatrix(!0)._transformPoint(v.read(arguments))},parentToLocal:function(){return this._matrix._inverseTransform(v.read(arguments))},localToParent:function(){return this._matrix._transformPoint(v.read(arguments))},fitBounds:function(t,e){t=w.read(arguments);var i=this.getBounds(),n=i.height/i.width,s=t.height/t.width,r=(e?n>s:n<s)?t.width/i.width:t.height/i.height,a=new w(new v,new x(i.width*r,i.height*r));a.setCenter(t.getCenter()),this.setBounds(a)}}),{_setStyles:function(t,e,i){var n=this._style,s=this._matrix;if(n.hasFill()&&(t.fillStyle=n.getFillColor().toCanvasStyle(t,s)),n.hasStroke()){t.strokeStyle=n.getStrokeColor().toCanvasStyle(t,s),t.lineWidth=n.getStrokeWidth();var r=n.getStrokeJoin(),a=n.getStrokeCap(),o=n.getMiterLimit();if(r&&(t.lineJoin=r),a&&(t.lineCap=a),o&&(t.miterLimit=o),ut.support.nativeDash){var h=n.getDashArray(),c=n.getDashOffset();h&&h.length&&("setLineDash"in t?(t.setLineDash(h),t.lineDashOffset=c):(t.mozDash=h,t.mozDashOffset=c))}}if(n.hasShadow()){var l=e.pixelRatio||1,u=i._shiftless().prepend((new k).scale(l,l)),p=u.transform(new v(n.getShadowBlur(),0)),d=u.transform(this.getShadowOffset());t.shadowColor=n.getShadowColor().toCanvasStyle(t),t.shadowBlur=p.getLength(),t.shadowOffsetX=d.x,t.shadowOffsetY=d.y}},draw:function(t,e,i){this._updateVersion=this._project._updateVersion;if(this._visible&&0!==this._opacity){var n=e.matrices,s=e.viewMatrix,r=this._matrix,a=n[n.length-1].appended(r);if(a.isInvertible()){s=s?s.appended(a):a,n.push(a),e.updateMatrix&&(this._globalMatrix=a);var o,h,c,l=this._blendMode,u=this._opacity,p="normal"===l,d=ht.nativeModes[l],f=p&&1===u||e.dontStart||e.clip||(d||p&&u<1)&&this._canComposite(),g=e.pixelRatio||1;if(!f){var _=this.getStrokeBounds(s);if(!_.width||!_.height)return void n.pop();c=e.offset,h=e.offset=_.getTopLeft().floor(),o=t,t=ot.getContext(_.getSize().ceil().add(1).multiply(g)),1!==g&&t.scale(g,g)}t.save();var v=i?i.appended(r):this._canScaleStroke&&!this.getStrokeScaling(!0)&&s,m=!f&&e.clipItem,x=!v||m;if(f?(t.globalAlpha=u,d&&(t.globalCompositeOperation=l)):x&&t.translate(-h.x,-h.y),x&&(f?r:s).applyToContext(t),m&&e.clipItem.draw(t,e.extend({clip:!0})),v){t.setTransform(g,0,0,g,0,0);var y=e.offset;y&&t.translate(-y.x,-y.y)}this._draw(t,e,s,v),t.restore(),n.pop(),e.clip&&!e.dontFinish&&t.clip(this.getFillRule()),f||(ht.process(l,t,o,u,h.subtract(c).multiply(g)),ot.release(t),e.offset=c)}}},_isUpdated:function(t){var e=this._parent;if(e instanceof F)return e._isUpdated(t);var i=this._updateVersion===t;return!i&&e&&e._visible&&e._isUpdated(t)&&(this._updateVersion=t,i=!0),i},_drawSelection:function(t,e,i,n,s){var r=this._selection,a=1&r,o=2&r||a&&this._selectBounds,h=4&r;if(this._drawSelected||(a=!1),(a||o||h)&&this._isUpdated(s)){var c,l=this.getSelectedColor(!0)||(c=this.getLayer())&&c.getSelectedColor(!0),u=e.appended(this.getGlobalMatrix(!0)),p=i/2;if(t.strokeStyle=t.fillStyle=l?l.toCanvasStyle(t):"#009dec",a&&this._drawSelected(t,u,n),h){var d=this.getPosition(!0),f=this._parent,g=f?f.localToGlobal(d):d,_=g.x,v=g.y;t.beginPath(),t.arc(_,v,p,0,2*Math.PI,!0),t.stroke();for(var m=[[0,-1],[1,0],[0,1],[-1,0]],x=p,y=i+1,w=0;w<4;w++){var b=m[w],k=b[0],C=b[1];t.moveTo(_+k*x,v+C*x),t.lineTo(_+k*y,v+C*y),t.stroke()}}if(o){var S=u._transformCorners(this.getInternalBounds());t.beginPath();for(w=0;w<8;w++)t[w?"lineTo":"moveTo"](S[w],S[++w]);t.closePath(),t.stroke();for(w=0;w<8;w++)t.fillRect(S[w]-p,S[++w]-p,i,i)}}},_canComposite:function(){return!1}},l.each(["down","drag","up","move"],(function(t){this["removeOn"+l.capitalize(t)]=function(){var e={};return e[t]=!0,this.removeOn(e)}}),{removeOn:function(t){for(var e in t)if(t[e]){var i="mouse"+e,n=this._project,s=n._removeSets=n._removeSets||{};s[i]=s[i]||{},s[i][this._id]=this}return this}}),{tween:function(t,e,i){i||(i=e,e=t,t=null,i||(i=e,e=null));var n=i&&i.easing,s=i&&i.start,r=null!=i&&("number"==typeof i?i:i.duration),a=new rt(this,t,e,r,n,s);return r&&this.on("frame",(function t(e){a._handleFrame(1e3*e.time),a.running||this.off("frame",t)})),a},tweenTo:function(t,e){return this.tween(null,t,e)},tweenFrom:function(t,e){return this.tween(t,null,e)}}),A=I.extend({_class:"Group",_selectBounds:!1,_selectChildren:!0,_serializeFields:{children:[]},initialize:function(t){this._children=[],this._namedChildren={},this._initialize(t)||this.addChildren(Array.isArray(t)?t:arguments)},_changed:function t(e){t.base.call(this,e),2050&e&&(this._clipItem=o)},_getClipItem:function(){var t=this._clipItem;if(t===o){t=null;for(var e=this._children,i=0,n=e.length;i<n;i++)if(e[i]._clipMask){t=e[i];break}this._clipItem=t}return t},isClipped:function(){return!!this._getClipItem()},setClipped:function(t){var e=this.getFirstChild();e&&e.setClipMask(t)},_getBounds:function t(e,i){var n=this._getClipItem();return n?n._getCachedBounds(n._matrix.prepended(e),l.set({},i,{stroke:!1})):t.base.call(this,e,i)},_hitTestChildren:function t(e,i,n){var s=this._getClipItem();return(!s||s.contains(e))&&t.base.call(this,e,i,n,s)},_draw:function(t,e){var i=e.clip,n=!i&&this._getClipItem();e=e.extend({clipItem:n,clip:!1}),i?(t.beginPath(),e.dontStart=e.dontFinish=!0):n&&n.draw(t,e.extend({clip:!0}));for(var s=this._children,r=0,a=s.length;r<a;r++){var o=s[r];o!==n&&o.draw(t,e)}}}),P=A.extend({_class:"Layer",initialize:function(){A.apply(this,arguments)},_getOwner:function(){return this._parent||null!=this._index&&this._project},isInserted:function t(){return this._parent?t.base.call(this):null!=this._index},activate:function(){this._project._activeLayer=this},_hitTestSelf:function(){}}),T=I.extend({_class:"Shape",_applyMatrix:!1,_canApplyMatrix:!1,_canScaleStroke:!0,_serializeFields:{type:null,size:null,radius:null},initialize:function(t,e){this._initialize(t,e)},_equals:function(t){return this._type===t._type&&this._size.equals(t._size)&&l.equals(this._radius,t._radius)},copyContent:function(t){this.setType(t._type),this.setSize(t._size),this.setRadius(t._radius)},getType:function(){return this._type},setType:function(t){this._type=t},getShape:"#getType",setShape:"#setType",getSize:function(){var t=this._size;return new y(t.width,t.height,this,"setSize")},setSize:function(){var t=x.read(arguments);if(this._size){if(!this._size.equals(t)){var e=this._type,i=t.width,n=t.height;"rectangle"===e?this._radius.set(x.min(this._radius,t.divide(2))):"circle"===e?(i=n=(i+n)/2,this._radius=i/2):"ellipse"===e&&this._radius._set(i/2,n/2),this._size._set(i,n),this._changed(9)}}else this._size=t.clone()},getRadius:function(){var t=this._radius;return"circle"===this._type?t:new y(t.width,t.height,this,"setRadius")},setRadius:function(t){var e=this._type;if("circle"===e){if(t===this._radius)return;var i=2*t;this._radius=t,this._size._set(i,i)}else if(t=x.read(arguments),this._radius){if(this._radius.equals(t))return;if(this._radius.set(t),"rectangle"===e){i=x.max(this._size,t.multiply(2));this._size.set(i)}else"ellipse"===e&&this._size._set(2*t.width,2*t.height)}else this._radius=t.clone();this._changed(9)},isEmpty:function(){return!1},toPath:function(t){var e=new(D[l.capitalize(this._type)])({center:new v,size:this._size,radius:this._radius,insert:!1});return e.copyAttributes(this),ut.settings.applyMatrix&&e.setApplyMatrix(!0),(t===o||t)&&e.insertAbove(this),e},toShape:"#clone",_asPathItem:function(){return this.toPath(!1)},_draw:function(t,e,i,n){var s=this._style,r=s.hasFill(),a=s.hasStroke(),o=e.dontFinish||e.clip,h=!n;if(r||a||o){var c=this._type,l=this._radius,u="circle"===c;if(e.dontStart||t.beginPath(),h&&u)t.arc(0,0,l,0,2*Math.PI,!0);else{var p=u?l:l.width,d=u?l:l.height,f=this._size,g=f.width,_=f.height;if(h&&"rectangle"===c&&0===p&&0===d)t.rect(-g/2,-_/2,g,_);else{var v=g/2,m=_/2,x=.44771525016920644,y=p*x,w=d*x,b=[-v,-m+d,-v,-m+w,-v+y,-m,-v+p,-m,v-p,-m,v-y,-m,v,-m+w,v,-m+d,v,m-d,v,m-w,v-y,m,v-p,m,-v+p,m,-v+y,m,-v,m-w,-v,m-d];n&&n.transform(b,b,32),t.moveTo(b[0],b[1]),t.bezierCurveTo(b[2],b[3],b[4],b[5],b[6],b[7]),v!==p&&t.lineTo(b[8],b[9]),t.bezierCurveTo(b[10],b[11],b[12],b[13],b[14],b[15]),m!==d&&t.lineTo(b[16],b[17]),t.bezierCurveTo(b[18],b[19],b[20],b[21],b[22],b[23]),v!==p&&t.lineTo(b[24],b[25]),t.bezierCurveTo(b[26],b[27],b[28],b[29],b[30],b[31])}}t.closePath()}o||!r&&!a||(this._setStyles(t,e,i),r&&(t.fill(s.getFillRule()),t.shadowColor="rgba(0,0,0,0)"),a&&t.stroke())},_canComposite:function(){return!(this.hasFill()&&this.hasStroke())},_getBounds:function(t,e){var i=new w(this._size).setCenter(0,0),n=this._style,s=e.stroke&&n.hasStroke()&&n.getStrokeWidth();return t&&(i=t._transformBounds(i)),s?i.expand(D._getStrokePadding(s,this._getStrokeMatrix(t,e))):i}},new function(){function t(t,e,i){var n=t._radius;if(!n.isZero())for(var s=t._size.divide(2),r=1;r<=4;r++){var a=new v(r>1&&r<4?-1:1,r>2?-1:1),o=a.multiply(s),h=o.subtract(a.multiply(n));if(new w(i?o.add(a.multiply(i)):o,h).contains(e))return{point:h,quadrant:r}}}function e(t,e,i,n){var s=t.divide(e);return(!n||s.isInQuadrant(n))&&s.subtract(s.normalize()).multiply(e).divide(i).length<=1}return{_contains:function e(i){if("rectangle"===this._type){var n=t(this,i);return n?i.subtract(n.point).divide(this._radius).getLength()<=1:e.base.call(this,i)}return i.divide(this.size).getLength()<=.5},_hitTestSelf:function i(n,s,r,a){var o=!1,h=this._style,c=s.stroke&&h.hasStroke(),l=s.fill&&h.hasFill();if(c||l){var u=this._type,p=this._radius,d=c?h.getStrokeWidth()/2:0,f=s._tolerancePadding.add(D._getStrokePadding(d,!h.getStrokeScaling()&&a));if("rectangle"===u){var g=f.multiply(2),_=t(this,n,g);if(_)o=e(n.subtract(_.point),p,f,_.quadrant);else{var v=new w(this._size).setCenter(0,0),m=v.expand(g),x=v.expand(g.negate());o=m._containsPoint(n)&&!x._containsPoint(n)}}else o=e(n,p,f)}return o?new O(c?"stroke":"fill",this):i.base.apply(this,arguments)}}},{statics:new function(){function t(t,e,i,n,s){var r=new T(l.getNamed(s),e);return r._type=t,r._size=i,r._radius=n,r}return{Circle:function(){var e=v.readNamed(arguments,"center"),i=l.readNamed(arguments,"radius");return t("circle",e,new x(2*i),i,arguments)},Rectangle:function(){var e=w.readNamed(arguments,"rectangle"),i=x.min(x.readNamed(arguments,"radius"),e.getSize(!0).divide(2));return t("rectangle",e.getCenter(!0),e.getSize(!0),i,arguments)},Ellipse:function(){var e=T._readEllipse(arguments),i=e.radius;return t("ellipse",e.center,i.multiply(2),i,arguments)},_readEllipse:function(t){var e,i;if(l.hasNamed(t,"radius"))e=v.readNamed(t,"center"),i=x.readNamed(t,"radius");else{var n=w.readNamed(t,"rectangle");e=n.getCenter(!0),i=n.getSize(!0).divide(2)}return{center:e,radius:i}}}}}),E=I.extend({},{_class:"Raster",_applyMatrix:!1,_canApplyMatrix:!1,_boundsOptions:{stroke:!1,handle:!1},_serializeFields:{crossOrigin:null,source:null},_prioritize:["crossOrigin"],_smoothing:!0,beans:!0,initialize:function(t,e){if(!this._initialize(t,e!==o&&v.read(arguments))){var i,n=typeof t,s="string"===n?c.getElementById(t):"object"===n?t:null;if(s&&s!==I.NO_INSERT)if(s.getContent||null!=s.naturalHeight)i=s;else if(s){var r=x.read(arguments);r.isZero()||(i=ot.getCanvas(r))}i?this.setImage(i):this.setSource(t)}this._size||(this._size=new x,this._loaded=!1)},_equals:function(t){return this.getSource()===t.getSource()},copyContent:function(t){var e=t._image,i=t._canvas;if(e)this._setImage(e);else if(i){var n=ot.getCanvas(t._size);n.getContext("2d").drawImage(i,0,0),this._setImage(n)}this._crossOrigin=t._crossOrigin},getSize:function(){var t=this._size;return new y(t?t.width:0,t?t.height:0,this,"setSize")},setSize:function(){var t=x.read(arguments);if(!t.equals(this._size))if(t.width>0&&t.height>0){var e=this.getElement();this._setImage(ot.getCanvas(t)),e&&this.getContext(!0).drawImage(e,0,0,t.width,t.height)}else this._canvas&&ot.release(this._canvas),this._size=t.clone()},getWidth:function(){return this._size?this._size.width:0},setWidth:function(t){this.setSize(t,this.getHeight())},getHeight:function(){return this._size?this._size.height:0},setHeight:function(t){this.setSize(this.getWidth(),t)},getLoaded:function(){return this._loaded},isEmpty:function(){var t=this._size;return!t||0===t.width&&0===t.height},getResolution:function(){var t=this._matrix,e=new v(0,0).transform(t),i=new v(1,0).transform(t).subtract(e),n=new v(0,1).transform(t).subtract(e);return new x(72/i.getLength(),72/n.getLength())},getPpi:"#getResolution",getImage:function(){return this._image},setImage:function(t){var e=this;function i(t){var i=e.getView(),n=t&&t.type||"load";i&&e.responds(n)&&(ut=i._scope,e.emit(n,new J(t)))}this._setImage(t),this._loaded?setTimeout(i,0):t&&K.add(t,{load:function(n){e._setImage(t),i(n)},error:i})},_setImage:function(t){this._canvas&&ot.release(this._canvas),t&&t.getContext?(this._image=null,this._canvas=t,this._loaded=!0):(this._image=t,this._canvas=null,this._loaded=!!(t&&t.src&&t.complete)),this._size=new x(t?t.naturalWidth||t.width:0,t?t.naturalHeight||t.height:0),this._context=null,this._changed(1033)},getCanvas:function(){if(!this._canvas){var t=ot.getContext(this._size);try{this._image&&t.drawImage(this._image,0,0),this._canvas=t.canvas}catch(e){ot.release(t)}}return this._canvas},setCanvas:"#setImage",getContext:function(t){return this._context||(this._context=this.getCanvas().getContext("2d")),t&&(this._image=null,this._changed(1025)),this._context},setContext:function(t){this._context=t},getSource:function(){var t=this._image;return t&&t.src||this.toDataURL()},setSource:function(t){var e=new a.Image,i=this._crossOrigin;i&&(e.crossOrigin=i),t&&(e.src=t),this.setImage(e)},getCrossOrigin:function(){var t=this._image;return t&&t.crossOrigin||this._crossOrigin||""},setCrossOrigin:function(t){this._crossOrigin=t;var e=this._image;e&&(e.crossOrigin=t)},getSmoothing:function(){return this._smoothing},setSmoothing:function(t){this._smoothing=t,this._changed(257)},getElement:function(){return this._canvas||this._loaded&&this._image}},{beans:!1,getSubCanvas:function(){var t=w.read(arguments),e=ot.getContext(t.getSize());return e.drawImage(this.getCanvas(),t.x,t.y,t.width,t.height,0,0,t.width,t.height),e.canvas},getSubRaster:function(){var t=w.read(arguments),e=new E(I.NO_INSERT);return e._setImage(this.getSubCanvas(t)),e.translate(t.getCenter().subtract(this.getSize().divide(2))),e._matrix.prepend(this._matrix),e.insertAbove(this),e},toDataURL:function(){var t=this._image,e=t&&t.src;if(/^data:/.test(e))return e;var i=this.getCanvas();return i?i.toDataURL.apply(i,arguments):null},drawImage:function(t){var e=v.read(arguments,1);this.getContext(!0).drawImage(t,e.x,e.y)},getAverageColor:function(t){var e,i;if(t?t instanceof B?(i=t,e=t.getBounds()):"object"==typeof t&&("width"in t?e=new w(t):"x"in t&&(e=new w(t.x-.5,t.y-.5,1,1))):e=this.getBounds(),!e)return null;var n=Math.min(e.width,32),s=Math.min(e.height,32),r=E._sampleContext;r?r.clearRect(0,0,33,33):r=E._sampleContext=ot.getContext(new x(32)),r.save();var a=(new k).scale(n/e.width,s/e.height).translate(-e.x,-e.y);a.applyToContext(r),i&&i.draw(r,new l({clip:!0,matrices:[a]})),this._matrix.applyToContext(r);var o=this.getElement(),h=this._size;o&&r.drawImage(o,-h.width/2,-h.height/2),r.restore();for(var c=r.getImageData(.5,.5,Math.ceil(n),Math.ceil(s)).data,u=[0,0,0],p=0,d=0,f=c.length;d<f;d+=4){var g=c[d+3];p+=g,g/=255,u[0]+=c[d]*g,u[1]+=c[d+1]*g,u[2]+=c[d+2]*g}for(d=0;d<3;d++)u[d]/=p;return p?W.read(u):null},getPixel:function(){var t=v.read(arguments),e=this.getContext().getImageData(t.x,t.y,1,1).data;return new W("rgb",[e[0]/255,e[1]/255,e[2]/255],e[3]/255)},setPixel:function(){var t=v.read(arguments),e=W.read(arguments),i=e._convert("rgb"),n=e._alpha,s=this.getContext(!0),r=s.createImageData(1,1),a=r.data;a[0]=255*i[0],a[1]=255*i[1],a[2]=255*i[2],a[3]=null!=n?255*n:255,s.putImageData(r,t.x,t.y)},clear:function(){var t=this._size;this.getContext(!0).clearRect(0,0,t.width+1,t.height+1)},createImageData:function(){var t=x.read(arguments);return this.getContext().createImageData(t.width,t.height)},getImageData:function(){var t=w.read(arguments);return t.isEmpty()&&(t=new w(this._size)),this.getContext().getImageData(t.x,t.y,t.width,t.height)},setImageData:function(t){var e=v.read(arguments,1);this.getContext(!0).putImageData(t,e.x,e.y)},_getBounds:function(t,e){var i=new w(this._size).setCenter(0,0);return t?t._transformBounds(i):i},_hitTestSelf:function(t){if(this._contains(t)){var e=this;return new O("pixel",e,{offset:t.add(e._size.divide(2)).round(),color:{get:function(){return e.getPixel(this.offset)}}})}},_draw:function(t,e,i){var n=this.getElement();n&&n.width>0&&n.height>0&&(t.globalAlpha=this._opacity,this._setStyles(t,e,i),Y.setPrefixed(t,"imageSmoothingEnabled",this._smoothing),t.drawImage(n,-this._size.width/2,-this._size.height/2))},_canComposite:function(){return!0}}),L=I.extend({_class:"SymbolItem",_applyMatrix:!1,_canApplyMatrix:!1,_boundsOptions:{stroke:!0},_serializeFields:{symbol:null},initialize:function(t,e){this._initialize(t,e!==o&&v.read(arguments,1))||this.setDefinition(t instanceof M?t:new M(t))},_equals:function(t){return this._definition===t._definition},copyContent:function(t){this.setDefinition(t._definition)},getDefinition:function(){return this._definition},setDefinition:function(t){this._definition=t,this._changed(9)},getSymbol:"#getDefinition",setSymbol:"#setDefinition",isEmpty:function(){return this._definition._item.isEmpty()},_getBounds:function(t,e){var i=this._definition._item;return i._getCachedBounds(i._matrix.prepended(t),e)},_hitTestSelf:function(t,e,i){var n=this._definition._item._hitTest(t,e,i);return n&&(n.item=this),n},_draw:function(t,e){this._definition._item.draw(t,e)}}),M=l.extend({_class:"SymbolDefinition",initialize:function(t,e){this._id=_.get(),this.project=ut.project,t&&this.setItem(t,e)},_serialize:function(t,e){return e.add(this,(function(){return l.serialize([this._class,this._item],t,!1,e)}))},_changed:function(t){8&t&&I._clearBoundsCache(this),1&t&&this.project._changed(t)},getItem:function(){return this._item},setItem:function(t,e){t._symbol&&(t=t.clone()),this._item&&(this._item._symbol=null),this._item=t,t.remove(),t.setSelected(!1),e||t.setPosition(new v),t._symbol=this,this._changed(9)},getDefinition:"#getItem",setDefinition:"#setItem",place:function(t){return new L(this,t)},clone:function(){return new M(this._item.clone(!1))},equals:function(t){return t===this||t&&this._item.equals(t._item)||!1}}),O=l.extend({_class:"HitResult",initialize:function(t,e,i){this.type=t,this.item=e,i&&this.inject(i)},statics:{getOptions:function(t){var e=t&&l.read(t);return l.set({type:null,tolerance:ut.settings.hitTolerance,fill:!e,stroke:!e,segments:!e,handles:!1,ends:!1,position:!1,center:!1,bounds:!1,guides:!1,selected:!1},e)}}}),N=l.extend({_class:"Segment",beans:!0,_selection:0,initialize:function(t,e,i,n,s,r){var a,h,c,l,u=arguments.length;u>0&&(null==t||"object"==typeof t?1===u&&t&&"point"in t?(a=t.point,h=t.handleIn,c=t.handleOut,l=t.selection):(a=t,h=e,c=i,l=n):(a=[t,e],h=i!==o?[i,n]:null,c=s!==o?[s,r]:null)),new z(a,this,"_point"),new z(h,this,"_handleIn"),new z(c,this,"_handleOut"),l&&this.setSelection(l)},_serialize:function(t,e){var i=this._point,n=this._selection,s=n||this.hasHandles()?[i,this._handleIn,this._handleOut]:i;return n&&s.push(n),l.serialize(s,t,!0,e)},_changed:function(t){var e=this._path;if(e){var i,n=e._curves,s=this._index;n&&(t&&t!==this._point&&t!==this._handleIn||!(i=s>0?n[s-1]:e._closed?n[n.length-1]:null)||i._changed(),t&&t!==this._point&&t!==this._handleOut||!(i=n[s])||i._changed()),e._changed(41)}},getPoint:function(){return this._point},setPoint:function(){this._point.set(v.read(arguments))},getHandleIn:function(){return this._handleIn},setHandleIn:function(){this._handleIn.set(v.read(arguments))},getHandleOut:function(){return this._handleOut},setHandleOut:function(){this._handleOut.set(v.read(arguments))},hasHandles:function(){return!this._handleIn.isZero()||!this._handleOut.isZero()},isSmooth:function(){var t=this._handleIn,e=this._handleOut;return!t.isZero()&&!e.isZero()&&t.isCollinear(e)},clearHandles:function(){this._handleIn._set(0,0),this._handleOut._set(0,0)},getSelection:function(){return this._selection},setSelection:function(t){var e=this._selection,i=this._path;this._selection=t=t||0,i&&t!==e&&(i._updateSelection(this,e,t),i._changed(257))},_changeSelection:function(t,e){var i=this._selection;this.setSelection(e?i|t:i&~t)},isSelected:function(){return!!(7&this._selection)},setSelected:function(t){this._changeSelection(7,t)},getIndex:function(){return this._index!==o?this._index:null},getPath:function(){return this._path||null},getCurve:function(){var t=this._path,e=this._index;return t?(e>0&&!t._closed&&e===t._segments.length-1&&e--,t.getCurves()[e]||null):null},getLocation:function(){var t=this.getCurve();return t?new V(t,this===t._segment1?0:1):null},getNext:function(){var t=this._path&&this._path._segments;return t&&(t[this._index+1]||this._path._closed&&t[0])||null},smooth:function(t,e,i){var n=t||{},s=n.type,r=n.factor,a=this.getPrevious(),h=this.getNext(),c=(a||this)._point,l=this._point,u=(h||this)._point,p=c.getDistance(l),d=l.getDistance(u);if(s&&"catmull-rom"!==s){if("geometric"!==s)throw new Error("Smoothing method '"+s+"' not supported.");if(a&&h){var f=c.subtract(u),g=r===o?.4:r,_=g*p/(p+d);e||this.setHandleIn(f.multiply(_)),i||this.setHandleOut(f.multiply(_-g))}}else{var m=r===o?.5:r,x=Math.pow(p,m),y=x*x,w=Math.pow(d,m),b=w*w;if(!e&&a){var k=2*b+3*w*x+y,C=3*w*(w+x);this.setHandleIn(0!==C?new v((b*c._x+k*l._x-y*u._x)/C-l._x,(b*c._y+k*l._y-y*u._y)/C-l._y):new v)}if(!i&&h){k=2*y+3*x*w+b,C=3*x*(x+w);this.setHandleOut(0!==C?new v((y*u._x+k*l._x-b*c._x)/C-l._x,(y*u._y+k*l._y-b*c._y)/C-l._y):new v)}}},getPrevious:function(){var t=this._path&&this._path._segments;return t&&(t[this._index-1]||this._path._closed&&t[t.length-1])||null},isFirst:function(){return!this._index},isLast:function(){var t=this._path;return t&&this._index===t._segments.length-1||!1},reverse:function(){var t=this._handleIn,e=this._handleOut,i=t.clone();t.set(e),e.set(i)},reversed:function(){return new N(this._point,this._handleOut,this._handleIn)},remove:function(){return!!this._path&&!!this._path.removeSegment(this._index)},clone:function(){return new N(this._point,this._handleIn,this._handleOut)},equals:function(t){return t===this||t&&this._class===t._class&&this._point.equals(t._point)&&this._handleIn.equals(t._handleIn)&&this._handleOut.equals(t._handleOut)||!1},toString:function(){var t=["point: "+this._point];return this._handleIn.isZero()||t.push("handleIn: "+this._handleIn),this._handleOut.isZero()||t.push("handleOut: "+this._handleOut),"{ "+t.join(", ")+" }"},transform:function(t){this._transformCoordinates(t,new Array(6),!0),this._changed()},interpolate:function(t,e,i){var n=1-i,s=i,r=t._point,a=e._point,o=t._handleIn,h=e._handleIn,c=e._handleOut,l=t._handleOut;this._point._set(n*r._x+s*a._x,n*r._y+s*a._y,!0),this._handleIn._set(n*o._x+s*h._x,n*o._y+s*h._y,!0),this._handleOut._set(n*l._x+s*c._x,n*l._y+s*c._y,!0),this._changed()},_transformCoordinates:function(t,e,i){var n=this._point,s=i&&this._handleIn.isZero()?null:this._handleIn,r=i&&this._handleOut.isZero()?null:this._handleOut,a=n._x,o=n._y,h=2;return e[0]=a,e[1]=o,s&&(e[h++]=s._x+a,e[h++]=s._y+o),r&&(e[h++]=r._x+a,e[h++]=r._y+o),t&&(t._transformCoordinates(e,e,h/2),a=e[0],o=e[1],i?(n._x=a,n._y=o,h=2,s&&(s._x=e[h++]-a,s._y=e[h++]-o),r&&(r._x=e[h++]-a,r._y=e[h++]-o)):(s||(e[h++]=a,e[h++]=o),r||(e[h++]=a,e[h++]=o))),e}}),z=v.extend({initialize:function(t,e,i){var n,s,r;if(t)if((n=t[0])!==o)s=t[1];else{var a=t;(n=a.x)===o&&(n=(a=v.read(arguments)).x),s=a.y,r=a.selected}else n=s=0;this._x=n,this._y=s,this._owner=e,e[i]=this,r&&this.setSelected(!0)},_set:function(t,e){return this._x=t,this._y=e,this._owner._changed(this),this},getX:function(){return this._x},setX:function(t){this._x=t,this._owner._changed(this)},getY:function(){return this._y},setY:function(t){this._y=t,this._owner._changed(this)},isZero:function(){var t=g.isZero;return t(this._x)&&t(this._y)},isSelected:function(){return!!(this._owner._selection&this._getSelection())},setSelected:function(t){this._owner._changeSelection(this._getSelection(),t)},_getSelection:function(){var t=this._owner;return this===t._point?1:this===t._handleIn?2:this===t._handleOut?4:0}}),R=l.extend({_class:"Curve",beans:!0,initialize:function(t,e,i,n,s,r,a,o){var h,c,l,u,p,d,f=arguments.length;3===f?(this._path=t,h=e,c=i):f?1===f?"segment1"in t?(h=new N(t.segment1),c=new N(t.segment2)):"point1"in t?(l=t.point1,p=t.handle1,d=t.handle2,u=t.point2):Array.isArray(t)&&(l=[t[0],t[1]],u=[t[6],t[7]],p=[t[2]-t[0],t[3]-t[1]],d=[t[4]-t[6],t[5]-t[7]]):2===f?(h=new N(t),c=new N(e)):4===f?(l=t,p=e,d=i,u=n):8===f&&(l=[t,e],u=[a,o],p=[i-t,n-e],d=[s-a,r-o]):(h=new N,c=new N),this._segment1=h||new N(l,null,p),this._segment2=c||new N(u,d,null)},_serialize:function(t,e){return l.serialize(this.hasHandles()?[this.getPoint1(),this.getHandle1(),this.getHandle2(),this.getPoint2()]:[this.getPoint1(),this.getPoint2()],t,!0,e)},_changed:function(){this._length=this._bounds=o},clone:function(){return new R(this._segment1,this._segment2)},toString:function(){var t=["point1: "+this._segment1._point];return this._segment1._handleOut.isZero()||t.push("handle1: "+this._segment1._handleOut),this._segment2._handleIn.isZero()||t.push("handle2: "+this._segment2._handleIn),t.push("point2: "+this._segment2._point),"{ "+t.join(", ")+" }"},classify:function(){return R.classify(this.getValues())},remove:function(){var t=!1;if(this._path){var e=this._segment2,i=e._handleOut;(t=e.remove())&&this._segment1._handleOut.set(i)}return t},getPoint1:function(){return this._segment1._point},setPoint1:function(){this._segment1._point.set(v.read(arguments))},getPoint2:function(){return this._segment2._point},setPoint2:function(){this._segment2._point.set(v.read(arguments))},getHandle1:function(){return this._segment1._handleOut},setHandle1:function(){this._segment1._handleOut.set(v.read(arguments))},getHandle2:function(){return this._segment2._handleIn},setHandle2:function(){this._segment2._handleIn.set(v.read(arguments))},getSegment1:function(){return this._segment1},getSegment2:function(){return this._segment2},getPath:function(){return this._path},getIndex:function(){return this._segment1._index},getNext:function(){var t=this._path&&this._path._curves;return t&&(t[this._segment1._index+1]||this._path._closed&&t[0])||null},getPrevious:function(){var t=this._path&&this._path._curves;return t&&(t[this._segment1._index-1]||this._path._closed&&t[t.length-1])||null},isFirst:function(){return!this._segment1._index},isLast:function(){var t=this._path;return t&&this._segment1._index===t._curves.length-1||!1},isSelected:function(){return this.getPoint1().isSelected()&&this.getHandle1().isSelected()&&this.getHandle2().isSelected()&&this.getPoint2().isSelected()},setSelected:function(t){this.getPoint1().setSelected(t),this.getHandle1().setSelected(t),this.getHandle2().setSelected(t),this.getPoint2().setSelected(t)},getValues:function(t){return R.getValues(this._segment1,this._segment2,t)},getPoints:function(){for(var t=this.getValues(),e=[],i=0;i<8;i+=2)e.push(new v(t[i],t[i+1]));return e}},{getLength:function(){return null==this._length&&(this._length=R.getLength(this.getValues(),0,1)),this._length},getArea:function(){return R.getArea(this.getValues())},getLine:function(){return new C(this._segment1._point,this._segment2._point)},getPart:function(t,e){return new R(R.getPart(this.getValues(),t,e))},getPartLength:function(t,e){return R.getLength(this.getValues(),t,e)},divideAt:function(t){return this.divideAtTime(t&&t.curve===this?t.time:this.getTimeAt(t))},divideAtTime:function(t,e){var i=null;if(t>=1e-8&&t<=1-1e-8){var n=R.subdivide(this.getValues(),t),s=n[0],r=n[1],a=e||this.hasHandles(),o=this._segment1,h=this._segment2,c=this._path;a&&(o._handleOut._set(s[2]-s[0],s[3]-s[1]),h._handleIn._set(r[4]-r[6],r[5]-r[7]));var l=s[6],u=s[7],p=new N(new v(l,u),a&&new v(s[4]-l,s[5]-u),a&&new v(r[2]-l,r[3]-u));c?(c.insert(o._index+1,p),i=this.getNext()):(this._segment2=p,this._changed(),i=new R(p,h))}return i},splitAt:function(t){var e=this._path;return e?e.splitAt(t):null},splitAtTime:function(t){return this.splitAt(this.getLocationAtTime(t))},divide:function(t,e){return this.divideAtTime(t===o?.5:e?t:this.getTimeAt(t))},split:function(t,e){return this.splitAtTime(t===o?.5:e?t:this.getTimeAt(t))},reversed:function(){return new R(this._segment2.reversed(),this._segment1.reversed())},clearHandles:function(){this._segment1._handleOut._set(0,0),this._segment2._handleIn._set(0,0)},statics:{getValues:function(t,e,i,n){var s=t._point,r=t._handleOut,a=e._handleIn,o=e._point,h=s.x,c=s.y,l=o.x,u=o.y,p=n?[h,c,h,c,l,u,l,u]:[h,c,h+r._x,c+r._y,l+a._x,u+a._y,l,u];return i&&i._transformCoordinates(p,p,4),p},subdivide:function(t,e){var i=t[0],n=t[1],s=t[2],r=t[3],a=t[4],h=t[5],c=t[6],l=t[7];e===o&&(e=.5);var u=1-e,p=u*i+e*s,d=u*n+e*r,f=u*s+e*a,g=u*r+e*h,_=u*a+e*c,v=u*h+e*l,m=u*p+e*f,x=u*d+e*g,y=u*f+e*_,w=u*g+e*v,b=u*m+e*y,k=u*x+e*w;return[[i,n,p,d,m,x,b,k],[b,k,y,w,_,v,c,l]]},getMonoCurves:function(t,e){var i=[],n=e?0:1,s=t[n+0],r=t[n+2],a=t[n+4],o=t[n+6];if(s>=r==r>=a&&r>=a==a>=o||R.isStraight(t))i.push(t);else{var h=3*(r-a)-s+o,c=2*(s+a)-4*r,l=r-s,u=[],p=g.solveQuadratic(h,c,l,u,1e-8,1-1e-8);if(p){u.sort();var d=u[0],f=R.subdivide(t,d);i.push(f[0]),p>1&&(d=(u[1]-d)/(1-d),f=R.subdivide(f[1],d),i.push(f[0])),i.push(f[1])}else i.push(t)}return i},solveCubic:function(t,e,i,n,s,r){var a=t[e],o=t[e+2],h=t[e+4],c=t[e+6],l=0;if(!(a<i&&c<i&&o<i&&h<i||a>i&&c>i&&o>i&&h>i)){var u=3*(o-a),p=3*(h-o)-u,d=c-a-u-p;l=g.solveCubic(d,p,u,a-i,n,s,r)}return l},getTimeOf:function(t,e){var i=new v(t[0],t[1]),n=new v(t[6],t[7]);if(null===(e.isClose(i,1e-12)?0:e.isClose(n,1e-12)?1:null))for(var s=[e.x,e.y],r=[],a=0;a<2;a++)for(var o=R.solveCubic(t,a,s[a],r,0,1),h=0;h<o;h++){var c=r[h];if(e.isClose(R.getPoint(t,c),1e-7))return c}return e.isClose(i,1e-7)?0:e.isClose(n,1e-7)?1:null},getNearestTime:function(t,e){if(R.isStraight(t)){var i=t[0],n=t[1],s=t[6]-i,r=t[7]-n,a=s*s+r*r;if(0===a)return 0;var o=((e.x-i)*s+(e.y-n)*r)/a;return o<1e-12?0:o>.999999999999?1:R.getTimeOf(t,new v(i+o*s,n+o*r))}var h=1/0,c=0;function l(i){if(i>=0&&i<=1){var n=e.getDistance(R.getPoint(t,i),!0);if(n<h)return h=n,c=i,!0}}for(var u=0;u<=100;u++)l(u/100);for(var p=.005;p>1e-8;)l(c-p)||l(c+p)||(p/=2);return c},getPart:function(t,e,i){var n=e>i;if(n){var s=e;e=i,i=s}return e>0&&(t=R.subdivide(t,e)[1]),i<1&&(t=R.subdivide(t,(i-e)/(1-e))[0]),n?[t[6],t[7],t[4],t[5],t[2],t[3],t[0],t[1]]:t},isFlatEnough:function(t,e){var i=t[0],n=t[1],s=t[2],r=t[3],a=t[4],o=t[5],h=t[6],c=t[7],l=3*s-2*i-h,u=3*r-2*n-c,p=3*a-2*h-i,d=3*o-2*c-n;return Math.max(l*l,p*p)+Math.max(u*u,d*d)<=16*e*e},getArea:function(t){var e=t[0],i=t[1],n=t[2],s=t[3],r=t[4],a=t[5],o=t[6],h=t[7];return 3*((h-i)*(n+r)-(o-e)*(s+a)+s*(e-r)-n*(i-a)+h*(r+e/3)-o*(a+i/3))/20},getBounds:function(t){for(var e=t.slice(0,2),i=e.slice(),n=[0,0],s=0;s<2;s++)R._addBounds(t[s],t[s+2],t[s+4],t[s+6],s,0,e,i,n);return new w(e[0],e[1],i[0]-e[0],i[1]-e[1])},_addBounds:function(t,e,i,n,s,r,a,o,h){function c(t,e){var i=t-e,n=t+e;i<a[s]&&(a[s]=i),n>o[s]&&(o[s]=n)}r/=2;var l=a[s]-r,u=o[s]+r;if(t<l||e<l||i<l||n<l||t>u||e>u||i>u||n>u)if(e<t!=e<n&&i<t!=i<n)c(t,r),c(n,r);else{var p=3*(e-i)-t+n,d=2*(t+i)-4*e,f=e-t,_=g.solveQuadratic(p,d,f,h);c(n,0);for(var v=0;v<_;v++){var m=h[v],x=1-m;1e-8<=m&&m<=1-1e-8&&c(x*x*x*t+3*x*x*m*e+3*x*m*m*i+m*m*m*n,r)}}}}},l.each(["getBounds","getStrokeBounds","getHandleBounds"],(function(t){this[t]=function(){this._bounds||(this._bounds={});var e=this._bounds[t];return e||(e=this._bounds[t]=D[t]([this._segment1,this._segment2],!1,this._path)),e.clone()}}),{}),l.each({isStraight:function(t,e,i,n){if(e.isZero()&&i.isZero())return!0;var s=n.subtract(t);if(s.isZero())return!1;if(s.isCollinear(e)&&s.isCollinear(i)){var r=new C(t,n);if(r.getDistance(t.add(e))<1e-7&&r.getDistance(n.add(i))<1e-7){var a=s.dot(s),o=s.dot(e)/a,h=s.dot(i)/a;return o>=0&&o<=1&&h<=0&&h>=-1}}return!1},isLinear:function(t,e,i,n){var s=n.subtract(t).divide(3);return e.equals(s)&&i.negate().equals(s)}},(function(t,e){this[e]=function(e){var i=this._segment1,n=this._segment2;return t(i._point,i._handleOut,n._handleIn,n._point,e)},this.statics[e]=function(e,i){var n=e[0],s=e[1],r=e[6],a=e[7];return t(new v(n,s),new v(e[2]-n,e[3]-s),new v(e[4]-r,e[5]-a),new v(r,a),i)}}),{statics:{},hasHandles:function(){return!this._segment1._handleOut.isZero()||!this._segment2._handleIn.isZero()},hasLength:function(t){return(!this.getPoint1().equals(this.getPoint2())||this.hasHandles())&&this.getLength()>(t||0)},isCollinear:function(t){return t&&this.isStraight()&&t.isStraight()&&this.getLine().isCollinear(t.getLine())},isHorizontal:function(){return this.isStraight()&&Math.abs(this.getTangentAtTime(.5).y)<1e-8},isVertical:function(){return this.isStraight()&&Math.abs(this.getTangentAtTime(.5).x)<1e-8}}),{beans:!1,getLocationAt:function(t,e){return this.getLocationAtTime(e?t:this.getTimeAt(t))},getLocationAtTime:function(t){return null!=t&&t>=0&&t<=1?new V(this,t):null},getTimeAt:function(t,e){return R.getTimeAt(this.getValues(),t,e)},getParameterAt:"#getTimeAt",getTimesWithTangent:function(){var t=v.read(arguments);return t.isZero()?[]:R.getTimesWithTangent(this.getValues(),t)},getOffsetAtTime:function(t){return this.getPartLength(0,t)},getLocationOf:function(){return this.getLocationAtTime(this.getTimeOf(v.read(arguments)))},getOffsetOf:function(){var t=this.getLocationOf.apply(this,arguments);return t?t.getOffset():null},getTimeOf:function(){return R.getTimeOf(this.getValues(),v.read(arguments))},getParameterOf:"#getTimeOf",getNearestLocation:function(){var t=v.read(arguments),e=this.getValues(),i=R.getNearestTime(e,t),n=R.getPoint(e,i);return new V(this,i,n,null,t.getDistance(n))},getNearestPoint:function(){var t=this.getNearestLocation.apply(this,arguments);return t?t.getPoint():t}},new function(){var t=["getPoint","getTangent","getNormal","getWeightedTangent","getWeightedNormal","getCurvature"];return l.each(t,(function(t){this[t+"At"]=function(e,i){var n=this.getValues();return R[t](n,i?e:R.getTimeAt(n,e))},this[t+"AtTime"]=function(e){return R[t](this.getValues(),e)}}),{statics:{_evaluateMethods:t}})},new function(){function t(t){var e=t[0],i=t[1],n=t[2],s=t[3],r=t[4],a=t[5],o=t[6],h=t[7],c=9*(n-r)+3*(o-e),l=6*(e+r)-12*n,u=3*(n-e),p=9*(s-a)+3*(h-i),d=6*(i+a)-12*s,f=3*(s-i);return function(t){var e=(c*t+l)*t+u,i=(p*t+d)*t+f;return Math.sqrt(e*e+i*i)}}function e(t,e){return Math.max(2,Math.min(16,Math.ceil(32*Math.abs(e-t))))}function i(t,e,i,n){if(null==e||e<0||e>1)return null;var s=t[0],r=t[1],a=t[2],o=t[3],h=t[4],c=t[5],l=t[6],u=t[7],p=g.isZero;p(a-s)&&p(o-r)&&(a=s,o=r),p(h-l)&&p(c-u)&&(h=l,c=u);var d,f,_=3*(a-s),m=3*(h-a)-_,x=l-s-_-m,y=3*(o-r),w=3*(c-o)-y,b=u-r-y-w;if(0===i)d=0===e?s:1===e?l:((x*e+m)*e+_)*e+s,f=0===e?r:1===e?u:((b*e+w)*e+y)*e+r;else{if(e<1e-8?(d=_,f=y):e>1-1e-8?(d=3*(l-h),f=3*(u-c)):(d=(3*x*e+2*m)*e+_,f=(3*b*e+2*w)*e+y),n){0===d&&0===f&&(e<1e-8||e>1-1e-8)&&(d=h-a,f=c-o);var k=Math.sqrt(d*d+f*f);k&&(d/=k,f/=k)}if(3===i){h=6*x*e+2*m,c=6*b*e+2*w;var C=Math.pow(d*d+f*f,1.5);d=0!==C?(d*c-f*h)/C:0,f=0}}return 2===i?new v(f,-d):new v(d,f)}return{statics:{classify:function(t){var e=t[0],i=t[1],n=t[2],s=t[3],r=t[4],a=t[5],h=t[6],c=t[7],l=n*(i-c)+s*(h-e)+e*c-i*h,u=3*(r*(s-i)+a*(e-n)+n*i-s*e),p=u-l,d=p-l+(e*(c-a)+i*(r-h)+h*a-c*r),f=Math.sqrt(d*d+p*p+u*u),_=0!==f?1/f:0,v=g.isZero;function m(t,e,i){var n=e!==o,s=n&&e>0&&e<1,r=n&&i>0&&i<1;return!n||(s||r)&&("loop"!==t||s&&r)||(t="arch",s=r=!1),{type:t,roots:s||r?s&&r?e<i?[e,i]:[i,e]:[s?e:i]:null}}if(p*=_,u*=_,v(d*=_))return v(p)?m(v(u)?"line":"quadratic"):m("serpentine",u/(3*p));var x=3*p*p-4*d*u;if(v(x))return m("cusp",p/(2*d));var y=x>0?Math.sqrt(x/3):Math.sqrt(-x),w=2*d;return m(x>0?"serpentine":"loop",(p+y)/w,(p-y)/w)},getLength:function(i,n,s,r){if(n===o&&(n=0),s===o&&(s=1),R.isStraight(i)){var a=i;s<1&&(a=R.subdivide(a,s)[0],n/=s),n>0&&(a=R.subdivide(a,n)[1]);var h=a[6]-a[0],c=a[7]-a[1];return Math.sqrt(h*h+c*c)}return g.integrate(r||t(i),n,s,e(n,s))},getTimeAt:function(i,n,s){if(s===o&&(s=n<0?1:0),0===n)return s;var r=Math.abs,a=n>0,h=a?s:0,c=a?1:s,l=t(i),u=R.getLength(i,h,c,l),p=r(n)-u;if(r(p)<1e-12)return a?c:h;if(p>1e-12)return null;var d=n/u,f=0;return g.findRoot((function(t){return f+=g.integrate(l,s,t,e(s,t)),s=t,f-n}),l,s+d,h,c,32,1e-12)},getPoint:function(t,e){return i(t,e,0,!1)},getTangent:function(t,e){return i(t,e,1,!0)},getWeightedTangent:function(t,e){return i(t,e,1,!1)},getNormal:function(t,e){return i(t,e,2,!0)},getWeightedNormal:function(t,e){return i(t,e,2,!1)},getCurvature:function(t,e){return i(t,e,3,!1).x},getPeaks:function(t){var e=t[0],i=t[1],n=t[2],s=t[3],r=t[4],a=t[5],o=3*n-e-3*r+t[6],h=3*e-6*n+3*r,c=-3*e+3*n,l=3*s-i-3*a+t[7],u=3*i-6*s+3*a,p=-3*i+3*s,d=[];return g.solveCubic(9*(o*o+l*l),9*(o*h+u*l),2*(h*h+u*u)+3*(c*o+p*l),c*h+u*p,d,1e-8,1-1e-8),d.sort()}}}},new function(){function t(t,e,i,n,s,r,a){var o=!a&&i.getPrevious()===s,h=!a&&i!==s&&i.getNext()===s;if(null!==n&&n>=(o?1e-8:0)&&n<=(h?1-1e-8:1)&&null!==r&&r>=(h?1e-8:0)&&r<=(o?1-1e-8:1)){var c=new V(i,n,null,a),l=new V(s,r,null,a);c._intersection=l,l._intersection=c,e&&!e(c)||V.insert(t,c,!0)}}function e(n,s,r,a,o,h,c,l,u,p,d,f,g){if(++u>=4096||++l>=40)return u;var _,v,m=s[0],x=s[1],y=s[6],w=s[7],b=C.getSignedDistance,k=b(m,x,y,w,s[2],s[3]),S=b(m,x,y,w,s[4],s[5]),I=k*S>0?.75:4/9,A=I*Math.min(0,k,S),P=I*Math.max(0,k,S),T=b(m,x,y,w,n[0],n[1]),E=b(m,x,y,w,n[2],n[3]),L=b(m,x,y,w,n[4],n[5]),M=b(m,x,y,w,n[6],n[7]),O=function(t,e,i,n){var s,r=[0,t],a=[1/3,e],o=[2/3,i],h=[1,n],c=e-(2*t+n)/3,l=i-(t+2*n)/3;if(c*l<0)s=[[r,a,h],[r,o,h]];else{var u=c/l;s=[u>=2?[r,a,h]:u<=.5?[r,o,h]:[r,a,o,h],[r,h]]}return(c||l)<0?s.reverse():s}(T,E,L,M),N=O[0],z=O[1];if(0===k&&0===S&&0===T&&0===E&&0===L&&0===M||null==(_=i(N,z,A,P))||null==(v=i(N.reverse(),z.reverse(),A,P)))return u;var V=p+(d-p)*_,B=p+(d-p)*v;if(Math.max(g-f,B-V)<1e-9){var D=(V+B)/2,F=(f+g)/2;t(o,h,c?a:r,c?F:D,c?r:a,c?D:F)}else if(n=R.getPart(n,_,v),v-_>.8)if(B-V>g-f){D=(V+B)/2;u=e(s,(j=R.subdivide(n,.5))[0],a,r,o,h,!c,l,u,f,g,V,D),u=e(s,j[1],a,r,o,h,!c,l,u,f,g,D,B)}else{var j;F=(f+g)/2;u=e((j=R.subdivide(s,.5))[0],n,a,r,o,h,!c,l,u,f,F,V,B),u=e(j[1],n,a,r,o,h,!c,l,u,F,g,V,B)}else u=g-f>=1e-9?e(s,n,a,r,o,h,!c,l,u,f,g,V,B):e(n,s,r,a,o,h,c,l,u,V,B,f,g);return u}function i(t,e,i,s){return t[0][1]<i?n(t,!0,i):e[0][1]>s?n(e,!1,s):t[0][0]}function n(t,e,i){for(var n=t[0][0],s=t[0][1],r=1,a=t.length;r<a;r++){var o=t[r][0],h=t[r][1];if(e?h>=i:h<=i)return h===i?o:n+(i-s)*(o-n)/(h-s);n=o,s=h}return null}function s(t,e,i,n,s){var r=g.isZero;if(r(n)&&r(s)){var a=R.getTimeOf(t,new v(e,i));return null===a?[]:[a]}for(var o=Math.atan2(-s,n),h=Math.sin(o),c=Math.cos(o),l=[],u=[],p=0;p<8;p+=2){var d=t[p]-e,f=t[p+1]-i;l.push(d*c-f*h,d*h+f*c)}return R.solveCubic(l,1,0,u,0,1),u}function r(e,i,n,r,a,o,h){for(var c=i[0],l=i[1],u=s(e,c,l,i[6]-c,i[7]-l),p=0,d=u.length;p<d;p++){var f=u[p],g=R.getPoint(e,f),_=R.getTimeOf(i,g);null!==_&&t(a,o,h?r:n,h?_:f,h?n:r,h?f:_)}}function a(e,i,n,s,r,a){var o=C.intersect(e[0],e[1],e[6],e[7],i[0],i[1],i[6],i[7]);o&&t(r,a,n,R.getTimeOf(e,o),s,R.getTimeOf(i,o))}function o(i,n,s,o,h,l){var u=Math.min,p=Math.max;if(p(i[0],i[2],i[4],i[6])+1e-12>u(n[0],n[2],n[4],n[6])&&u(i[0],i[2],i[4],i[6])-1e-12<p(n[0],n[2],n[4],n[6])&&p(i[1],i[3],i[5],i[7])+1e-12>u(n[1],n[3],n[5],n[7])&&u(i[1],i[3],i[5],i[7])-1e-12<p(n[1],n[3],n[5],n[7])){var d=c(i,n);if(d)for(var f=0;f<2;f++){var g=d[f];t(h,l,s,g[0],o,g[1],!0)}else{var _=R.isStraight(i),m=R.isStraight(n),x=_&&m,y=_&&!m,w=h.length;if((x?a:_||m?r:e)(y?n:i,y?i:n,y?o:s,y?s:o,h,l,y,0,0,0,1,0,1),!x||h.length===w)for(f=0;f<4;f++){var b=f>>1,k=1&f,C=6*b,S=6*k,I=new v(i[C],i[C+1]),A=new v(n[S],n[S+1]);I.isClose(A,1e-12)&&t(h,l,s,b,o,k)}}}return h}function h(e,i,n,s){var r=R.classify(e);if("loop"===r.type){var a=r.roots;t(n,s,i,a[0],i,a[1])}return n}function c(t,e){function i(t){var e=t[6]-t[0],i=t[7]-t[1];return e*e+i*i}var n=Math.abs,s=C.getDistance,r=R.isStraight(t),a=R.isStraight(e),o=r&&a,h=i(t)<i(e),c=h?e:t,l=h?t:e,u=c[0],p=c[1],d=c[6]-u,f=c[7]-p;if(s(u,p,d,f,l[0],l[1],!0)<1e-7&&s(u,p,d,f,l[6],l[7],!0)<1e-7)!o&&s(u,p,d,f,c[2],c[3],!0)<1e-7&&s(u,p,d,f,c[4],c[5],!0)<1e-7&&s(u,p,d,f,l[2],l[3],!0)<1e-7&&s(u,p,d,f,l[4],l[5],!0)<1e-7&&(r=a=o=!0);else if(o)return null;if(r^a)return null;for(var g=[t,e],_=[],m=0;m<4&&_.length<2;m++){var x=1&m,y=1^x,w=m>>1,b=R.getTimeOf(g[x],new v(g[y][w?6:0],g[y][w?7:1]));if(null!=b){var k=x?[w,b]:[b,w];(!_.length||n(k[0]-_[0][0])>1e-8&&n(k[1]-_[0][1])>1e-8)&&_.push(k)}if(m>2&&!_.length)break}if(2!==_.length)_=null;else if(!o){var S=R.getPart(t,_[0][0],_[1][0]),I=R.getPart(e,_[0][1],_[1][1]);(n(I[2]-S[2])>1e-7||n(I[3]-S[3])>1e-7||n(I[4]-S[4])>1e-7||n(I[5]-S[5])>1e-7)&&(_=null)}return _}return{getIntersections:function(t){var e=this.getValues(),i=t&&t!==this&&t.getValues();return i?o(e,i,this,t,[]):h(e,this,[])},statics:{getOverlaps:c,getIntersections:function(t,e,i,n,s,r){var a=!e;a&&(e=t);for(var c,u,p=t.length,d=e.length,f=[],g=[],_=0;_<d;_++)f[_]=e[_].getValues(s);for(_=0;_<p;_++){var v=t[_],m=a?f[_]:v.getValues(n),x=v.getPath();x!==u&&(u=x,c=[],g.push(c)),a&&h(m,v,c,i);for(var y=a?_+1:0;y<d;y++){if(r&&c.length)return c;o(m,f[y],v,e[y],c,i)}}c=[],_=0;for(var w=g.length;_<w;_++)l.push(c,g[_]);return c},getCurveLineIntersections:s,getTimesWithTangent:function(t,e){var i=t[0],n=t[1],s=t[2],r=t[3],a=t[4],o=t[5],h=t[6],c=t[7],l=e.normalize(),u=l.x,p=l.y,d=3*h-9*a+9*s-3*i,f=3*c-9*o+9*r-3*n,_=6*a-12*s+6*i,v=6*o-12*r+6*n,m=3*s-3*i,x=3*r-3*n,y=2*d*p-2*f*u,w=[];if(Math.abs(y)<g.CURVETIME_EPSILON){if(0!=(y=d*v-f*_)){var b=-(d*x-f*m)/y;b>=0&&b<=1&&w.push(b)}}else{var k=(_*_-4*d*m)*p*p+(-2*_*v+4*f*m+4*d*x)*u*p+(v*v-4*f*x)*u*u,C=_*p-v*u;if(k>=0&&0!=y){var S=Math.sqrt(k),I=-(C+S)/y,A=(-C+S)/y;I>=0&&I<=1&&w.push(I),A>=0&&A<=1&&w.push(A)}}return w}}}}),V=l.extend({_class:"CurveLocation",initialize:function(t,e,i,n,s){if(e>=.99999999){var r=t.getNext();r&&(e=0,t=r)}this._setCurve(t),this._time=e,this._point=i||t.getPointAtTime(e),this._overlap=n,this._distance=s,this._intersection=this._next=this._previous=null},_setCurve:function(t){var e=t._path;this._path=e,this._version=e?e._version:0,this._curve=t,this._segment=null,this._segment1=t._segment1,this._segment2=t._segment2},_setSegment:function(t){this._setCurve(t.getCurve()),this._segment=t,this._time=t===this._segment1?0:1,this._point=t._point.clone()},getSegment:function(){var t=this._segment;if(!t){var e=this.getCurve(),i=this.getTime();0===i?t=e._segment1:1===i?t=e._segment2:null!=i&&(t=e.getPartLength(0,i)<e.getPartLength(i,1)?e._segment1:e._segment2),this._segment=t}return t},getCurve:function(){var t=this._path,e=this;function i(t){var i=t&&t.getCurve();if(i&&null!=(e._time=i.getTimeOf(e._point)))return e._setCurve(i),i}return t&&t._version!==this._version&&(this._time=this._offset=this._curveOffset=this._curve=null),this._curve||i(this._segment)||i(this._segment1)||i(this._segment2.getPrevious())},getPath:function(){var t=this.getCurve();return t&&t._path},getIndex:function(){var t=this.getCurve();return t&&t.getIndex()},getTime:function(){var t=this.getCurve(),e=this._time;return t&&null==e?this._time=t.getTimeOf(this._point):e},getParameter:"#getTime",getPoint:function(){return this._point},getOffset:function(){var t=this._offset;if(null==t){t=0;var e=this.getPath(),i=this.getIndex();if(e&&null!=i)for(var n=e.getCurves(),s=0;s<i;s++)t+=n[s].getLength();this._offset=t+=this.getCurveOffset()}return t},getCurveOffset:function(){var t=this._curveOffset;if(null==t){var e=this.getCurve(),i=this.getTime();this._curveOffset=t=null!=i&&e&&e.getPartLength(0,i)}return t},getIntersection:function(){return this._intersection},getDistance:function(){return this._distance},divide:function(){var t=this.getCurve(),e=t&&t.divideAtTime(this.getTime());return e&&this._setSegment(e._segment1),e},split:function(){var t=this.getCurve(),e=t._path,i=t&&t.splitAtTime(this.getTime());return i&&this._setSegment(e.getLastSegment()),i},equals:function(t,e){var i=this===t;if(!i&&t instanceof V){var n=this.getCurve(),s=t.getCurve(),r=n._path;if(r===s._path){var a=Math.abs,o=a(this.getOffset()-t.getOffset()),h=!e&&this._intersection,c=!e&&t._intersection;i=(o<1e-7||r&&a(r.getLength()-o)<1e-7)&&(!h&&!c||h&&c&&h.equals(c,!0))}}return i},toString:function(){var t=[],e=this.getPoint(),i=f.instance;e&&t.push("point: "+e);var n=this.getIndex();null!=n&&t.push("index: "+n);var s=this.getTime();return null!=s&&t.push("time: "+i.number(s)),null!=this._distance&&t.push("distance: "+i.number(this._distance)),"{ "+t.join(", ")+" }"},isTouching:function(){var t=this._intersection;if(t&&this.getTangent().isCollinear(t.getTangent())){var e=this.getCurve(),i=t.getCurve();return!(e.isStraight()&&i.isStraight()&&e.getLine().intersect(i.getLine()))}return!1},isCrossing:function(){var t=this._intersection;if(!t)return!1;var e=this.getTime(),i=t.getTime(),n=e>=1e-8&&e<=1-1e-8,s=i>=1e-8&&i<=1-1e-8;if(n&&s)return!this.isTouching();var r=this.getCurve(),a=e<1e-8?r.getPrevious():r,o=t.getCurve(),h=i<1e-8?o.getPrevious():o;if(e>1-1e-8&&(r=r.getNext()),i>1-1e-8&&(o=o.getNext()),!(a&&r&&h&&o))return!1;var c=[];function l(t,e){var i=t.getValues(),n=R.classify(i).roots||R.getPeaks(i),s=n.length,r=e&&s>1?n[s-1]:s>0?n[0]:.5;c.push(R.getLength(i,e?r:0,e?1:r)/2)}function u(t,e,i){return e<i?t>e&&t<i:t>e||t<i}n||(l(a,!0),l(r,!1)),s||(l(h,!0),l(o,!1));var p=this.getPoint(),d=Math.min.apply(Math,c),f=n?r.getTangentAtTime(e):r.getPointAt(d).subtract(p),g=n?f.negate():a.getPointAt(-d).subtract(p),_=s?o.getTangentAtTime(i):o.getPointAt(d).subtract(p),v=s?_.negate():h.getPointAt(-d).subtract(p),m=g.getAngle(),x=f.getAngle(),y=v.getAngle(),w=_.getAngle();return!!(n?u(m,y,w)^u(x,y,w)&&u(m,w,y)^u(x,w,y):u(y,m,x)^u(w,m,x)&&u(y,x,m)^u(w,x,m))},hasOverlap:function(){return!!this._overlap}},l.each(R._evaluateMethods,(function(t){var e=t+"At";this[t]=function(){var t=this.getCurve(),i=this.getTime();return null!=i&&t&&t[e](i,!0)}}),{preserve:!0}),new function(){function t(t,e,i){var n=t.length,s=0,r=n-1;function a(i,s){for(var r=i+s;r>=-1&&r<=n;r+=s){var a=t[(r%n+n)%n];if(!e.getPoint().isClose(a.getPoint(),1e-7))break;if(e.equals(a))return a}return null}for(;s<=r;){var o,h=s+r>>>1,c=t[h];if(i&&(o=e.equals(c)?c:a(h,-1)||a(h,1)))return e._overlap&&(o._overlap=o._intersection._overlap=!0),o;var l=e.getPath(),u=c.getPath();(l!==u?l._id-u._id:e.getIndex()+e.getTime()-(c.getIndex()+c.getTime()))<0?r=h-1:s=h+1}return t.splice(s,0,e),e}return{statics:{insert:t,expand:function(e){for(var i=e.slice(),n=e.length-1;n>=0;n--)t(i,e[n]._intersection,!1);return i}}}}),B=I.extend({_class:"PathItem",_selectBounds:!1,_canScaleStroke:!0,beans:!0,initialize:function(){},statics:{create:function(t){var e,i,n;if(l.isPlainObject(t)?(i=t.segments,e=t.pathData):Array.isArray(t)?i=t:"string"==typeof t&&(e=t),i){var s=i[0];n=s&&Array.isArray(s[0])}else e&&(n=(e.match(/m/gi)||[]).length>1||/z\s*\S+/i.test(e));return new(n?F:D)(t)}},_asPathItem:function(){return this},isClockwise:function(){return this.getArea()>=0},setClockwise:function(t){this.isClockwise()!=(t=!!t)&&this.reverse()},setPathData:function(t){var e,i,n,s=t&&t.match(/[mlhvcsqtaz][^mlhvcsqtaz]*/gi),r=!1,a=new v,o=new v;function h(t,i){var n=+e[t];return r&&(n+=a[i]),n}function c(t){return new v(h(t,"x"),h(t+1,"y"))}this.clear();for(var l=0,u=s&&s.length;l<u;l++){var p=s[l],d=p[0],f=d.toLowerCase(),g=(e=p.match(/[+-]?(?:\d*\.\d+|\d+\.?)(?:[eE][+-]?\d+)?/g))&&e.length;switch(r=d===f,"z"!==i||/[mz]/.test(f)||this.moveTo(a),f){case"m":case"l":for(var _="m"===f,m=0;m<g;m+=2)this[_?"moveTo":"lineTo"](a=c(m)),_&&(o=a,_=!1);n=a;break;case"h":case"v":var y="h"===f?"x":"y";a=a.clone();for(m=0;m<g;m++)a[y]=h(m,y),this.lineTo(a);n=a;break;case"c":for(m=0;m<g;m+=6)this.cubicCurveTo(c(m),n=c(m+2),a=c(m+4));break;case"s":for(m=0;m<g;m+=4)this.cubicCurveTo(/[cs]/.test(i)?a.multiply(2).subtract(n):a,n=c(m),a=c(m+2)),i=f;break;case"q":for(m=0;m<g;m+=4)this.quadraticCurveTo(n=c(m),a=c(m+2));break;case"t":for(m=0;m<g;m+=2)this.quadraticCurveTo(n=/[qt]/.test(i)?a.multiply(2).subtract(n):a,a=c(m)),i=f;break;case"a":for(m=0;m<g;m+=7)this.arcTo(a=c(m+5),new x(+e[m],+e[m+1]),+e[m+2],+e[m+4],+e[m+3]);break;case"z":this.closePath(1e-12),a=o}i=f}},_canComposite:function(){return!(this.hasFill()&&this.hasStroke())},_contains:function(t){var e=t.isInside(this.getBounds({internal:!0,handle:!0}))?this._getWinding(t):{};return e.onPath||!!("evenodd"===this.getFillRule()?1&e.windingL||1&e.windingR:e.winding)},getIntersections:function(t,e,i,n){var s=this===t||!t,r=this._matrix._orNullIfIdentity(),a=s?r:(i||t._matrix)._orNullIfIdentity();return s||this.getBounds(r).intersects(t.getBounds(a),1e-12)?R.getIntersections(this.getCurves(),!s&&t.getCurves(),e,r,a,n):[]},getCrossings:function(t){return this.getIntersections(t,(function(t){return t.hasOverlap()||t.isCrossing()}))},getNearestLocation:function(){for(var t=v.read(arguments),e=this.getCurves(),i=1/0,n=null,s=0,r=e.length;s<r;s++){var a=e[s].getNearestLocation(t);a._distance<i&&(i=a._distance,n=a)}return n},getNearestPoint:function(){var t=this.getNearestLocation.apply(this,arguments);return t?t.getPoint():t},interpolate:function(t,e,i){var n=!this._children,s=n?"_segments":"_children",r=t[s],a=e[s],o=this[s];if(!r||!a||r.length!==a.length)throw new Error("Invalid operands in interpolate() call: "+t+", "+e);var h=o.length,c=a.length;if(h<c)for(var l=n?N:D,u=h;u<c;u++)this.add(new l);else h>c&&this[n?"removeSegments":"removeChildren"](c,h);for(u=0;u<c;u++)o[u].interpolate(r[u],a[u],i);n&&(this.setClosed(t._closed),this._changed(9))},compare:function(t){var e=!1;if(t){var i=this._children||[this],n=t._children?t._children.slice():[t],s=i.length,r=n.length,a=[],o=0;e=!0;for(var h=s-1;h>=0&&e;h--){var c=i[h];e=!1;for(var l=r-1;l>=0&&!e;l--)c.compare(n[l])&&(a[l]||(a[l]=!0,o++),e=!0)}e=e&&o===r}return e}}),D=B.extend({_class:"Path",_serializeFields:{segments:[],closed:!1},initialize:function(t){this._closed=!1,this._segments=[],this._version=0;var e=Array.isArray(t)?"object"==typeof t[0]?t:arguments:!t||t.size!==o||t.x===o&&t.point===o?null:arguments;e&&e.length>0?this.setSegments(e):(this._curves=o,this._segmentSelection=0,e||"string"!=typeof t||(this.setPathData(t),t=null)),this._initialize(!e&&t)},_equals:function(t){return this._closed===t._closed&&l.equals(this._segments,t._segments)},copyContent:function(t){this.setSegments(t._segments),this._closed=t._closed},_changed:function t(e){if(t.base.call(this,e),8&e){if(this._length=this._area=o,32&e)this._version++;else if(this._curves)for(var i=0,n=this._curves.length;i<n;i++)this._curves[i]._changed()}else 64&e&&(this._bounds=o)},getStyle:function(){var t=this._parent;return(t instanceof F?t:this)._style},getSegments:function(){return this._segments},setSegments:function(t){var e=this.isFullySelected(),i=t&&t.length;if(this._segments.length=0,this._segmentSelection=0,this._curves=o,i){var n=t[i-1];"boolean"==typeof n&&(this.setClosed(n),i--),this._add(N.readList(t,0,{},i))}e&&this.setFullySelected(!0)},getFirstSegment:function(){return this._segments[0]},getLastSegment:function(){return this._segments[this._segments.length-1]},getCurves:function(){var t=this._curves,e=this._segments;if(!t){var i=this._countCurves();t=this._curves=new Array(i);for(var n=0;n<i;n++)t[n]=new R(this,e[n],e[n+1]||e[0])}return t},getFirstCurve:function(){return this.getCurves()[0]},getLastCurve:function(){var t=this.getCurves();return t[t.length-1]},isClosed:function(){return this._closed},setClosed:function(t){if(this._closed!=(t=!!t)){if(this._closed=t,this._curves){var e=this._curves.length=this._countCurves();t&&(this._curves[e-1]=new R(this,this._segments[e-1],this._segments[0]))}this._changed(41)}}},{beans:!0,getPathData:function(t,e){var i,n,s,r,a,o,h,c,l=this._segments,u=l.length,p=new f(e),d=new Array(6),g=!0,_=[];function v(e,l){if(e._transformCoordinates(t,d),i=d[0],n=d[1],g)_.push("M"+p.pair(i,n)),g=!1;else if(a=d[2],o=d[3],a===i&&o===n&&h===s&&c===r){if(!l){var u=i-s,f=n-r;_.push(0===u?"v"+p.number(f):0===f?"h"+p.number(u):"l"+p.pair(u,f))}}else _.push("c"+p.pair(h-s,c-r)+" "+p.pair(a-s,o-r)+" "+p.pair(i-s,n-r));s=i,r=n,h=d[4],c=d[5]}if(!u)return"";for(var m=0;m<u;m++)v(l[m]);return this._closed&&u>0&&(v(l[0],!0),_.push("z")),_.join("")},isEmpty:function(){return!this._segments.length},_transformContent:function(t){for(var e=this._segments,i=new Array(6),n=0,s=e.length;n<s;n++)e[n]._transformCoordinates(t,i,!0);return!0},_add:function(t,e){for(var i=this._segments,n=this._curves,s=t.length,r=null==e,a=(e=r?i.length:e,0);a<s;a++){var o=t[a];o._path&&(o=t[a]=o.clone()),o._path=this,o._index=e+a,o._selection&&this._updateSelection(o,0,o._selection)}if(r)l.push(i,t);else{i.splice.apply(i,[e,0].concat(t));a=e+s;for(var h=i.length;a<h;a++)i[a]._index=a}if(n){var c=this._countCurves(),u=e>0&&e+s-1===c?e-1:e,p=u,d=Math.min(u+s,c);t._curves&&(n.splice.apply(n,[u,0].concat(t._curves)),p+=t._curves.length);for(a=p;a<d;a++)n.splice(a,0,new R(this,null,null));this._adjustCurves(u,d)}return this._changed(41),t},_adjustCurves:function(t,e){for(var i,n=this._segments,s=this._curves,r=t;r<e;r++)(i=s[r])._path=this,i._segment1=n[r],i._segment2=n[r+1]||n[0],i._changed();(i=s[this._closed&&!t?n.length-1:t-1])&&(i._segment2=n[t]||n[0],i._changed()),(i=s[e])&&(i._segment1=n[e],i._changed())},_countCurves:function(){var t=this._segments.length;return!this._closed&&t>0?t-1:t},add:function(t){return arguments.length>1&&"number"!=typeof t?this._add(N.readList(arguments)):this._add([N.read(arguments)])[0]},insert:function(t,e){return arguments.length>2&&"number"!=typeof e?this._add(N.readList(arguments,1),t):this._add([N.read(arguments,1)],t)[0]},addSegment:function(){return this._add([N.read(arguments)])[0]},insertSegment:function(t){return this._add([N.read(arguments,1)],t)[0]},addSegments:function(t){return this._add(N.readList(t))},insertSegments:function(t,e){return this._add(N.readList(e),t)},removeSegment:function(t){return this.removeSegments(t,t+1)[0]||null},removeSegments:function(t,e,i){t=t||0,e=l.pick(e,this._segments.length);var n=this._segments,s=this._curves,r=n.length,a=n.splice(t,e-t),o=a.length;if(!o)return a;for(var h=0;h<o;h++){var c=a[h];c._selection&&this._updateSelection(c,c._selection,0),c._index=c._path=null}h=t;for(var u=n.length;h<u;h++)n[h]._index=h;if(s){var p=t>0&&e===r+(this._closed?1:0)?t-1:t;for(h=(s=s.splice(p,o)).length-1;h>=0;h--)s[h]._path=null;i&&(a._curves=s.slice(1)),this._adjustCurves(p,p)}return this._changed(41),a},clear:"#removeSegments",hasHandles:function(){for(var t=this._segments,e=0,i=t.length;e<i;e++)if(t[e].hasHandles())return!0;return!1},clearHandles:function(){for(var t=this._segments,e=0,i=t.length;e<i;e++)t[e].clearHandles()},getLength:function(){if(null==this._length){for(var t=this.getCurves(),e=0,i=0,n=t.length;i<n;i++)e+=t[i].getLength();this._length=e}return this._length},getArea:function(){var t=this._area;if(null==t){var e=this._segments,i=this._closed;t=0;for(var n=0,s=e.length;n<s;n++){var r=n+1===s;t+=R.getArea(R.getValues(e[n],e[r?0:n+1],null,r&&!i))}this._area=t}return t},isFullySelected:function(){var t=this._segments.length;return this.isSelected()&&t>0&&this._segmentSelection===7*t},setFullySelected:function(t){t&&this._selectSegments(!0),this.setSelected(t)},setSelection:function t(e){1&e||this._selectSegments(!1),t.base.call(this,e)},_selectSegments:function(t){var e=this._segments,i=e.length,n=t?7:0;this._segmentSelection=n*i;for(var s=0;s<i;s++)e[s]._selection=n},_updateSelection:function(t,e,i){t._selection=i,(this._segmentSelection+=i-e)>0&&this.setSelected(!0)},divideAt:function(t){var e,i=this.getLocationAt(t);return i&&(e=i.getCurve().divideAt(i.getCurveOffset()))?e._segment1:null},splitAt:function(t){var e=this.getLocationAt(t),i=e&&e.index,n=e&&e.time;n>1-1e-8&&(i++,n=0);var s=this.getCurves();if(i>=0&&i<s.length){n>=1e-8&&s[i++].divideAtTime(n);var r,a=this.removeSegments(i,this._segments.length,!0);return this._closed?(this.setClosed(!1),r=this):((r=new D(I.NO_INSERT)).insertAbove(this),r.copyAttributes(this)),r._add(a,0),this.addSegment(a[0]),r}return null},split:function(t,e){var i,n=e===o?t:(i=this.getCurves()[t])&&i.getLocationAtTime(e);return null!=n?this.splitAt(n):null},join:function(t,e){var i=e||0;if(t&&t!==this){var n=t._segments,s=this.getLastSegment(),r=t.getLastSegment();if(!r)return this;s&&s._point.isClose(r._point,i)&&t.reverse();var a=t.getFirstSegment();if(s&&s._point.isClose(a._point,i))s.setHandleOut(a._handleOut),this._add(n.slice(1));else{var o=this.getFirstSegment();o&&o._point.isClose(a._point,i)&&t.reverse(),r=t.getLastSegment(),o&&o._point.isClose(r._point,i)?(o.setHandleIn(r._handleIn),this._add(n.slice(0,n.length-1),0)):this._add(n.slice())}t._closed&&this._add([n[0]]),t.remove()}var h=this.getFirstSegment(),c=this.getLastSegment();return h!==c&&h._point.isClose(c._point,i)&&(h.setHandleIn(c._handleIn),c.remove(),this.setClosed(!0)),this},reduce:function(t){for(var e=this.getCurves(),i=t&&t.simplify,n=i?1e-7:0,s=e.length-1;s>=0;s--){var r=e[s];!r.hasHandles()&&(!r.hasLength(n)||i&&r.isCollinear(r.getNext()))&&r.remove()}return this},reverse:function(){this._segments.reverse();for(var t=0,e=this._segments.length;t<e;t++){var i=this._segments[t],n=i._handleIn;i._handleIn=i._handleOut,i._handleOut=n,i._index=t}this._curves=null,this._changed(9)},flatten:function(t){for(var e=new j(this,t||.25,256,!0).parts,i=e.length,n=[],s=0;s<i;s++)n.push(new N(e[s].curve.slice(0,2)));!this._closed&&i>0&&n.push(new N(e[i-1].curve.slice(6))),this.setSegments(n)},simplify:function(t){var e=new q(this).fit(t||2.5);return e&&this.setSegments(e),!!e},smooth:function(t){var e=this,i=t||{},n=i.type||"asymmetric",s=this._segments,r=s.length,a=this._closed;function h(t,i){var n=t&&t.index;if(null!=n){var s=t.path;if(s&&s!==e)throw new Error(t._class+" "+n+" of "+s+" is not part of "+e);i&&t instanceof R&&n++}else n="number"==typeof t?t:i;return Math.min(n<0&&a?n%r:n<0?n+r:n,r-1)}var c=a&&i.from===o&&i.to===o,l=h(i.from,0),u=h(i.to,r-1);if(l>u)if(a)l-=r;else{var p=l;l=u,u=p}if(/^(?:asymmetric|continuous)$/.test(n)){var d="asymmetric"===n,f=Math.min,g=u-l+1,_=g-1,v=c?f(g,4):1,m=v,x=v,y=[];if(a||(m=f(1,l),x=f(1,r-u-1)),(_+=m+x)<=1)return;for(var w=0,b=l-m;w<=_;w++,b++)y[w]=s[(b<0?b+r:b)%r]._point;var k=y[0]._x+2*y[1]._x,C=y[0]._y+2*y[1]._y,S=2,I=_-1,A=[k],P=[C],T=[S],E=[],L=[];for(w=1;w<_;w++){var M=w<I,O=M?4:d?2:7,N=M?4:d?3:8,z=M?2:d?0:1,V=(M?1:d?1:2)/S;S=T[w]=O-V,k=A[w]=N*y[w]._x+z*y[w+1]._x-V*k,C=P[w]=N*y[w]._y+z*y[w+1]._y-V*C}E[I]=A[I]/T[I],L[I]=P[I]/T[I];for(w=_-2;w>=0;w--)E[w]=(A[w]-E[w+1])/T[w],L[w]=(P[w]-L[w+1])/T[w];E[_]=(3*y[_]._x-E[I])/2,L[_]=(3*y[_]._y-L[I])/2;w=m;var B=_-x;for(b=l;w<=B;w++,b++){var D=s[b<0?b+r:b],F=D._point,j=E[w]-F._x,q=L[w]-F._y;(c||w<B)&&D.setHandleOut(j,q),(c||w>m)&&D.setHandleIn(-j,-q)}}else for(w=l;w<=u;w++)s[w<0?w+r:w].smooth(i,!c&&w===l,!c&&w===u)},toShape:function(t){if(!this._closed)return null;var e,i,n,s,r,a,h,c=this._segments;function l(t,e){var i=c[t],n=i.getNext(),s=c[e],r=s.getNext();return i._handleOut.isZero()&&n._handleIn.isZero()&&s._handleOut.isZero()&&r._handleIn.isZero()&&n._point.subtract(i._point).isCollinear(r._point.subtract(s._point))}function u(t){var e=c[t],i=e.getNext(),n=e._handleOut,s=i._handleIn;if(n.isOrthogonal(s)){var r=e._point,a=i._point,o=new C(r,n,!0).intersect(new C(a,s,!0),!0);return o&&g.isZero(n.getLength()/o.subtract(r).getLength()-.5522847498307936)&&g.isZero(s.getLength()/o.subtract(a).getLength()-.5522847498307936)}return!1}function p(t,e){return c[t]._point.getDistance(c[e]._point)}if(!this.hasHandles()&&4===c.length&&l(0,2)&&l(1,3)&&(r=c[1],a=r.getPrevious(),h=r.getNext(),a._handleOut.isZero()&&r._handleIn.isZero()&&r._handleOut.isZero()&&h._handleIn.isZero()&&r._point.subtract(a._point).isOrthogonal(h._point.subtract(r._point)))?(e=T.Rectangle,i=new x(p(0,3),p(0,1)),s=c[1]._point.add(c[2]._point).divide(2)):8===c.length&&u(0)&&u(2)&&u(4)&&u(6)&&l(1,5)&&l(3,7)?(e=T.Rectangle,n=(i=new x(p(1,6),p(0,3))).subtract(new x(p(0,7),p(1,2))).divide(2),s=c[3]._point.add(c[4]._point).divide(2)):4===c.length&&u(0)&&u(1)&&u(2)&&u(3)&&(g.isZero(p(0,2)-p(1,3))?(e=T.Circle,n=p(0,2)/2):(e=T.Ellipse,n=new x(p(2,0)/2,p(3,1)/2)),s=c[1]._point),e){var d=this.getPosition(!0),f=new e({center:d,size:i,radius:n,insert:!1});return f.copyAttributes(this,!0),f._matrix.prepend(this._matrix),f.rotate(s.subtract(d).getAngle()+90),(t===o||t)&&f.insertAbove(this),f}return null},toPath:"#clone",compare:function t(e){if(!e||e instanceof F)return t.base.call(this,e);var i=this.getCurves(),n=e.getCurves(),s=i.length,r=n.length;if(!s||!r)return s==r;for(var a,o,h=i[0].getValues(),c=[],l=0,u=0,p=0;p<r;p++){var d=n[p].getValues();if(c.push(d),_=R.getOverlaps(h,d)){a=!p&&_[0][0]>0?r-1:p,o=_[0][1];break}}var f,g=Math.abs;for(d=c[a];h&&d;){var _;if(_=R.getOverlaps(h,d))if(g(_[0][0]-u)<1e-8){1===(u=_[1][0])&&(h=++l<s?i[l].getValues():null,u=0);var v=_[0][1];if(g(v-o)<1e-8){if(f||(f=[a,v]),1===(o=_[1][1])&&(++a>=r&&(a=0),d=c[a]||n[a].getValues(),o=0),!h)return f[0]===a&&f[1]===o;continue}}break}return!1},_hitTestSelf:function(t,e,i,n){var s,r,a,o,h,c,l=this,u=this.getStyle(),p=this._segments,d=p.length,f=this._closed,g=e._tolerancePadding,_=g,v=e.stroke&&u.hasStroke(),m=e.fill&&u.hasFill(),x=e.curves,y=v?u.getStrokeWidth()/2:m&&e.tolerance>0||x?0:null;function w(e,i){return t.subtract(e).divide(i).length<=1}function b(t,i,n){if(!e.selected||i.isSelected()){var s=t._point;if(i!==s&&(i=i.add(s)),w(i,_))return new O(n,l,{segment:t,point:i})}}function k(t,i){return(i||e.segments)&&b(t,t._point,"segment")||!i&&e.handles&&(b(t,t._handleIn,"handle-in")||b(t,t._handleOut,"handle-out"))}function C(t){o.add(t)}function S(e){var i,h=f||e._index>0&&e._index<d-1;return"round"===(h?s:r)?w(e._point,_):(o=new D({internal:!0,closed:!0}),h?e.isSmooth()||D._addBevelJoin(e,s,y,a,null,n,C,!0):"square"===r&&D._addSquareCap(e,r,y,null,n,C,!0),o.isEmpty()?void 0:o.contains(t)||(i=o.getNearestLocation(t))&&w(i.getPoint(),g))}if(null!==y&&(y>0?(s=u.getStrokeJoin(),r=u.getStrokeCap(),a=u.getMiterLimit(),_=_.add(D._getStrokePadding(y,n))):s=r="round"),!e.ends||e.segments||f){if(e.segments||e.handles)for(var I=0;I<d;I++)if(c=k(p[I]))return c}else if(c=k(p[0],!0)||k(p[d-1],!0))return c;if(null!==y){if(h=this.getNearestLocation(t)){var A=h.getTime();0===A||1===A&&d>1?S(h.getSegment())||(h=null):w(h.getPoint(),_)||(h=null)}if(!h&&"miter"===s&&d>1)for(I=0;I<d;I++){var P=p[I];if(t.getDistance(P._point)<=a*y&&S(P)){h=P.getLocation();break}}}return!h&&m&&this._contains(t)||h&&!v&&!x?new O("fill",this):h?new O(v?"stroke":"curve",this,{location:h,point:h.getPoint()}):null}},l.each(R._evaluateMethods,(function(t){this[t+"At"]=function(e){var i=this.getLocationAt(e);return i&&i[t]()}}),{beans:!1,getLocationOf:function(){for(var t=v.read(arguments),e=this.getCurves(),i=0,n=e.length;i<n;i++){var s=e[i].getLocationOf(t);if(s)return s}return null},getOffsetOf:function(){var t=this.getLocationOf.apply(this,arguments);return t?t.getOffset():null},getLocationAt:function(t){if("number"==typeof t){for(var e=this.getCurves(),i=0,n=0,s=e.length;n<s;n++){var r=i,a=e[n];if((i+=a.getLength())>t)return a.getLocationAt(t-r)}if(e.length>0&&t<=this.getLength())return new V(e[e.length-1],1)}else if(t&&t.getPath&&t.getPath()===this)return t;return null},getOffsetsWithTangent:function(){var t=v.read(arguments);if(t.isZero())return[];for(var e=[],i=0,n=this.getCurves(),s=0,r=n.length;s<r;s++){for(var a=n[s],o=a.getTimesWithTangent(t),h=0,c=o.length;h<c;h++){var l=i+a.getOffsetAtTime(o[h]);e.indexOf(l)<0&&e.push(l)}i+=a.length}return e}}),new function(){function t(t,e,i){var n,s,r,a,o,h,c,l,u=e._segments,p=u.length,d=new Array(6),f=!0;function g(e){if(i)e._transformCoordinates(i,d),n=d[0],s=d[1];else{var u=e._point;n=u._x,s=u._y}if(f)t.moveTo(n,s),f=!1;else{if(i)o=d[2],h=d[3];else{var p=e._handleIn;o=n+p._x,h=s+p._y}o===n&&h===s&&c===r&&l===a?t.lineTo(n,s):t.bezierCurveTo(c,l,o,h,n,s)}if(r=n,a=s,i)c=d[4],l=d[5];else{p=e._handleOut;c=r+p._x,l=a+p._y}}for(var _=0;_<p;_++)g(u[_]);e._closed&&p>0&&g(u[0])}return{_draw:function(e,i,n,s){var r=i.dontStart,a=i.dontFinish||i.clip,o=this.getStyle(),h=o.hasFill(),c=o.hasStroke(),l=o.getDashArray(),u=!ut.support.nativeDash&&c&&l&&l.length;function p(t){return l[(t%u+u)%u]}if(r||e.beginPath(),(h||c&&!u||a)&&(t(e,this,s),this._closed&&e.closePath()),!a&&(h||c)&&(this._setStyles(e,i,n),h&&(e.fill(o.getFillRule()),e.shadowColor="rgba(0,0,0,0)"),c)){if(u){r||e.beginPath();var d,f=new j(this,.25,32,!1,s),g=f.length,_=-o.getDashOffset(),v=0;for(_%=g;_>0;)_-=p(v--)+p(v--);for(;_<g;)d=_+p(v++),(_>0||d>0)&&f.drawPart(e,Math.max(_,0),Math.max(d,0)),_=d+p(v++)}e.stroke()}},_drawSelected:function(e,i){e.beginPath(),t(e,this,i),e.stroke(),function(t,e,i,n){if(!(n<=0))for(var s,r,a=n/2,o=n-2,h=a-1,c=new Array(6),l=0,u=e.length;l<u;l++){var p=e[l],d=p._selection;if(p._transformCoordinates(i,c),s=c[0],r=c[1],2&d&&g(2),4&d&&g(4),t.fillRect(s-a,r-a,n,n),o>0&&!(1&d)){var f=t.fillStyle;t.fillStyle="#ffffff",t.fillRect(s-h,r-h,o,o),t.fillStyle=f}}function g(e){var i=c[e],n=c[e+1];s==i&&r==n||(t.beginPath(),t.moveTo(s,r),t.lineTo(i,n),t.stroke(),t.beginPath(),t.arc(i,n,a,0,2*Math.PI,!0),t.fill())}}(e,this._segments,i,ut.settings.handleSize)}}},new function(){function t(t){var e=t._segments;if(!e.length)throw new Error("Use a moveTo() command first");return e[e.length-1]}return{moveTo:function(){var t=this._segments;1===t.length&&this.removeSegment(0),t.length||this._add([new N(v.read(arguments))])},moveBy:function(){throw new Error("moveBy() is unsupported on Path items.")},lineTo:function(){this._add([new N(v.read(arguments))])},cubicCurveTo:function(){var e=v.read(arguments),i=v.read(arguments),n=v.read(arguments),s=t(this);s.setHandleOut(e.subtract(s._point)),this._add([new N(n,i.subtract(n))])},quadraticCurveTo:function(){var e=v.read(arguments),i=v.read(arguments),n=t(this)._point;this.cubicCurveTo(e.add(n.subtract(e).multiply(1/3)),e.add(i.subtract(e).multiply(1/3)),i)},curveTo:function(){var e=v.read(arguments),i=v.read(arguments),n=l.pick(l.read(arguments),.5),s=1-n,r=t(this)._point,a=e.subtract(r.multiply(s*s)).subtract(i.multiply(n*n)).divide(2*n*s);if(a.isNaN())throw new Error("Cannot put a curve through points with parameter = "+n);this.quadraticCurveTo(a,i)},arcTo:function(){var e,i,n,s,r=Math.abs,a=Math.sqrt,o=t(this),h=o._point,c=v.read(arguments),u=l.peek(arguments);if("boolean"==typeof(m=l.pick(u,!0)))var p=(w=h.add(c).divide(2)).add(w.subtract(h).rotate(m?-90:90));else if(l.remain(arguments)<=2)p=c,c=v.read(arguments);else if(!h.equals(c)){var d=x.read(arguments),f=g.isZero;if(f(d.width)||f(d.height))return this.lineTo(c);var _=l.read(arguments),m=!!l.read(arguments),y=!!l.read(arguments),w=h.add(c).divide(2),b=(Z=h.subtract(w).rotate(-_)).x,S=Z.y,I=r(d.width),A=r(d.height),P=I*I,T=A*A,E=b*b,L=S*S,M=a(E/P+L/T);if(M>1&&(P=(I*=M)*I,T=(A*=M)*A),r(M=(P*T-P*L-T*E)/(P*L+T*E))<1e-12&&(M=0),M<0)throw new Error("Cannot create an arc with the given arguments");e=new v(I*S/A,-A*b/I).multiply((y===m?-1:1)*a(M)).rotate(_).add(w),i=(n=(s=(new k).translate(e).rotate(_).scale(I,A))._inverseTransform(h)).getDirectedAngle(s._inverseTransform(c)),!m&&i>0?i-=360:m&&i<0&&(i+=360)}if(p){var O=new C(h.add(p).divide(2),p.subtract(h).rotate(90),!0),z=new C(p.add(c).divide(2),c.subtract(p).rotate(90),!0),R=new C(h,c),V=R.getSide(p);if(!(e=O.intersect(z,!0))){if(!V)return this.lineTo(c);throw new Error("Cannot create an arc with the given arguments")}i=(n=h.subtract(e)).getDirectedAngle(c.subtract(e));var B=R.getSide(e,!0);0===B?i=V*r(i):V===B&&(i+=i<0?360:-360)}if(i){for(var D=1e-7,F=r(i),j=F>=360?4:Math.ceil((F-D)/90),q=i/j,U=q*Math.PI/360,H=4/3*Math.sin(U)/(1+Math.cos(U)),W=[],G=0;G<=j;G++){var Z=c,$=null;if(G<j&&($=n.rotate(90).multiply(H),s?(Z=s._transformPoint(n),$=s._transformPoint(n.add($)).subtract(Z)):Z=e.add(n)),G){var Y=n.rotate(-90).multiply(H);s&&(Y=s._transformPoint(n.add(Y)).subtract(Z)),W.push(new N(Z,Y,$))}else o.setHandleOut($);n=n.rotate(q)}this._add(W)}},lineBy:function(){var e=v.read(arguments),i=t(this)._point;this.lineTo(i.add(e))},curveBy:function(){var e=v.read(arguments),i=v.read(arguments),n=l.read(arguments),s=t(this)._point;this.curveTo(s.add(e),s.add(i),n)},cubicCurveBy:function(){var e=v.read(arguments),i=v.read(arguments),n=v.read(arguments),s=t(this)._point;this.cubicCurveTo(s.add(e),s.add(i),s.add(n))},quadraticCurveBy:function(){var e=v.read(arguments),i=v.read(arguments),n=t(this)._point;this.quadraticCurveTo(n.add(e),n.add(i))},arcBy:function(){var e=t(this)._point,i=e.add(v.read(arguments)),n=l.pick(l.peek(arguments),!0);"boolean"==typeof n?this.arcTo(i,n):this.arcTo(i,e.add(v.read(arguments)))},closePath:function(t){this.setClosed(!0),this.join(this,t)}}},{_getBounds:function(t,e){var i=e.handle?"getHandleBounds":e.stroke?"getStrokeBounds":"getBounds";return D[i](this._segments,this._closed,this,t,e)},statics:{getBounds:function(t,e,i,n,s,r){var a=t[0];if(!a)return new w;var o=new Array(6),h=a._transformCoordinates(n,new Array(6)),c=h.slice(0,2),l=c.slice(),u=new Array(2);function p(t){t._transformCoordinates(n,o);for(var e=0;e<2;e++)R._addBounds(h[e],h[e+4],o[e+2],o[e],e,r?r[e]:0,c,l,u);var i=h;h=o,o=i}for(var d=1,f=t.length;d<f;d++)p(t[d]);return e&&p(a),new w(c[0],c[1],l[0]-c[0],l[1]-c[1])},getStrokeBounds:function(t,e,i,n,s){var r=i.getStyle(),a=r.hasStroke(),o=r.getStrokeWidth(),h=a&&i._getStrokeMatrix(n,s),c=a&&D._getStrokePadding(o,h),l=D.getBounds(t,e,i,n,s,c);if(!a)return l;var u=o/2,p=r.getStrokeJoin(),d=r.getStrokeCap(),f=r.getMiterLimit(),g=new w(new x(c));function _(t){l=l.include(t)}function v(t){l=l.unite(g.setCenter(t._point.transform(n)))}function m(t,e){"round"===e||t.isSmooth()?v(t):D._addBevelJoin(t,e,u,f,n,h,_)}function y(t,e){"round"===e?v(t):D._addSquareCap(t,e,u,n,h,_)}for(var b=t.length-(e?0:1),k=1;k<b;k++)m(t[k],p);return e?m(t[0],p):b>0&&(y(t[0],d),y(t[t.length-1],d)),l},_getStrokePadding:function(t,e){if(!e)return[t,t];var i=new v(t,0).transform(e),n=new v(0,t).transform(e),s=i.getAngleInRadians(),r=i.getLength(),a=n.getLength(),o=Math.sin(s),h=Math.cos(s),c=Math.tan(s),l=Math.atan2(a*c,r),u=Math.atan2(a,c*r);return[Math.abs(r*Math.cos(l)*h+a*Math.sin(l)*o),Math.abs(a*Math.sin(u)*h+r*Math.cos(u)*o)]},_addBevelJoin:function(t,e,i,n,s,r,a,o){var h=t.getCurve(),c=h.getPrevious(),l=h.getPoint1().transform(s),u=c.getNormalAtTime(1).multiply(i).transform(r),p=h.getNormalAtTime(0).multiply(i).transform(r),d=u.getDirectedAngle(p);if((d<0||d>=180)&&(u=u.negate(),p=p.negate()),o&&a(l),a(l.add(u)),"miter"===e){var f=new C(l.add(u),new v(-u.y,u.x),!0).intersect(new C(l.add(p),new v(-p.y,p.x),!0),!0);f&&l.getDistance(f)<=n*i&&a(f)}a(l.add(p))},_addSquareCap:function(t,e,i,n,s,r,a){var o=t._point.transform(n),h=t.getLocation(),c=h.getNormal().multiply(0===h.getTime()?i:-i).transform(s);"square"===e&&(a&&(r(o.subtract(c)),r(o.add(c))),o=o.add(c.rotate(-90))),r(o.add(c)),r(o.subtract(c))},getHandleBounds:function(t,e,i,n,s){var r,a,o=i.getStyle();if(s.stroke&&o.hasStroke()){var h=i._getStrokeMatrix(n,s),c=o.getStrokeWidth()/2,l=c;"miter"===o.getStrokeJoin()&&(l=c*o.getMiterLimit()),"square"===o.getStrokeCap()&&(l=Math.max(l,c*Math.SQRT2)),r=D._getStrokePadding(c,h),a=D._getStrokePadding(l,h)}for(var u=new Array(6),p=1/0,d=-p,f=p,g=d,_=0,v=t.length;_<v;_++){t[_]._transformCoordinates(n,u);for(var m=0;m<6;m+=2){var x=m?r:a,y=x?x[0]:0,b=x?x[1]:0,k=u[m],C=u[m+1],S=k-y,I=k+y,A=C-b,P=C+b;S<p&&(p=S),I>d&&(d=I),A<f&&(f=A),P>g&&(g=P)}}return new w(p,f,d-p,g-f)}}});D.inject({statics:new function(){var t=.5522847498307936,e=[new N([-1,0],[0,t],[0,-t]),new N([0,-1],[-t,0],[t,0]),new N([1,0],[0,-t],[0,t]),new N([0,1],[t,0],[-t,0])];function i(t,e,i){var n=l.getNamed(i),s=new D(n&&0==n.insert&&I.NO_INSERT);return s._add(t),s._closed=e,s.set(n,{insert:!0})}function n(t,n,s){for(var r=new Array(4),a=0;a<4;a++){var o=e[a];r[a]=new N(o._point.multiply(n).add(t),o._handleIn.multiply(n),o._handleOut.multiply(n))}return i(r,!0,s)}return{Line:function(){return i([new N(v.readNamed(arguments,"from")),new N(v.readNamed(arguments,"to"))],!1,arguments)},Circle:function(){var t=v.readNamed(arguments,"center"),e=l.readNamed(arguments,"radius");return n(t,new x(e),arguments)},Rectangle:function(){var e,n=w.readNamed(arguments,"rectangle"),s=x.readNamed(arguments,"radius",0,{readNull:!0}),r=n.getBottomLeft(!0),a=n.getTopLeft(!0),o=n.getTopRight(!0),h=n.getBottomRight(!0);if(!s||s.isZero())e=[new N(r),new N(a),new N(o),new N(h)];else{var c=(s=x.min(s,n.getSize(!0).divide(2))).width,l=s.height,u=c*t,p=l*t;e=[new N(r.add(c,0),null,[-u,0]),new N(r.subtract(0,l),[0,p]),new N(a.add(0,l),null,[0,-p]),new N(a.add(c,0),[-u,0],null),new N(o.subtract(c,0),null,[u,0]),new N(o.add(0,l),[0,-p],null),new N(h.subtract(0,l),null,[0,p]),new N(h.subtract(c,0),[u,0])]}return i(e,!0,arguments)},RoundRectangle:"#Rectangle",Ellipse:function(){var t=T._readEllipse(arguments);return n(t.center,t.radius,arguments)},Oval:"#Ellipse",Arc:function(){var t=v.readNamed(arguments,"from"),e=v.readNamed(arguments,"through"),i=v.readNamed(arguments,"to"),n=l.getNamed(arguments),s=new D(n&&0==n.insert&&I.NO_INSERT);return s.moveTo(t),s.arcTo(e,i),s.set(n)},RegularPolygon:function(){for(var t=v.readNamed(arguments,"center"),e=l.readNamed(arguments,"sides"),n=l.readNamed(arguments,"radius"),s=360/e,r=e%3==0,a=new v(0,r?-n:n),o=r?-1:.5,h=new Array(e),c=0;c<e;c++)h[c]=new N(t.add(a.rotate((c+o)*s)));return i(h,!0,arguments)},Star:function(){for(var t=v.readNamed(arguments,"center"),e=2*l.readNamed(arguments,"points"),n=l.readNamed(arguments,"radius1"),s=l.readNamed(arguments,"radius2"),r=360/e,a=new v(0,-1),o=new Array(e),h=0;h<e;h++)o[h]=new N(t.add(a.rotate(r*h).multiply(h%2?s:n)));return i(o,!0,arguments)}}}});var F=B.extend({_class:"CompoundPath",_serializeFields:{children:[]},beans:!0,initialize:function(t){this._children=[],this._namedChildren={},this._initialize(t)||("string"==typeof t?this.setPathData(t):this.addChildren(Array.isArray(t)?t:arguments))},insertChildren:function t(e,i){var n=i,s=n[0];s&&"number"==typeof s[0]&&(n=[n]);for(var r=i.length-1;r>=0;r--){var a=n[r];n!==i||a instanceof D||(n=l.slice(n)),Array.isArray(a)?n[r]=new D({segments:a,insert:!1}):a instanceof F&&(n.splice.apply(n,[r,1].concat(a.removeChildren())),a.remove())}return t.base.call(this,e,n)},reduce:function t(e){for(var i=this._children,n=i.length-1;n>=0;n--){var s;(s=i[n].reduce(e)).isEmpty()&&s.remove()}return i.length?t.base.call(this):((s=new D(I.NO_INSERT)).copyAttributes(this),s.insertAbove(this),this.remove(),s)},isClosed:function(){for(var t=this._children,e=0,i=t.length;e<i;e++)if(!t[e]._closed)return!1;return!0},setClosed:function(t){for(var e=this._children,i=0,n=e.length;i<n;i++)e[i].setClosed(t)},getFirstSegment:function(){var t=this.getFirstChild();return t&&t.getFirstSegment()},getLastSegment:function(){var t=this.getLastChild();return t&&t.getLastSegment()},getCurves:function(){for(var t=this._children,e=[],i=0,n=t.length;i<n;i++)l.push(e,t[i].getCurves());return e},getFirstCurve:function(){var t=this.getFirstChild();return t&&t.getFirstCurve()},getLastCurve:function(){var t=this.getLastChild();return t&&t.getLastCurve()},getArea:function(){for(var t=this._children,e=0,i=0,n=t.length;i<n;i++)e+=t[i].getArea();return e},getLength:function(){for(var t=this._children,e=0,i=0,n=t.length;i<n;i++)e+=t[i].getLength();return e},getPathData:function(t,e){for(var i=this._children,n=[],s=0,r=i.length;s<r;s++){var a=i[s],o=a._matrix;n.push(a.getPathData(t&&!o.isIdentity()?t.appended(o):t,e))}return n.join("")},_hitTestChildren:function t(e,i,n){return t.base.call(this,e,i.class===D||"path"===i.type?i:l.set({},i,{fill:!1}),n)},_draw:function(t,e,i,n){var s=this._children;if(s.length){e=e.extend({dontStart:!0,dontFinish:!0}),t.beginPath();for(var r=0,a=s.length;r<a;r++)s[r].draw(t,e,n);if(!e.clip){this._setStyles(t,e,i);var o=this._style;o.hasFill()&&(t.fill(o.getFillRule()),t.shadowColor="rgba(0,0,0,0)"),o.hasStroke()&&t.stroke()}}},_drawSelected:function(t,e,i){for(var n=this._children,s=0,r=n.length;s<r;s++){var a=n[s],o=a._matrix;i[a._id]||a._drawSelected(t,o.isIdentity()?e:e.appended(o))}}},new function(){function t(t,e){var i=t._children;if(e&&!i.length)throw new Error("Use a moveTo() command first");return i[i.length-1]}return l.each(["lineTo","cubicCurveTo","quadraticCurveTo","curveTo","arcTo","lineBy","cubicCurveBy","quadraticCurveBy","curveBy","arcBy"],(function(e){this[e]=function(){var i=t(this,!0);i[e].apply(i,arguments)}}),{moveTo:function(){var e=t(this),i=e&&e.isEmpty()?e:new D(I.NO_INSERT);i!==e&&this.addChild(i),i.moveTo.apply(i,arguments)},moveBy:function(){var e=t(this,!0),i=e&&e.getLastSegment(),n=v.read(arguments);this.moveTo(i?n.add(i._point):n)},closePath:function(e){t(this,!0).closePath(e)}})},l.each(["reverse","flatten","simplify","smooth"],(function(t){this[t]=function(e){for(var i,n=this._children,s=0,r=n.length;s<r;s++)i=n[s][t](e)||i;return i}}),{}));B.inject(new function(){var t=Math.min,e=Math.max,i=Math.abs,n={unite:{1:!0,2:!0},intersect:{2:!0},subtract:{1:!0},exclude:{1:!0,"-1":!0}};function s(t,e){var i=t.clone(!1).reduce({simplify:!0}).transform(null,!0,!0);return e?i.resolveCrossings().reorient("nonzero"===i.getFillRule(),!0):i}function r(t,e,i,n,s){var r=new F(I.NO_INSERT);return r.addChildren(t,!0),r=r.reduce({simplify:e}),s&&0==s.insert||r.insertAbove(n&&i.isSibling(n)&&i.getIndex()<n.getIndex()?n:i),r.copyAttributes(i,!0),r}function a(t,e,i,a){if(a&&(0==a.trace||a.stroke)&&/^(subtract|intersect)$/.test(i))return h(t,e,i);var o=s(t,!0),c=e&&t!==e&&s(e,!0),u=n[i];u[i]=!0,c&&(u.subtract||u.exclude)^c.isClockwise()^o.isClockwise()&&c.reverse();var f,g=d(V.expand(o.getCrossings(c))),m=o._children||[o],x=c&&(c._children||[c]),y=[],w=[];function b(t){for(var e=0,i=t.length;e<i;e++){var n=t[e];l.push(y,n._segments),l.push(w,n.getCurves()),n._overlapsOnly=!0}}if(g.length){b(m),x&&b(x);for(var k=0,C=g.length;k<C;k++)_(g[k]._segment,o,c,w,u);for(k=0,C=y.length;k<C;k++){var S=y[k],I=S._intersection;S._winding||_(S,o,c,w,u),I&&I._overlap||(S._path._overlapsOnly=!1)}f=v(y,u)}else f=p(x?m.concat(x):m.slice(),(function(t){return!!u[t]}));return r(f,!0,t,e,a)}function h(t,e,i){var n=s(t),a=s(e),o=n.getCrossings(a),h="subtract"===i,c="divide"===i,l={},u=[];function p(t){if(!l[t._id]&&(c||a.contains(t.getPointAt(t.getLength()/2))^h))return u.unshift(t),l[t._id]=!0}for(var d=o.length-1;d>=0;d--){var f=o[d].split();f&&(p(f)&&f.getFirstSegment().setHandleIn(0,0),n.getLastSegment().setHandleOut(0,0))}return p(n),r(u,!1,t,e)}function c(t,e){for(var i=t;i;){if(i===e)return;i=i._previous}for(;t._next&&t._next!==e;)t=t._next;if(!t._next){for(;e._previous;)e=e._previous;t._next=e,e._previous=t}}function u(t){for(var e=t.length-1;e>=0;e--)t[e].clearHandles()}function p(t,e,n){var s=t&&t.length;if(s){var r=l.each(t,(function(t,e){this[t._id]={container:null,winding:t.isClockwise()?1:-1,index:e}}),{}),a=t.slice().sort((function(t,e){return i(e.getArea())-i(t.getArea())})),o=a[0];null==n&&(n=o.isClockwise());for(var h=0;h<s;h++){for(var c=a[h],u=r[c._id],p=c.getInteriorPoint(),d=0,f=h-1;f>=0;f--){var g=a[f];if(g.contains(p)){var _=r[g._id];d=_.winding,u.winding+=d,u.container=_.exclude?_.container:g;break}}if(e(u.winding)===e(d))u.exclude=!0,t[u.index]=null;else{var v=u.container;c.setClockwise(v?!v.isClockwise():n)}}}return t}function d(t,e,i){var n,s,r,a=e&&[],o=!1,h=i||[],l=i&&{};function p(t){return t._path._id+"."+t._segment1._index}for(var d=(i&&i.length)-1;d>=0;d--){(f=i[d])._path&&(l[p(f)]=!0)}for(d=t.length-1;d>=0;d--){var f,g,_=t[d],v=_._time,m=v,x=e&&!e(_);if((f=_._curve)&&(f!==s?(o=!f.hasHandles()||l&&l[p(f)],n=[],r=null,s=f):r>=1e-8&&(v/=r)),x)n&&n.push(_);else{if(e&&a.unshift(_),r=m,v<1e-8)g=f._segment1;else if(v>1-1e-8)g=f._segment2;else{var y=f.divideAtTime(v,!0);o&&h.push(f,y),g=y._segment1;for(var w=n.length-1;w>=0;w--){var b=n[w];b._time=(b._time-v)/(1-v)}}_._setSegment(g);var k=g._intersection,C=_._intersection;if(k){c(k,C);for(var S=k;S;)c(S._intersection,k),S=S._next}else g._intersection=C}}return i||u(h),a||t}function f(n,s,r,a,o){var h,c,l=r?1:0,u=1^l,p=[n.x,n.y],d=p[l],g=p[u],_=1e-6,v=d-1e-9,m=d+1e-9,x=0,y=0,w=0,b=0,k=!1,C=!1,S=1,I=[];function A(i){var c=i[u+0],p=i[u+6];if(!(g<t(c,p)||g>e(c,p))){var x=i[l+0],y=i[l+2],C=i[l+4],A=i[l+6];if(c!==p){var P=g===c?0:g===p?1:v>e(x,y,C,A)||m<t(x,y,C,A)?1:R.solveCubic(i,u,g,I,0,1)>0?I[0]:1,T=0===P?x:1===P?A:R.getPoint(i,P)[r?"y":"x"],E=c>p?1:-1,L=h[u]>h[u+6]?1:-1,M=h[l+6];return g!==c?(T<v?w+=E:T>m?b+=E:k=!0,T>d-_&&T<d+_&&(S/=2)):(E!==L?x<v?w+=E:x>m&&(b+=E):x!=M&&(M<m&&T>m?(b+=E,k=!0):M>v&&T<v&&(w+=E,k=!0)),S=0),h=i,!o&&T>v&&T<m&&0===R.getTangent(i,P)[r?"x":"y"]&&f(n,s,!r,a,!0)}(x<m&&A>v||A<m&&x>v)&&(k=!0)}}function P(i){var n=i[u+0],s=i[u+2],a=i[u+4],o=i[u+6];if(g<=e(n,s,a,o)&&g>=t(n,s,a,o))for(var h,c=i[l+0],p=i[l+2],d=i[l+4],f=i[l+6],_=v>e(c,p,d,f)||m<t(c,p,d,f)?[i]:R.getMonoCurves(i,r),x=0,y=_.length;x<y;x++)if(h=A(_[x]))return h}for(var T=0,E=s.length;T<E;T++){var L,M=s[T],O=M._path,N=M.getValues();if(!(T&&s[T-1]._path===O||(h=null,O._closed||(c=R.getValues(O.getLastCurve().getSegment2(),M.getSegment1(),null,!a))[u]!==c[u+6]&&(h=c),h))){h=N;for(var z=O.getLastCurve();z&&z!==M;){var V=z.getValues();if(V[u]!==V[u+6]){h=V;break}z=z.getPrevious()}}if(L=P(N))return L;if(T+1===E||s[T+1]._path!==O){if(c&&(L=P(c)))return L;!k||w||b||(w=b=O.isClockwise(a)^r?1:-1),x+=w,y+=b,w=b=0,k&&(C=!0,k=!1),c=null}}return x=i(x),y=i(y),{winding:e(x,y),windingL:x,windingR:y,quality:S,onPath:C}}function _(t,e,n,s,r){var a=[],o=t,h=0;do{var c=(x=t.getCurve()).getLength();a.push({segment:t,curve:x,length:c}),h+=c,t=t.getNext()}while(t&&!t._intersection&&t!==o);for(var l=[.5,.25,.75],u={winding:0,quality:-1},p=0;p<l.length&&u.quality<.5;p++){c=h*l[p];for(var d=0,_=a.length;d<_;d++){var v=a[d],m=v.length;if(c<=m){var x,y=(x=v.curve)._path,w=y._parent,b=w instanceof F?w:y,k=g.clamp(x.getTimeAt(c),1e-8,1-1e-8),C=x.getPointAtTime(k),S=i(x.getTangentAtTime(k).y)<Math.SQRT1_2,I=null;if(r.subtract&&n){var A=b===e?n._getWinding(C,S,!0):e._getWinding(C,S,!0);if(b===e&&A.winding||b===n&&!A.winding){if(A.quality<1)continue;I={winding:0,quality:1}}}(I=I||f(C,s,S,!0)).quality>u.quality&&(u=I);break}c-=m}}for(d=a.length-1;d>=0;d--)a[d].segment._winding=u}function v(t,e){var i,n=[];function s(t){var i;return!(!t||t._visited||e&&(!e[(i=t._winding||{}).winding]||e.unite&&2===i.winding&&i.windingL&&i.windingR))}function r(t){if(t)for(var e=0,n=i.length;e<n;e++)if(t===i[e])return!0;return!1}function a(t){for(var e=t._segments,i=0,n=e.length;i<n;i++)e[i]._visited=!0}function o(t,e){var n=t._intersection,a=n,o=[];function h(n,a){for(;n&&n!==a;){var h=n._segment,c=h&&h._path;if(c){var l=h.getNext()||c.getFirstSegment(),u=l._intersection;h!==t&&(r(h)||r(l)||l&&s(h)&&(s(l)||u&&s(u._segment)))&&o.push(h),e&&i.push(h)}n=n._next}}if(e&&(i=[t]),n){for(h(n);n&&n._prev;)n=n._prev;h(n,a)}return o}t.sort((function(t,e){var i=t._intersection,n=e._intersection,s=!(!i||!i._overlap),r=!(!n||!n._overlap),a=t._path,o=e._path;return s^r?s?1:-1:!i^!n?i?1:-1:a!==o?a._id-o._id:t._index-e._index}));for(var h=0,c=t.length;h<c;h++){var l,u,p,d=t[h],f=s(d),g=null,_=!1,v=!0,m=[];if(f&&d._path._overlapsOnly){var x=d._path,y=d._intersection._segment._path;x.compare(y)&&(x.getArea()&&n.push(x.clone(!1)),a(x),a(y),f=!1)}for(;f;){var w=!g,b=o(d,w),k=b.shift(),C=!(_=!w&&(r(d)||r(k)))&&k;if(w&&(g=new D(I.NO_INSERT),l=null),_){(d.isFirst()||d.isLast())&&(v=d._path._closed),d._visited=!0;break}if(C&&l&&(m.push(l),l=null),l||(C&&b.push(d),l={start:g._segments.length,crossings:b,visited:u=[],handleIn:p}),C&&(d=k),!s(d)){g.removeSegments(l.start);for(var S=0,A=u.length;S<A;S++)u[S]._visited=!1;u.length=0;do{(d=l&&l.crossings.shift())&&d._path||(d=null,(l=m.pop())&&(u=l.visited,p=l.handleIn))}while(l&&!s(d));if(!d)break}var P=d.getNext();g.add(new N(d._point,p,P&&d._handleOut)),d._visited=!0,u.push(d),d=P||d._path.getFirstSegment(),p=P&&P._handleIn}_&&(v&&(g.getFirstSegment().setHandleIn(p),g.setClosed(v)),0!==g.getArea()&&n.push(g))}return n}return{_getWinding:function(t,e,i){return f(t,this.getCurves(),e,i)},unite:function(t,e){return a(this,t,"unite",e)},intersect:function(t,e){return a(this,t,"intersect",e)},subtract:function(t,e){return a(this,t,"subtract",e)},exclude:function(t,e){return a(this,t,"exclude",e)},divide:function(t,e){return e&&(0==e.trace||e.stroke)?h(this,t,"divide"):r([this.subtract(t,e),this.intersect(t,e)],!0,this,t,e)},resolveCrossings:function(){var t=this._children,e=t||[this];function i(t,e){var i=t&&t._intersection;return i&&i._overlap&&i._path===e}var n=!1,s=!1,r=this.getIntersections(null,(function(t){return t.hasOverlap()&&(n=!0)||t.isCrossing()&&(s=!0)})),a=n&&s&&[];if(r=V.expand(r),n)for(var o=d(r,(function(t){return t.hasOverlap()}),a),h=o.length-1;h>=0;h--){var c=o[h],p=c._path,f=c._segment,g=f.getPrevious(),_=f.getNext();i(g,p)&&i(_,p)&&(f.remove(),g._handleOut._set(0,0),_._handleIn._set(0,0),g===f||g.getCurve().hasLength()||(_._handleIn.set(g._handleIn),g.remove()))}s&&(d(r,n&&function(t){var e=t.getCurve(),i=t.getSegment(),n=t._intersection,s=n._curve,r=n._segment;if(e&&s&&e._path&&s._path)return!0;i&&(i._intersection=null),r&&(r._intersection=null)},a),a&&u(a),e=v(l.each(e,(function(t){l.push(this,t._segments)}),[])));var m,x=e.length;return x>1&&t?(e!==t&&this.setChildren(e),m=this):1!==x||t||(e[0]!==this&&this.setSegments(e[0].removeSegments()),m=this),m||((m=new F(I.NO_INSERT)).addChildren(e),(m=m.reduce()).copyAttributes(this),this.replaceWith(m)),m},reorient:function(t,e){var i=this._children;return i&&i.length?this.setChildren(p(this.removeChildren(),(function(e){return!!(t?e:1&e)}),e)):e!==o&&this.setClockwise(e),this},getInteriorPoint:function(){var i=this.getBounds().getCenter(!0);if(!this.contains(i)){for(var n=this.getCurves(),s=i.y,r=[],a=[],o=0,h=n.length;o<h;o++){var c=n[o].getValues(),l=c[1],u=c[3],p=c[5],d=c[7];if(s>=t(l,u,p,d)&&s<=e(l,u,p,d))for(var f=R.getMonoCurves(c),g=0,_=f.length;g<_;g++){var v=f[g],m=v[1],x=v[7];if(m!==x&&(s>=m&&s<=x||s>=x&&s<=m)){var y=s===m?v[0]:s===x?v[6]:1===R.solveCubic(v,1,s,a,0,1)?R.getPoint(v,a[0]).x:(v[0]+v[6])/2;r.push(y)}}}r.length>1&&(r.sort((function(t,e){return t-e})),i.x=(r[0]+r[1])/2)}return i}}});var j=l.extend({_class:"PathFlattener",initialize:function(t,e,i,n,s){var r,a=[],o=[],h=0,c=1/(i||32),l=t._segments,u=l[0];function p(t,i){var r=R.getValues(t,i,s);a.push(r),function t(i,s,r,a){if(!(a-r>c)||n&&R.isStraight(i)||R.isFlatEnough(i,e||.25)){var l=i[6]-i[0],u=i[7]-i[1],p=Math.sqrt(l*l+u*u);p>0&&(h+=p,o.push({offset:h,curve:i,index:s,time:a}))}else{var d=R.subdivide(i,.5),f=(r+a)/2;t(d[0],s,r,f),t(d[1],s,f,a)}}(r,t._index,0,1)}for(var d=1,f=l.length;d<f;d++)p(u,r=l[d]),u=r;t._closed&&p(r||u,l[0]),this.curves=a,this.parts=o,this.length=h,this.index=0},_get:function(t){for(var e,i=this.parts,n=i.length,s=this.index;e=s,s&&!(i[--s].offset<t););for(;e<n;e++){var r=i[e];if(r.offset>=t){this.index=e;var a=i[e-1],o=a&&a.index===r.index?a.time:0,h=a?a.offset:0;return{index:r.index,time:o+(r.time-o)*(t-h)/(r.offset-h)}}}return{index:i[n-1].index,time:1}},drawPart:function(t,e,i){for(var n=this._get(e),s=this._get(i),r=n.index,a=s.index;r<=a;r++){var o=R.getPart(this.curves[r],r===n.index?n.time:0,r===s.index?s.time:1);r===n.index&&t.moveTo(o[0],o[1]),t.bezierCurveTo.apply(t,o.slice(2))}}},l.each(R._evaluateMethods,(function(t){this[t+"At"]=function(e){var i=this._get(e);return R[t](this.curves[i.index],i.time)}}),{})),q=l.extend({initialize:function(t){for(var e,i=this.points=[],n=t._segments,s=t._closed,r=0,a=n.length;r<a;r++){var o=n[r].point;e&&e.equals(o)||i.push(e=o.clone())}s&&(i.unshift(i[i.length-1]),i.push(i[1])),this.closed=s},fit:function(t){var e=this.points,i=e.length,n=null;return i>0&&(n=[new N(e[0])],i>1&&(this.fitCubic(n,t,0,i-1,e[1].subtract(e[0]),e[i-2].subtract(e[i-1])),this.closed&&(n.shift(),n.pop()))),n},fitCubic:function(t,e,i,n,s,r){var a=this.points;if(n-i!=1){for(var o,h=this.chordLengthParameterize(i,n),c=Math.max(e,e*e),l=!0,u=0;u<=4;u++){var p=this.generateBezier(i,n,h,s,r),d=this.findMaxError(i,n,p,h);if(d.error<e&&l)return void this.addCurve(t,p);if(o=d.index,d.error>=c)break;l=this.reparameterize(i,n,h,p),c=d.error}var f=a[o-1].subtract(a[o+1]);this.fitCubic(t,e,i,o,s,f),this.fitCubic(t,e,o,n,f.negate(),r)}else{var g=a[i],_=a[n],v=g.getDistance(_)/3;this.addCurve(t,[g,g.add(s.normalize(v)),_.add(r.normalize(v)),_])}},addCurve:function(t,e){t[t.length-1].setHandleOut(e[1].subtract(e[0])),t.push(new N(e[3],e[2].subtract(e[3])))},generateBezier:function(t,e,i,n,s){for(var r=Math.abs,a=this.points,o=a[t],h=a[e],c=[[0,0],[0,0]],l=[0,0],u=0,p=e-t+1;u<p;u++){var d=i[u],f=1-d,g=3*d*f,_=f*f*f,v=g*f,m=g*d,x=d*d*d,y=n.normalize(v),w=s.normalize(m),b=a[t+u].subtract(o.multiply(_+v)).subtract(h.multiply(m+x));c[0][0]+=y.dot(y),c[0][1]+=y.dot(w),c[1][0]=c[0][1],c[1][1]+=w.dot(w),l[0]+=y.dot(b),l[1]+=w.dot(b)}var k,C,S=c[0][0]*c[1][1]-c[1][0]*c[0][1];if(r(S)>1e-12){var I=c[0][0]*l[1]-c[1][0]*l[0];k=(l[0]*c[1][1]-l[1]*c[0][1])/S,C=I/S}else{var A=c[0][0]+c[0][1],P=c[1][0]+c[1][1];k=C=r(A)>1e-12?l[0]/A:r(P)>1e-12?l[1]/P:0}var T,E,L=h.getDistance(o),M=1e-12*L;if(k<M||C<M)k=C=L/3;else{var O=h.subtract(o);T=n.normalize(k),E=s.normalize(C),T.dot(O)-E.dot(O)>L*L&&(k=C=L/3,T=E=null)}return[o,o.add(T||n.normalize(k)),h.add(E||s.normalize(C)),h]},reparameterize:function(t,e,i,n){for(var s=t;s<=e;s++)i[s-t]=this.findRoot(n,this.points[s],i[s-t]);s=1;for(var r=i.length;s<r;s++)if(i[s]<=i[s-1])return!1;return!0},findRoot:function(t,e,i){for(var n=[],s=[],r=0;r<=2;r++)n[r]=t[r+1].subtract(t[r]).multiply(3);for(r=0;r<=1;r++)s[r]=n[r+1].subtract(n[r]).multiply(2);var a=this.evaluate(3,t,i),o=this.evaluate(2,n,i),h=this.evaluate(1,s,i),c=a.subtract(e),l=o.dot(o)+c.dot(h);return g.isZero(l)?i:i-c.dot(o)/l},evaluate:function(t,e,i){for(var n=e.slice(),s=1;s<=t;s++)for(var r=0;r<=t-s;r++)n[r]=n[r].multiply(1-i).add(n[r+1].multiply(i));return n[0]},chordLengthParameterize:function(t,e){for(var i=[0],n=t+1;n<=e;n++)i[n-t]=i[n-t-1]+this.points[n].getDistance(this.points[n-1]);n=1;for(var s=e-t;n<=s;n++)i[n]/=i[s];return i},findMaxError:function(t,e,i,n){for(var s=Math.floor((e-t+1)/2),r=0,a=t+1;a<e;a++){var o=this.evaluate(3,i,n[a-t]).subtract(this.points[a]),h=o.x*o.x+o.y*o.y;h>=r&&(r=h,s=a)}return{error:r,index:s}}}),U=I.extend({_class:"TextItem",_applyMatrix:!1,_canApplyMatrix:!1,_serializeFields:{content:null},_boundsOptions:{stroke:!1,handle:!1},initialize:function(t){this._content="",this._lines=[];var e=t&&l.isPlainObject(t)&&t.x===o&&t.y===o;this._initialize(e&&t,!e&&v.read(arguments))},_equals:function(t){return this._content===t._content},copyContent:function(t){this.setContent(t._content)},getContent:function(){return this._content},setContent:function(t){this._content=""+t,this._lines=this._content.split(/\r\n|\n|\r/gm),this._changed(521)},isEmpty:function(){return!this._content},getCharacterStyle:"#getStyle",setCharacterStyle:"#setStyle",getParagraphStyle:"#getStyle",setParagraphStyle:"#setStyle"}),H=U.extend({_class:"PointText",initialize:function(){U.apply(this,arguments)},getPoint:function(){var t=this._matrix.getTranslation();return new m(t.x,t.y,this,"setPoint")},setPoint:function(){var t=v.read(arguments);this.translate(t.subtract(this._matrix.getTranslation()))},_draw:function(t,e,i){if(this._content){this._setStyles(t,e,i);var n=this._lines,s=this._style,r=s.hasFill(),a=s.hasStroke(),o=s.getLeading(),h=t.shadowColor;t.font=s.getFontStyle(),t.textAlign=s.getJustification();for(var c=0,l=n.length;c<l;c++){t.shadowColor=h;var u=n[c];r&&(t.fillText(u,0,0),t.shadowColor="rgba(0,0,0,0)"),a&&t.strokeText(u,0,0),t.translate(0,o)}}},_getBounds:function(t,e){var i=this._style,n=this._lines,s=n.length,r=i.getJustification(),a=i.getLeading(),o=this.getView().getTextWidth(i.getFontStyle(),n),h=0;"left"!==r&&(h-=o/("center"===r?2:1));var c=new w(h,s?-.75*a:0,o,s*a);return t?t._transformBounds(c,c):c}}),W=l.extend(new function(){var t,e={gray:["gray"],rgb:["red","green","blue"],hsb:["hue","saturation","brightness"],hsl:["hue","saturation","lightness"],gradient:["gradient","origin","destination","highlight"]},i={},n={transparent:[0,0,0,0]};function s(e){var i,s=e.match(/^#([\da-f]{2})([\da-f]{2})([\da-f]{2})([\da-f]{2})?$/i)||e.match(/^#([\da-f])([\da-f])([\da-f])([\da-f])?$/i),r="rgb";if(s){var a=s[4]?4:3;i=new Array(a);for(var o=0;o<a;o++){var c=s[o+1];i[o]=parseInt(1==c.length?c+c:c,16)/255}}else if(s=e.match(/^(rgb|hsl)a?\((.*)\)$/)){r=s[1],i=s[2].trim().split(/[,\s]+/g);for(var l="hsl"===r,u=(o=0,Math.min(i.length,4));o<u;o++){var p=i[o];c=parseFloat(p);if(l)if(0===o){var d=p.match(/([a-z]*)$/)[1];c*={turn:360,rad:180/Math.PI,grad:.9}[d]||1}else o<3&&(c/=100);else o<3&&(c/=255);i[o]=c}}else{var f=n[e];if(!f)if(h){t||((t=ot.getContext(1,1)).globalCompositeOperation="copy"),t.fillStyle="rgba(0,0,0,0)",t.fillStyle=e,t.fillRect(0,0,1,1);var g=t.getImageData(0,0,1,1).data;f=n[e]=[g[0]/255,g[1]/255,g[2]/255]}else f=[0,0,0];i=f.slice()}return[r,i]}var r=[[0,3,1],[2,0,1],[1,0,3],[1,2,0],[3,1,0],[0,1,2]],a={"rgb-hsb":function(t,e,i){var n=Math.max(t,e,i),s=n-Math.min(t,e,i);return[0===s?0:60*(n==t?(e-i)/s+(e<i?6:0):n==e?(i-t)/s+2:(t-e)/s+4),0===n?0:s/n,n]},"hsb-rgb":function(t,e,i){var n,s=(t=(t/60%6+6)%6)-(n=Math.floor(t)),a=[i,i*(1-e),i*(1-e*s),i*(1-e*(1-s))];return[a[(n=r[n])[0]],a[n[1]],a[n[2]]]},"rgb-hsl":function(t,e,i){var n=Math.max(t,e,i),s=Math.min(t,e,i),r=n-s,a=0===r,o=(n+s)/2;return[a?0:60*(n==t?(e-i)/r+(e<i?6:0):n==e?(i-t)/r+2:(t-e)/r+4),a?0:o<.5?r/(n+s):r/(2-n-s),o]},"hsl-rgb":function(t,e,i){if(0===e)return[i,i,i];for(var n=[(t=(t/360%1+1)%1)+1/3,t,t-1/3],s=i<.5?i*(1+e):i+e-i*e,r=2*i-s,a=[],o=0;o<3;o++){var h=n[o];h<0&&(h+=1),h>1&&(h-=1),a[o]=6*h<1?r+6*(s-r)*h:2*h<1?s:3*h<2?r+(s-r)*(2/3-h)*6:r}return a},"rgb-gray":function(t,e,i){return[.2989*t+.587*e+.114*i]},"gray-rgb":function(t){return[t,t,t]},"gray-hsb":function(t){return[0,0,t]},"gray-hsl":function(t){return[0,0,t]},"gradient-rgb":function(){return[]},"rgb-gradient":function(){return[]}};return l.each(e,(function(t,n){i[n]=[],l.each(t,(function(t,s){var r=l.capitalize(t),a=/^(hue|saturation)$/.test(t),o=i[n][s]="gradient"===n?"gradient"===t?function(t){var e=this._components[0];return e!==(t=G.read(Array.isArray(t)?t:arguments,0,{readNull:!0}))&&(e&&e._removeOwner(this),t&&t._addOwner(this)),t}:function(){return v.read(arguments,0,{readNull:"highlight"===t,clone:!0})}:function(t){return null==t||isNaN(t)?0:+t};this["get"+r]=function(){return this._type===n||a&&/^hs[bl]$/.test(this._type)?this._components[s]:this._convert(n)[s]},this["set"+r]=function(t){this._type===n||a&&/^hs[bl]$/.test(this._type)||(this._components=this._convert(n),this._properties=e[n],this._type=n),this._components[s]=o.call(this,t),this._changed()}}),this)}),{_class:"Color",_readIndex:!0,initialize:function t(n){var r,a,o,h,c=arguments,u=this.__read,p=0;Array.isArray(n)&&(n=(c=n)[0]);var d=null!=n&&typeof n;if("string"===d&&n in e&&(r=n,n=c[1],Array.isArray(n)?(a=n,o=c[2]):(u&&(p=1),c=l.slice(c,1),d=typeof n)),!a){if(h="number"===d?c:"object"===d&&null!=n.length?n:null){r||(r=h.length>=3?"rgb":"gray");var f=e[r].length;o=h[f],u&&(p+=h===arguments?f+(null!=o?1:0):1),h.length>f&&(h=l.slice(h,0,f))}else if("string"===d){var g=s(n);r=g[0],4===(a=g[1]).length&&(o=a[3],a.length--)}else if("object"===d)if(n.constructor===t){if(r=n._type,a=n._components.slice(),o=n._alpha,"gradient"===r)for(var _=1,v=a.length;_<v;_++){var m=a[_];m&&(a[_]=m.clone())}}else if(n.constructor===G)r="gradient",h=c;else{var x=e[r="hue"in n?"lightness"in n?"hsl":"hsb":"gradient"in n||"stops"in n||"radial"in n?"gradient":"gray"in n?"gray":"rgb"],y=i[r];this._components=a=[];for(_=0,v=x.length;_<v;_++){null==(w=n[x[_]])&&!_&&"gradient"===r&&"stops"in n&&(w={stops:n.stops,radial:n.radial}),null!=(w=y[_].call(this,w))&&(a[_]=w)}o=n.alpha}u&&r&&(p=1)}if(this._type=r||"rgb",!a){this._components=a=[];for(_=0,v=(y=i[this._type]).length;_<v;_++){var w;null!=(w=y[_].call(this,h&&h[_]))&&(a[_]=w)}}return this._components=a,this._properties=e[this._type],this._alpha=o,u&&(this.__read=p),this},set:"#initialize",_serialize:function(t,e){var i=this.getComponents();return l.serialize(/^(gray|rgb)$/.test(this._type)?i:[this._type].concat(i),t,!0,e)},_changed:function(){this._canvasStyle=null,this._owner&&(this._setter?this._owner[this._setter](this):this._owner._changed(129))},_convert:function(t){var e;return this._type===t?this._components.slice():(e=a[this._type+"-"+t])?e.apply(this,this._components):a["rgb-"+t].apply(this,a[this._type+"-rgb"].apply(this,this._components))},convert:function(t){return new W(t,this._convert(t),this._alpha)},getType:function(){return this._type},setType:function(t){this._components=this._convert(t),this._properties=e[t],this._type=t},getComponents:function(){var t=this._components.slice();return null!=this._alpha&&t.push(this._alpha),t},getAlpha:function(){return null!=this._alpha?this._alpha:1},setAlpha:function(t){this._alpha=null==t?null:Math.min(Math.max(t,0),1),this._changed()},hasAlpha:function(){return null!=this._alpha},equals:function(t){var e=l.isPlainValue(t,!0)?W.read(arguments):t;return e===this||e&&this._class===e._class&&this._type===e._type&&this.getAlpha()===e.getAlpha()&&l.equals(this._components,e._components)||!1},toString:function(){for(var t=this._properties,e=[],i="gradient"===this._type,n=f.instance,s=0,r=t.length;s<r;s++){var a=this._components[s];null!=a&&e.push(t[s]+": "+(i?a:n.number(a)))}return null!=this._alpha&&e.push("alpha: "+n.number(this._alpha)),"{ "+e.join(", ")+" }"},toCSS:function(t){var e=this._convert("rgb"),i=t||null==this._alpha?1:this._alpha;function n(t){return Math.round(255*(t<0?0:t>1?1:t))}return e=[n(e[0]),n(e[1]),n(e[2])],i<1&&e.push(i<0?0:i),t?"#"+((1<<24)+(e[0]<<16)+(e[1]<<8)+e[2]).toString(16).slice(1):(4==e.length?"rgba(":"rgb(")+e.join(",")+")"},toCanvasStyle:function(t,e){if(this._canvasStyle)return this._canvasStyle;if("gradient"!==this._type)return this._canvasStyle=this.toCSS();var i,n=this._components,s=n[0],r=s._stops,a=n[1],o=n[2],h=n[3],c=e&&e.inverted();if(c&&(a=c._transformPoint(a),o=c._transformPoint(o),h&&(h=c._transformPoint(h))),s._radial){var l=o.getDistance(a);if(h){var u=h.subtract(a);u.getLength()>l&&(h=a.add(u.normalize(l-.1)))}var p=h||a;i=t.createRadialGradient(p.x,p.y,0,a.x,a.y,l)}else i=t.createLinearGradient(a.x,a.y,o.x,o.y);for(var d=0,f=r.length;d<f;d++){var g=r[d],_=g._offset;i.addColorStop(null==_?d/(f-1):_,g._color.toCanvasStyle())}return this._canvasStyle=i},transform:function(t){if("gradient"===this._type){for(var e=this._components,i=1,n=e.length;i<n;i++){var s=e[i];t._transformPoint(s,s,!0)}this._changed()}},statics:{_types:e,random:function(){var t=Math.random;return new W(t(),t(),t())},_setOwner:function(t,e,i){return t&&(t._owner&&e&&t._owner!==e&&(t=t.clone()),!t._owner^!e&&(t._owner=e||null,t._setter=i||null)),t}}})},new function(){return l.each({add:function(t,e){return t+e},subtract:function(t,e){return t-e},multiply:function(t,e){return t*e},divide:function(t,e){return t/e}},(function(t,e){this[e]=function(e){e=W.read(arguments);for(var i=this._type,n=this._components,s=e._convert(i),r=0,a=n.length;r<a;r++)s[r]=t(n[r],s[r]);return new W(i,s,null!=this._alpha?t(this._alpha,e.getAlpha()):null)}}),{})}),G=l.extend({_class:"Gradient",initialize:function(t,e){this._id=_.get(),t&&l.isPlainObject(t)&&(this.set(t),t=e=null),null==this._stops&&this.setStops(t||["white","black"]),null==this._radial&&this.setRadial("string"==typeof e&&"radial"===e||e||!1)},_serialize:function(t,e){return e.add(this,(function(){return l.serialize([this._stops,this._radial],t,!0,e)}))},_changed:function(){for(var t=0,e=this._owners&&this._owners.length;t<e;t++)this._owners[t]._changed()},_addOwner:function(t){this._owners||(this._owners=[]),this._owners.push(t)},_removeOwner:function(t){var e=this._owners?this._owners.indexOf(t):-1;-1!=e&&(this._owners.splice(e,1),this._owners.length||(this._owners=o))},clone:function(){for(var t=[],e=0,i=this._stops.length;e<i;e++)t[e]=this._stops[e].clone();return new G(t,this._radial)},getStops:function(){return this._stops},setStops:function(t){if(t.length<2)throw new Error("Gradient stop list needs to contain at least two stops.");var e=this._stops;if(e)for(var i=0,n=e.length;i<n;i++)e[i]._owner=o;for(i=0,n=(e=this._stops=Z.readList(t,0,{clone:!0})).length;i<n;i++)e[i]._owner=this;this._changed()},getRadial:function(){return this._radial},setRadial:function(t){this._radial=t,this._changed()},equals:function(t){if(t===this)return!0;if(t&&this._class===t._class){var e=this._stops,i=t._stops,n=e.length;if(n===i.length){for(var s=0;s<n;s++)if(!e[s].equals(i[s]))return!1;return!0}}return!1}}),Z=l.extend({_class:"GradientStop",initialize:function(t,e){var i=t,n=e;"object"==typeof t&&e===o&&(Array.isArray(t)&&"number"!=typeof t[0]?(i=t[0],n=t[1]):("color"in t||"offset"in t||"rampPoint"in t)&&(i=t.color,n=t.offset||t.rampPoint||0)),this.setColor(i),this.setOffset(n)},clone:function(){return new Z(this._color.clone(),this._offset)},_serialize:function(t,e){var i=this._color,n=this._offset;return l.serialize(null==n?[i]:[i,n],t,!0,e)},_changed:function(){this._owner&&this._owner._changed(129)},getOffset:function(){return this._offset},setOffset:function(t){this._offset=t,this._changed()},getRampPoint:"#getOffset",setRampPoint:"#setOffset",getColor:function(){return this._color},setColor:function(){W._setOwner(this._color,null),this._color=W._setOwner(W.read(arguments,0),this,"setColor"),this._changed()},equals:function(t){return t===this||t&&this._class===t._class&&this._color.equals(t._color)&&this._offset==t._offset||!1}}),$=l.extend(new function(){var t={fillColor:null,fillRule:"nonzero",strokeColor:null,strokeWidth:1,strokeCap:"butt",strokeJoin:"miter",strokeScaling:!0,miterLimit:10,dashOffset:0,dashArray:[],shadowColor:null,shadowBlur:0,shadowOffset:new v,selectedColor:null},e=l.set({},t,{fontFamily:"sans-serif",fontWeight:"normal",fontSize:12,leading:null,justification:"left"}),i=l.set({},e,{fillColor:new W}),n={strokeWidth:193,strokeCap:193,strokeJoin:193,strokeScaling:201,miterLimit:193,fontFamily:9,fontWeight:9,fontSize:9,font:9,leading:9,justification:9},s={beans:!0},r={_class:"Style",beans:!0,initialize:function(n,s,r){this._values={},this._owner=s,this._project=s&&s._project||r||ut.project,this._defaults=!s||s instanceof A?e:s instanceof U?i:t,n&&this.set(n)}};return l.each(e,(function(t,e){var i=/Color$/.test(e),a="shadowOffset"===e,h=l.capitalize(e),c=n[e],u="set"+h,p="get"+h;r[u]=function(t){var n=this._owner,s=n&&n._children,r=s&&s.length>0&&!(n instanceof F);if(r)for(var a=0,o=s.length;a<o;a++)s[a]._style[u](t);if(("selectedColor"===e||!r)&&e in this._defaults){var h=this._values[e];h!==t&&(i&&(h&&(W._setOwner(h,null),h._canvasStyle=null),t&&t.constructor===W&&(t=W._setOwner(t,n,r&&u))),this._values[e]=t,n&&n._changed(c||129))}},r[p]=function(t){var n=this._owner,s=n&&n._children,r=s&&s.length>0&&!(n instanceof F);if(r&&!t)for(var h=0,c=s.length;h<c;h++){var d=s[h]._style[p]();if(h){if(!l.equals(f,d))return o}else f=d}else if(e in this._defaults){var f;if((f=this._values[e])===o)(f=this._defaults[e])&&f.clone&&(f=f.clone());else{var g=i?W:a?v:null;!g||f&&f.constructor===g||(this._values[e]=f=g.read([f],0,{readNull:!0,clone:!0}))}}return f&&i&&(f=W._setOwner(f,n,r&&u)),f},s[p]=function(t){return this._style[p](t)},s[u]=function(t){this._style[u](t)}})),l.each({Font:"FontFamily",WindingRule:"FillRule"},(function(t,e){var i="get"+e,n="set"+e;r[i]=s[i]="#get"+t,r[n]=s[n]="#set"+t})),I.inject(s),r},{set:function(t){var e=t instanceof $,i=e?t._values:t;if(i)for(var n in i)if(n in this._defaults){var s=i[n];this[n]=s&&e&&s.clone?s.clone():s}},equals:function(t){function e(t,e,i){var n=t._values,s=e._values,r=e._defaults;for(var a in n){var h=n[a],c=s[a];if(!(i&&a in s||l.equals(h,c===o?r[a]:c)))return!1}return!0}return t===this||t&&this._class===t._class&&e(this,t)&&e(t,this,!0)||!1},_dispose:function(){var t;(t=this.getFillColor())&&(t._canvasStyle=null),(t=this.getStrokeColor())&&(t._canvasStyle=null),(t=this.getShadowColor())&&(t._canvasStyle=null)},hasFill:function(){var t=this.getFillColor();return!!t&&t.alpha>0},hasStroke:function(){var t=this.getStrokeColor();return!!t&&t.alpha>0&&this.getStrokeWidth()>0},hasShadow:function(){var t=this.getShadowColor();return!!t&&t.alpha>0&&(this.getShadowBlur()>0||!this.getShadowOffset().isZero())},getView:function(){return this._project._view},getFontStyle:function(){var t=this.getFontSize();return this.getFontWeight()+" "+t+(/[a-z]/i.test(t+"")?" ":"px ")+this.getFontFamily()},getFont:"#getFontFamily",setFont:"#setFontFamily",getLeading:function t(){var e=t.base.call(this),i=this.getFontSize();return/pt|em|%|px/.test(i)&&(i=this.getView().getPixelSize(i)),null!=e?e:1.2*i}}),Y=new function(){function t(t,e,i,n){for(var s=["","webkit","moz","Moz","ms","o"],r=e[0].toUpperCase()+e.substring(1),a=0;a<6;a++){var o=s[a],h=o?o+r:e;if(h in t){if(!i)return t[h];t[h]=n;break}}}return{getStyles:function(t){var e=t&&9!==t.nodeType?t.ownerDocument:t,i=e&&e.defaultView;return i&&i.getComputedStyle(t,"")},getBounds:function(t,e){var i,n=t.ownerDocument,s=n.body,r=n.documentElement;try{i=t.getBoundingClientRect()}catch(t){i={left:0,top:0,width:0,height:0}}var a=i.left-(r.clientLeft||s.clientLeft||0),o=i.top-(r.clientTop||s.clientTop||0);if(!e){var h=n.defaultView;a+=h.pageXOffset||r.scrollLeft||s.scrollLeft,o+=h.pageYOffset||r.scrollTop||s.scrollTop}return new w(a,o,i.width,i.height)},getViewportBounds:function(t){var e=t.ownerDocument,i=e.defaultView,n=e.documentElement;return new w(0,0,i.innerWidth||n.clientWidth,i.innerHeight||n.clientHeight)},getOffset:function(t,e){return Y.getBounds(t,e).getPoint()},getSize:function(t){return Y.getBounds(t,!0).getSize()},isInvisible:function(t){return Y.getSize(t).equals(new x(0,0))},isInView:function(t){return!Y.isInvisible(t)&&Y.getViewportBounds(t).intersects(Y.getBounds(t,!0))},isInserted:function(t){return c.body.contains(t)},getPrefixed:function(e,i){return e&&t(e,i)},setPrefixed:function(e,i,n){if("object"==typeof i)for(var s in i)t(e,s,!0,i[s]);else t(e,i,!0,n)}}},K={add:function(t,e){if(t)for(var i in e)for(var n=e[i],s=i.split(/[\s,]+/g),r=0,a=s.length;r<a;r++){var o=s[r],h=t===c&&("touchstart"===o||"touchmove"===o)&&{passive:!1};t.addEventListener(o,n,h)}},remove:function(t,e){if(t)for(var i in e)for(var n=e[i],s=i.split(/[\s,]+/g),r=0,a=s.length;r<a;r++)t.removeEventListener(s[r],n,!1)},getPoint:function(t){var e=t.targetTouches?t.targetTouches.length?t.targetTouches[0]:t.changedTouches[0]:t;return new v(e.pageX||e.clientX+c.documentElement.scrollLeft,e.pageY||e.clientY+c.documentElement.scrollTop)},getTarget:function(t){return t.target||t.srcElement},getRelatedTarget:function(t){return t.relatedTarget||t.toElement},getOffset:function(t,e){return K.getPoint(t).subtract(Y.getOffset(e||K.getTarget(t)))}};K.requestAnimationFrame=new function(){var t,e=Y.getPrefixed(h,"requestAnimationFrame"),i=!1,n=[];function s(){var t=n;n=[];for(var r=0,a=t.length;r<a;r++)t[r]();(i=e&&n.length)&&e(s)}return function(r){n.push(r),e?i||(e(s),i=!0):t||(t=setInterval(s,1e3/60))}};var Q=l.extend(u,{_class:"View",initialize:function t(e,i){function n(t){return i[t]||parseInt(i.getAttribute(t),10)}function s(){var t=Y.getSize(i);return t.isNaN()||t.isZero()?new x(n("width"),n("height")):t}var r;if(h&&i){this._id=i.getAttribute("id"),null==this._id&&i.setAttribute("id",this._id="view-"+t._id++),K.add(i,this._viewEvents);if(Y.setPrefixed(i.style,{userDrag:"none",userSelect:"none",touchCallout:"none",contentZooming:"none",tapHighlightColor:"rgba(0,0,0,0)"}),p.hasAttribute(i,"resize")){var a=this;K.add(h,this._windowEvents={resize:function(){a.setViewSize(s())}})}if(r=s(),p.hasAttribute(i,"stats")&&"undefined"!=typeof Stats){this._stats=new Stats;var o=this._stats.domElement,l=o.style,u=Y.getOffset(i);l.position="absolute",l.left=u.x+"px",l.top=u.y+"px",c.body.appendChild(o)}}else r=new x(i),i=null;this._project=e,this._scope=e._scope,this._element=i,this._pixelRatio||(this._pixelRatio=h&&h.devicePixelRatio||1),this._setElementSize(r.width,r.height),this._viewSize=r,t._views.push(this),t._viewsById[this._id]=this,(this._matrix=new k)._owner=this,t._focused||(t._focused=this),this._frameItems={},this._frameItemCount=0,this._itemEvents={native:{},virtual:{}},this._autoUpdate=!ut.agent.node,this._needsUpdate=!1},remove:function(){if(!this._project)return!1;Q._focused===this&&(Q._focused=null),Q._views.splice(Q._views.indexOf(this),1),delete Q._viewsById[this._id];var t=this._project;return t._view===this&&(t._view=null),K.remove(this._element,this._viewEvents),K.remove(h,this._windowEvents),this._element=this._project=null,this.off("frame"),this._animate=!1,this._frameItems={},!0},_events:l.each(I._itemHandlers.concat(["onResize","onKeyDown","onKeyUp"]),(function(t){this[t]={}}),{onFrame:{install:function(){this.play()},uninstall:function(){this.pause()}}}),_animate:!1,_time:0,_count:0,getAutoUpdate:function(){return this._autoUpdate},setAutoUpdate:function(t){this._autoUpdate=t,t&&this.requestUpdate()},update:function(){},draw:function(){this.update()},requestUpdate:function(){if(!this._requested){var t=this;K.requestAnimationFrame((function(){if(t._requested=!1,t._animate){t.requestUpdate();var e=t._element;Y.getPrefixed(c,"hidden")&&"true"!==p.getAttribute(e,"keepalive")||!Y.isInView(e)||t._handleFrame()}t._autoUpdate&&t.update()})),this._requested=!0}},play:function(){this._animate=!0,this.requestUpdate()},pause:function(){this._animate=!1},_handleFrame:function(){ut=this._scope;var t=Date.now()/1e3,e=this._last?t-this._last:0;this._last=t,this.emit("frame",new l({delta:e,time:this._time+=e,count:this._count++})),this._stats&&this._stats.update()},_animateItem:function(t,e){var i=this._frameItems;e?(i[t._id]={item:t,time:0,count:0},1==++this._frameItemCount&&this.on("frame",this._handleFrameItems)):(delete i[t._id],0==--this._frameItemCount&&this.off("frame",this._handleFrameItems))},_handleFrameItems:function(t){for(var e in this._frameItems){var i=this._frameItems[e];i.item.emit("frame",new l(t,{time:i.time+=t.delta,count:i.count++}))}},_changed:function(){this._project._changed(4097),this._bounds=this._decomposed=o},getElement:function(){return this._element},getPixelRatio:function(){return this._pixelRatio},getResolution:function(){return 72*this._pixelRatio},getViewSize:function(){var t=this._viewSize;return new y(t.width,t.height,this,"setViewSize")},setViewSize:function(){var t=x.read(arguments),e=t.subtract(this._viewSize);e.isZero()||(this._setElementSize(t.width,t.height),this._viewSize.set(t),this._changed(),this.emit("resize",{size:t,delta:e}),this._autoUpdate&&this.update())},_setElementSize:function(t,e){var i=this._element;i&&(i.width!==t&&(i.width=t),i.height!==e&&(i.height=e))},getBounds:function(){return this._bounds||(this._bounds=this._matrix.inverted()._transformBounds(new w(new v,this._viewSize))),this._bounds},getSize:function(){return this.getBounds().getSize()},isVisible:function(){return Y.isInView(this._element)},isInserted:function(){return Y.isInserted(this._element)},getPixelSize:function(t){var e,i=this._element;if(i){var n=i.parentNode,s=c.createElement("div");s.style.fontSize=t,n.appendChild(s),e=parseFloat(Y.getStyles(s).fontSize),n.removeChild(s)}else e=parseFloat(e);return e},getTextWidth:function(t,e){return 0}},l.each(["rotate","scale","shear","skew"],(function(t){var e="rotate"===t;this[t]=function(){var i=(e?l:v).read(arguments),n=v.read(arguments,0,{readNull:!0});return this.transform((new k)[t](i,n||this.getCenter(!0)))}}),{_decompose:function(){return this._decomposed||(this._decomposed=this._matrix.decompose())},translate:function(){var t=new k;return this.transform(t.translate.apply(t,arguments))},getCenter:function(){return this.getBounds().getCenter()},setCenter:function(){var t=v.read(arguments);this.translate(this.getCenter().subtract(t))},getZoom:function(){var t=this._decompose().scaling;return(t.x+t.y)/2},setZoom:function(t){this.transform((new k).scale(t/this.getZoom(),this.getCenter()))},getRotation:function(){return this._decompose().rotation},setRotation:function(t){var e=this.getRotation();null!=e&&null!=t&&this.rotate(t-e)},getScaling:function(){var t=this._decompose().scaling;return new m(t.x,t.y,this,"setScaling")},setScaling:function(){var t=this.getScaling(),e=v.read(arguments,0,{clone:!0,readNull:!0});t&&e&&this.scale(e.x/t.x,e.y/t.y)},getMatrix:function(){return this._matrix},setMatrix:function(){var t=this._matrix;t.initialize.apply(t,arguments)},transform:function(t){this._matrix.append(t)},scrollBy:function(){this.translate(v.read(arguments).negate())}}),{projectToView:function(){return this._matrix._transformPoint(v.read(arguments))},viewToProject:function(){return this._matrix._inverseTransform(v.read(arguments))},getEventPoint:function(t){return this.viewToProject(K.getOffset(t,this._element))}},{statics:{_views:[],_viewsById:{},_id:0,create:function(t,e){return c&&"string"==typeof e&&(e=c.getElementById(e)),new(h?X:Q)(t,e)}}},new function(){if(h){var t,e,i,n,s,r=!1,a=!1,o=h.navigator;o.pointerEnabled||o.msPointerEnabled?(i="pointerdown MSPointerDown",n="pointermove MSPointerMove",s="pointerup pointercancel MSPointerUp MSPointerCancel"):(i="touchstart",n="touchmove",s="touchend touchcancel","ontouchstart"in h&&o.userAgent.match(/mobile|tablet|ip(ad|hone|od)|android|silk/i)||(i+=" mousedown",n+=" mousemove",s+=" mouseup"));var l={},u={mouseout:function(t){var e=Q._focused,i=K.getRelatedTarget(t);if(e&&(!i||"HTML"===i.nodeName)){var n=K.getOffset(t,e._element),s=n.x,r=Math.abs,a=r(s),o=a-(1<<25);n.x=r(o)<a?o*(s<0?-1:1):s,A(e,t,e.viewToProject(n))}},scroll:I};l[i]=function(t){var e=Q._focused=S(t);r||(r=!0,e._handleMouseEvent("mousedown",t))},u[n]=function(i){var n=Q._focused;if(!a){var s=S(i);s?n!==s&&(n&&A(n,i),t||(t=n),n=Q._focused=e=s):e&&e===n&&(t&&!t.isInserted()&&(t=null),n=Q._focused=t,t=null,I())}n&&A(n,i)},u[i]=function(){a=!0},u[s]=function(t){var e=Q._focused;e&&r&&e._handleMouseEvent("mouseup",t),a=r=!1},K.add(c,u),K.add(h,{load:I});var p,d,f,g,_,v,m,x,y=!1,w=!1,b={doubleclick:"click",mousedrag:"mousemove"},k=!1,C={mousedown:{mousedown:1,mousedrag:1,click:1,doubleclick:1},mouseup:{mouseup:1,mousedrag:1,click:1,doubleclick:1},mousemove:{mousedrag:1,mousemove:1,mouseenter:1,mouseleave:1}};return{_viewEvents:l,_handleMouseEvent:function(t,e,i){var n=this._itemEvents,s=n.native[t],a="mousemove"===t,o=this._scope.tool,h=this;function c(t){return n.virtual[t]||h.responds(t)||o&&o.responds(t)}a&&r&&c("mousedrag")&&(t="mousedrag"),i||(i=this.getEventPoint(e));var l=this.getBounds().contains(i),u=s&&l&&h._project.hitTest(i,{tolerance:0,fill:!0,stroke:!0}),b=u&&u.item||null,C=!1,S={};if(S[t.substr(5)]=!0,s&&b!==g&&(g&&P(g,null,"mouseleave",e,i),b&&P(b,null,"mouseenter",e,i),g=b),k^l&&(P(this,null,l?"mouseenter":"mouseleave",e,i),l?this:null,C=!0),!l&&!S.drag||i.equals(d)||(T(this,b,a?t:"mousemove",e,i,d),C=!0),k=l,S.down&&l||S.up&&p){if(T(this,b,t,e,i,p),S.down){if(x=b===v&&Date.now()-m<300,f=v=b,!w&&b){for(var I=b;I&&!I.responds("mousedrag");)I=I._parent;I&&(_=b)}p=i}else S.up&&(w||b!==f||(m=Date.now(),T(this,b,x?"doubleclick":"click",e,i,p),x=!1),f=_=null);k=!1,C=!0}d=i,C&&o&&(y=o._handleMouseEvent(t,e,i,S)||y),!1!==e.cancelable&&(y&&!S.move||S.down&&c("mouseup"))&&e.preventDefault()},_handleKeyEvent:function(t,e,i,n){var s,r=this._scope,a=r.tool;function o(a){a.responds(t)&&(ut=r,a.emit(t,s=s||new tt(t,e,i,n)))}this.isVisible()&&(o(this),a&&a.responds(t)&&o(a))},_countItemEvent:function(t,e){var i=this._itemEvents,n=i.native,s=i.virtual;for(var r in C)n[r]=(n[r]||0)+(C[r][t]||0)*e;s[t]=(s[t]||0)+e},statics:{updateFocus:I,_resetState:function(){r=a=y=k=!1,t=e=p=d=f=g=_=v=m=x=null}}}}function S(t){var e=K.getTarget(t);return e.getAttribute&&Q._viewsById[e.getAttribute("id")]}function I(){var t=Q._focused;if(!t||!t.isVisible())for(var i=0,n=Q._views.length;i<n;i++)if((t=Q._views[i]).isVisible()){Q._focused=e=t;break}}function A(t,e,i){t._handleMouseEvent("mousemove",e,i)}function P(t,e,i,n,s,r,a){var o,h=!1;function c(t,i){if(t.responds(i)){if(o||(o=new it(i,n,s,e||t,r?s.subtract(r):null)),t.emit(i,o)&&(y=!0,o.prevented&&(w=!0),o.stopped))return h=!0}else{var a=b[i];if(a)return c(t,a)}}for(;t&&t!==a&&!c(t,i);)t=t._parent;return h}function T(t,e,i,n,s,r){return t._project.removeOn(i),w=y=!1,_&&P(_,null,i,n,s,r)||e&&e!==_&&!e.isDescendant(_)&&P(e,null,"mousedrag"===i?"mousemove":i,n,s,r,_)||P(t,_||e||t,i,n,s,r)}}),X=Q.extend({_class:"CanvasView",initialize:function(t,e){if(!(e instanceof h.HTMLCanvasElement)){var i=x.read(arguments,1);if(i.isZero())throw new Error("Cannot create CanvasView with the provided argument: "+l.slice(arguments,1));e=ot.getCanvas(i)}var n=this._context=e.getContext("2d");if(n.save(),this._pixelRatio=1,!/^off|false$/.test(p.getAttribute(e,"hidpi"))){var s=h.devicePixelRatio||1,r=Y.getPrefixed(n,"backingStorePixelRatio")||1;this._pixelRatio=s/r}Q.call(this,t,e),this._needsUpdate=!0},remove:function t(){return this._context.restore(),t.base.call(this)},_setElementSize:function t(e,i){var n=this._pixelRatio;if(t.base.call(this,e*n,i*n),1!==n){var s=this._element,r=this._context;if(!p.hasAttribute(s,"resize")){var a=s.style;a.width=e+"px",a.height=i+"px"}r.restore(),r.save(),r.scale(n,n)}},getContext:function(){return this._context},getPixelSize:function t(e){var i,n=ut.agent;if(n&&n.firefox)i=t.base.call(this,e);else{var s=this._context,r=s.font;s.font=e+" serif",i=parseFloat(s.font),s.font=r}return i},getTextWidth:function(t,e){var i=this._context,n=i.font,s=0;i.font=t;for(var r=0,a=e.length;r<a;r++)s=Math.max(s,i.measureText(e[r]).width);return i.font=n,s},update:function(){if(!this._needsUpdate)return!1;var t=this._project,e=this._context,i=this._viewSize;return e.clearRect(0,0,i.width+1,i.height+1),t&&t.draw(e,this._matrix,this._pixelRatio),this._needsUpdate=!1,!0}}),J=l.extend({_class:"Event",initialize:function(t){this.event=t,this.type=t&&t.type},prevented:!1,stopped:!1,preventDefault:function(){this.prevented=!0,this.event.preventDefault()},stopPropagation:function(){this.stopped=!0,this.event.stopPropagation()},stop:function(){this.stopPropagation(),this.preventDefault()},getTimeStamp:function(){return this.event.timeStamp},getModifiers:function(){return et.modifiers}}),tt=J.extend({_class:"KeyEvent",initialize:function(t,e,i,n){this.type=t,this.event=e,this.key=i,this.character=n},toString:function(){return"{ type: '"+this.type+"', key: '"+this.key+"', character: '"+this.character+"', modifiers: "+this.getModifiers()+" }"}}),et=new function(){var t,e,i={"\t":"tab"," ":"space","\b":"backspace","":"delete",Spacebar:"space",Del:"delete",Win:"meta",Esc:"escape"},n={tab:"\t",space:" ",enter:"\r"},s={},r={},a=new l({shift:!1,control:!1,alt:!1,meta:!1,capsLock:!1,space:!1}).inject({option:{get:function(){return this.alt}},command:{get:function(){var t=ut&&ut.agent;return t&&t.mac?this.meta:this.control}}});function u(t){var e=t.key||t.keyIdentifier;return e=/^U\+/.test(e)?String.fromCharCode(parseInt(e.substr(2),16)):/^Arrow[A-Z]/.test(e)?e.substr(5):"Unidentified"===e||e===o?String.fromCharCode(t.keyCode):e,i[e]||(e.length>1?l.hyphenate(e):e.toLowerCase())}function p(e,i,n,o){var h,c=Q._focused;if(s[i]=e,e?r[i]=n:delete r[i],i.length>1&&(h=l.camelize(i))in a){a[h]=e;var u=ut&&ut.agent;if("meta"===h&&u&&u.mac)if(e)t={};else{for(var d in t)d in r&&p(!1,d,t[d],o);t=null}}else e&&t&&(t[i]=n);c&&c._handleKeyEvent(e?"keydown":"keyup",o,i,n)}return K.add(c,{keydown:function(t){var i=u(t),s=ut&&ut.agent;i.length>1||s&&s.chrome&&(t.altKey||s.mac&&t.metaKey||!s.mac&&t.ctrlKey)?p(!0,i,n[i]||(i.length>1?"":i),t):e=i},keypress:function(t){if(e){var i=u(t),n=t.charCode,s=n>=32?String.fromCharCode(n):i.length>1?"":i;i!==e&&(i=s.toLowerCase()),p(!0,i,s,t),e=null}},keyup:function(t){var e=u(t);e in r&&p(!1,e,r[e],t)}}),K.add(h,{blur:function(t){for(var e in r)p(!1,e,r[e],t)}}),{modifiers:a,isDown:function(t){return!!s[t]}}},it=J.extend({_class:"MouseEvent",initialize:function(t,e,i,n,s){this.type=t,this.event=e,this.point=i,this.target=n,this.delta=s},toString:function(){return"{ type: '"+this.type+"', point: "+this.point+", target: "+this.target+(this.delta?", delta: "+this.delta:"")+", modifiers: "+this.getModifiers()+" }"}}),nt=J.extend({_class:"ToolEvent",_item:null,initialize:function(t,e,i){this.tool=t,this.type=e,this.event=i},_choosePoint:function(t,e){return t||(e?e.clone():null)},getPoint:function(){return this._choosePoint(this._point,this.tool._point)},setPoint:function(t){this._point=t},getLastPoint:function(){return this._choosePoint(this._lastPoint,this.tool._lastPoint)},setLastPoint:function(t){this._lastPoint=t},getDownPoint:function(){return this._choosePoint(this._downPoint,this.tool._downPoint)},setDownPoint:function(t){this._downPoint=t},getMiddlePoint:function(){return!this._middlePoint&&this.tool._lastPoint?this.tool._point.add(this.tool._lastPoint).divide(2):this._middlePoint},setMiddlePoint:function(t){this._middlePoint=t},getDelta:function(){return!this._delta&&this.tool._lastPoint?this.tool._point.subtract(this.tool._lastPoint):this._delta},setDelta:function(t){this._delta=t},getCount:function(){return this.tool[/^mouse(down|up)$/.test(this.type)?"_downCount":"_moveCount"]},setCount:function(t){this.tool[/^mouse(down|up)$/.test(this.type)?"downCount":"count"]=t},getItem:function(){if(!this._item){var t=this.tool._scope.project.hitTest(this.getPoint());if(t){for(var e=t.item,i=e._parent;/^(Group|CompoundPath)$/.test(i._class);)e=i,i=i._parent;this._item=e}}return this._item},setItem:function(t){this._item=t},toString:function(){return"{ type: "+this.type+", point: "+this.getPoint()+", count: "+this.getCount()+", modifiers: "+this.getModifiers()+" }"}}),st=d.extend({_class:"Tool",_list:"tools",_reference:"tool",_events:["onMouseDown","onMouseUp","onMouseDrag","onMouseMove","onActivate","onDeactivate","onEditOptions","onKeyDown","onKeyUp"],initialize:function(t){d.call(this),this._moveCount=-1,this._downCount=-1,this.set(t)},getMinDistance:function(){return this._minDistance},setMinDistance:function(t){this._minDistance=t,null!=t&&null!=this._maxDistance&&t>this._maxDistance&&(this._maxDistance=t)},getMaxDistance:function(){return this._maxDistance},setMaxDistance:function(t){this._maxDistance=t,null!=this._minDistance&&null!=t&&t<this._minDistance&&(this._minDistance=t)},getFixedDistance:function(){return this._minDistance==this._maxDistance?this._minDistance:null},setFixedDistance:function(t){this._minDistance=this._maxDistance=t},_handleMouseEvent:function(t,e,i,n){ut=this._scope,n.drag&&!this.responds(t)&&(t="mousemove");var s=n.move||n.drag,r=this.responds(t),a=this.minDistance,o=this.maxDistance,h=!1,c=this;function l(t,e){var r=i,a=s?c._point:c._downPoint||r;if(s){if(c._moveCount>=0&&r.equals(a))return!1;if(a&&(null!=t||null!=e)){var o=r.subtract(a),h=o.getLength();if(h<(t||0))return!1;e&&(r=a.add(o.normalize(Math.min(h,e))))}c._moveCount++}return c._point=r,c._lastPoint=a||r,n.down&&(c._moveCount=-1,c._downPoint=r,c._downCount++),!0}function u(){r&&(h=c.emit(t,new nt(c,t,e))||h)}if(n.down)l(),u();else if(n.up)l(null,o),u();else if(r)for(;l(a,o);)u();return h}}),rt=l.extend(u,{_class:"Tween",statics:{easings:{linear:function(t){return t},easeInQuad:function(t){return t*t},easeOutQuad:function(t){return t*(2-t)},easeInOutQuad:function(t){return t<.5?2*t*t:2*(2-t)*t-1},easeInCubic:function(t){return t*t*t},easeOutCubic:function(t){return--t*t*t+1},easeInOutCubic:function(t){return t<.5?4*t*t*t:(t-1)*(2*t-2)*(2*t-2)+1},easeInQuart:function(t){return t*t*t*t},easeOutQuart:function(t){return 1- --t*t*t*t},easeInOutQuart:function(t){return t<.5?8*t*t*t*t:1-8*--t*t*t*t},easeInQuint:function(t){return t*t*t*t*t},easeOutQuint:function(t){return 1+--t*t*t*t*t},easeInOutQuint:function(t){return t<.5?16*t*t*t*t*t:1+16*--t*t*t*t*t}}},initialize:function t(e,i,n,s,r,a){this.object=e;var o=typeof r,h="function"===o;this.type=h?o:"string"===o?r:"linear",this.easing=h?r:t.easings[this.type],this.duration=s,this.running=!1,this._then=null,this._startTime=null;var c=i||n;this._keys=c?Object.keys(c):[],this._parsedKeys=this._parseKeys(this._keys),this._from=c&&this._getState(i),this._to=c&&this._getState(n),!1!==a&&this.start()},then:function(t){return this._then=t,this},start:function(){return this._startTime=null,this.running=!0,this},stop:function(){return this.running=!1,this},update:function(t){if(this.running){t>1&&(t=1,this.running=!1);for(var e=this.easing(t),i=this._keys,n=function(i){return"function"==typeof i?i(e,t):i},s=0,r=i&&i.length;s<r;s++){var a=i[s],o=n(this._from[a]),h=n(this._to[a]),c=o&&h&&o.__add&&h.__add?h.__subtract(o).__multiply(e).__add(o):(h-o)*e+o;this._setProperty(this._parsedKeys[a],c)}!this.running&&this._then&&this._then(this.object),this.responds("update")&&this.emit("update",new l({progress:t,factor:e}))}return this},_events:{onUpdate:{}},_handleFrame:function(t){var e=this._startTime,i=e?(t-e)/this.duration:0;e||(this._startTime=t),this.update(i)},_getState:function(t){for(var e=this._keys,i={},n=0,s=e.length;n<s;n++){var r,a=e[n],o=this._parsedKeys[a],h=this._getProperty(o);if(t){var c=this._resolveValue(h,t[a]);this._setProperty(o,c),r=(r=this._getProperty(o))&&r.clone?r.clone():r,this._setProperty(o,h)}else r=h&&h.clone?h.clone():h;i[a]=r}return i},_resolveValue:function(t,e){if(e){if(Array.isArray(e)&&2===e.length){var i=e[0];return i&&i.match&&i.match(/^[+\-\*\/]=/)?this._calculate(t,i[0],e[1]):e}if("string"==typeof e){var n=e.match(/^[+\-*\/]=(.*)/);if(n){var s=JSON.parse(n[1].replace(/(['"])?([a-zA-Z0-9_]+)(['"])?:/g,'"$2": '));return this._calculate(t,e[0],s)}}}return e},_calculate:function(t,e,i){return ut.PaperScript.calculateBinary(t,e,i)},_parseKeys:function(t){for(var e={},i=0,n=t.length;i<n;i++){var s=t[i],r=s.replace(/\.([^.]*)/g,"/$1").replace(/\[['"]?([^'"\]]*)['"]?\]/g,"/$1");e[s]=r.split("/")}return e},_getProperty:function(t,e){for(var i=this.object,n=0,s=t.length-(e||0);n<s&&i;n++)i=i[t[n]];return i},_setProperty:function(t,e){var i=this._getProperty(t,1);i&&(i[t[t.length-1]]=e)}}),at={request:function(t){var e=new a.XMLHttpRequest;return e.open((t.method||"get").toUpperCase(),t.url,l.pick(t.async,!0)),t.mimeType&&e.overrideMimeType(t.mimeType),e.onload=function(){var i=e.status;0===i||200===i?t.onLoad&&t.onLoad.call(e,e.responseText):e.onerror()},e.onerror=function(){var i=e.status,n='Could not load "'+t.url+'" (Status: '+i+")";if(!t.onError)throw new Error(n);t.onError(n,i)},e.send(null)}},ot={canvases:[],getCanvas:function(t,e){if(!h)return null;var i,n=!0;"object"==typeof t&&(e=t.height,t=t.width),this.canvases.length?i=this.canvases.pop():(i=c.createElement("canvas"),n=!1);var s=i.getContext("2d");if(!s)throw new Error("Canvas "+i+" is unable to provide a 2D context.");return i.width===t&&i.height===e?n&&s.clearRect(0,0,t+1,e+1):(i.width=t,i.height=e),s.save(),i},getContext:function(t,e){var i=this.getCanvas(t,e);return i?i.getContext("2d"):null},release:function(t){var e=t&&t.canvas?t.canvas:t;e&&e.getContext&&(e.getContext("2d").restore(),this.canvases.push(e))}},ht=new function(){var t,e,i,n,s,r,a,o,h,c,u,p=Math.min,d=Math.max,f=Math.abs;function g(t,e,i){return.2989*t+.587*e+.114*i}function _(t,e,i,n){var s=n-g(t,e,i),r=(n=g(h=t+s,c=e+s,u=i+s),p(h,c,u)),a=d(h,c,u);if(r<0){var o=n-r;h=n+(h-n)*n/o,c=n+(c-n)*n/o,u=n+(u-n)*n/o}if(a>255){var l=255-n,f=a-n;h=n+(h-n)*l/f,c=n+(c-n)*l/f,u=n+(u-n)*l/f}}function v(t,e,i){return d(t,e,i)-p(t,e,i)}function m(t,e,i,n){var s,r=[t,e,i],a=d(t,e,i),o=p(t,e,i);s=0===p(o=o===t?0:o===e?1:2,a=a===t?0:a===e?1:2)?1===d(o,a)?2:1:0,r[a]>r[o]?(r[s]=(r[s]-r[o])*n/(r[a]-r[o]),r[a]=n):r[s]=r[a]=0,r[o]=0,h=r[0],c=r[1],u=r[2]}var x={multiply:function(){h=s*t/255,c=r*e/255,u=a*i/255},screen:function(){h=s+t-s*t/255,c=r+e-r*e/255,u=a+i-a*i/255},overlay:function(){h=s<128?2*s*t/255:255-2*(255-s)*(255-t)/255,c=r<128?2*r*e/255:255-2*(255-r)*(255-e)/255,u=a<128?2*a*i/255:255-2*(255-a)*(255-i)/255},"soft-light":function(){var n=t*s/255;h=n+s*(255-(255-s)*(255-t)/255-n)/255,c=(n=e*r/255)+r*(255-(255-r)*(255-e)/255-n)/255,u=(n=i*a/255)+a*(255-(255-a)*(255-i)/255-n)/255},"hard-light":function(){h=t<128?2*t*s/255:255-2*(255-t)*(255-s)/255,c=e<128?2*e*r/255:255-2*(255-e)*(255-r)/255,u=i<128?2*i*a/255:255-2*(255-i)*(255-a)/255},"color-dodge":function(){h=0===s?0:255===t?255:p(255,255*s/(255-t)),c=0===r?0:255===e?255:p(255,255*r/(255-e)),u=0===a?0:255===i?255:p(255,255*a/(255-i))},"color-burn":function(){h=255===s?255:0===t?0:d(0,255-255*(255-s)/t),c=255===r?255:0===e?0:d(0,255-255*(255-r)/e),u=255===a?255:0===i?0:d(0,255-255*(255-a)/i)},darken:function(){h=s<t?s:t,c=r<e?r:e,u=a<i?a:i},lighten:function(){h=s>t?s:t,c=r>e?r:e,u=a>i?a:i},difference:function(){(h=s-t)<0&&(h=-h),(c=r-e)<0&&(c=-c),(u=a-i)<0&&(u=-u)},exclusion:function(){h=s+t*(255-s-s)/255,c=r+e*(255-r-r)/255,u=a+i*(255-a-a)/255},hue:function(){m(t,e,i,v(s,r,a)),_(h,c,u,g(s,r,a))},saturation:function(){m(s,r,a,v(t,e,i)),_(h,c,u,g(s,r,a))},luminosity:function(){_(s,r,a,g(t,e,i))},color:function(){_(t,e,i,g(s,r,a))},add:function(){h=p(s+t,255),c=p(r+e,255),u=p(a+i,255)},subtract:function(){h=d(s-t,0),c=d(r-e,0),u=d(a-i,0)},average:function(){h=(s+t)/2,c=(r+e)/2,u=(a+i)/2},negation:function(){h=255-f(255-t-s),c=255-f(255-e-r),u=255-f(255-i-a)}},y=this.nativeModes=l.each(["source-over","source-in","source-out","source-atop","destination-over","destination-in","destination-out","destination-atop","lighter","darker","copy","xor"],(function(t){this[t]=!0}),{}),w=ot.getContext(1,1);w&&(l.each(x,(function(t,e){var i="darken"===e,n=!1;w.save();try{w.fillStyle=i?"#300":"#a00",w.fillRect(0,0,1,1),w.globalCompositeOperation=e,w.globalCompositeOperation===e&&(w.fillStyle=i?"#a00":"#300",w.fillRect(0,0,1,1),n=w.getImageData(0,0,1,1).data[0]!==i?170:51)}catch(t){}w.restore(),y[e]=n})),ot.release(w)),this.process=function(l,p,d,f,g){var _=p.canvas,v="normal"===l;if(v||y[l])d.save(),d.setTransform(1,0,0,1,0,0),d.globalAlpha=f,v||(d.globalCompositeOperation=l),d.drawImage(_,g.x,g.y),d.restore();else{var m=x[l];if(!m)return;for(var w=d.getImageData(g.x,g.y,_.width,_.height),b=w.data,k=p.getImageData(0,0,_.width,_.height).data,C=0,S=b.length;C<S;C+=4){t=k[C],s=b[C],e=k[C+1],r=b[C+1],i=k[C+2],a=b[C+2],n=k[C+3],o=b[C+3],m();var I=n*f/255,A=1-I;b[C]=I*h+A*s,b[C+1]=I*c+A*r,b[C+2]=I*u+A*a,b[C+3]=n*f+A*o}d.putImageData(w,g.x,g.y)}}},ct=new function(){var t="http://www.w3.org/2000/svg",e="http://www.w3.org/2000/xmlns",i="http://www.w3.org/1999/xlink",n={href:i,xlink:e,xmlns:e+"/","xmlns:xlink":e+"/"};function s(t,e,i){for(var s in e){var r=e[s],a=n[s];"number"==typeof r&&i&&(r=i.number(r)),a?t.setAttributeNS(a,s,r):t.setAttribute(s,r)}return t}return{svg:t,xmlns:e,xlink:i,create:function(e,i,n){return s(c.createElementNS(t,e),i,n)},get:function(t,e){var i=n[e],s=i?t.getAttributeNS(i,e):t.getAttribute(e);return"null"===s?null:s},set:s}},lt=l.each({fillColor:["fill","color"],fillRule:["fill-rule","string"],strokeColor:["stroke","color"],strokeWidth:["stroke-width","number"],strokeCap:["stroke-linecap","string"],strokeJoin:["stroke-linejoin","string"],strokeScaling:["vector-effect","lookup",{true:"none",false:"non-scaling-stroke"},function(t,e){return!e&&(t instanceof B||t instanceof T||t instanceof U)}],miterLimit:["stroke-miterlimit","number"],dashArray:["stroke-dasharray","array"],dashOffset:["stroke-dashoffset","number"],fontFamily:["font-family","string"],fontWeight:["font-weight","string"],fontSize:["font-size","number"],justification:["text-anchor","lookup",{left:"start",center:"middle",right:"end"}],opacity:["opacity","number"],blendMode:["mix-blend-mode","style"]},(function(t,e){var i=l.capitalize(e),n=t[2];this[e]={type:t[1],property:e,attribute:t[0],toSVG:n,fromSVG:n&&l.each(n,(function(t,e){this[t]=e}),{}),exportFilter:t[3],get:"get"+i,set:"set"+i}}),{});new function(){var t;function e(e,i,n){var s,r=new l,a=e.getTranslation();i&&(e.isInvertible()?(s=(e=e._shiftless())._inverseTransform(a),a=null):s=new v,r[n?"cx":"x"]=s.x,r[n?"cy":"y"]=s.y);if(!e.isIdentity()){var o=e.decompose();if(o){var h=[],c=o.rotation,u=o.scaling,p=o.skewing;a&&!a.isZero()&&h.push("translate("+t.point(a)+")"),c&&h.push("rotate("+t.number(c)+")"),g.isZero(u.x-1)&&g.isZero(u.y-1)||h.push("scale("+t.point(u)+")"),p.x&&h.push("skewX("+t.number(p.x)+")"),p.y&&h.push("skewY("+t.number(p.y)+")"),r.transform=h.join(" ")}else r.transform="matrix("+e.getValues().join(",")+")"}return r}function i(i,n){for(var s=e(i._matrix),r=i._children,a=ct.create("g",s,t),o=0,h=r.length;o<h;o++){var l=r[o],u=p(l,n);if(u)if(l.isClipMask()){var d=ct.create("clipPath");d.appendChild(u),c(l,d,"clip"),ct.set(a,{"clip-path":"url(#"+d.id+")"})}else a.appendChild(u)}return a}function n(i){var n=i._type,s=i._radius,r=e(i._matrix,!0,"rectangle"!==n);if("rectangle"===n){n="rect";var a=i._size,o=a.width,h=a.height;r.x-=o/2,r.y-=h/2,r.width=o,r.height=h,s.isZero()&&(s=null)}return s&&("circle"===n?r.r=s:(r.rx=s.width,r.ry=s.height)),ct.create(n,r,t)}var s,r={Group:i,Layer:i,Raster:function(i,n){var s=e(i._matrix,!0),r=i.getSize(),a=i.getImage();return s.x-=r.width/2,s.y-=r.height/2,s.width=r.width,s.height=r.height,s.href=0==n.embedImages&&a&&a.src||i.toDataURL(),ct.create("image",s,t)},Path:function(i,s){var r=s.matchShapes;if(r){var a=i.toShape(!1);if(a)return n(a)}var o,h=i._segments,c=h.length,l=e(i._matrix);if(r&&c>=2&&!i.hasHandles())if(c>2){o=i._closed?"polygon":"polyline";for(var u=[],p=0;p<c;p++)u.push(t.point(h[p]._point));l.points=u.join(" ")}else{o="line";var d=h[0]._point,f=h[1]._point;l.set({x1:d.x,y1:d.y,x2:f.x,y2:f.y})}else o="path",l.d=i.getPathData(null,s.precision);return ct.create(o,l,t)},Shape:n,CompoundPath:function(i,n){var s=e(i._matrix),r=i.getPathData(null,n.precision);return r&&(s.d=r),ct.create("path",s,t)},SymbolItem:function(i,n){var s=e(i._matrix,!0),r=i._definition,a=h(r,"symbol"),o=r._item,l=o.getStrokeBounds();return a||((a=ct.create("symbol",{viewBox:t.rectangle(l)})).appendChild(p(o,n)),c(r,a,"symbol")),s.href="#"+a.id,s.x+=l.x,s.y+=l.y,s.width=l.width,s.height=l.height,s.overflow="visible",ct.create("use",s,t)},PointText:function(i){var n=ct.create("text",e(i._matrix,!0),t);return n.textContent=i._content,n}};function o(e,i,n){var s={},r=!n&&e.getParent(),a=[];return null!=e._name&&(s.id=e._name),l.each(lt,(function(i){var n=i.get,o=i.type,u=e[n]();if(i.exportFilter?i.exportFilter(e,u):!r||!l.equals(r[n](),u)){if("color"===o&&null!=u){var p=u.getAlpha();p<1&&(s[i.attribute+"-opacity"]=p)}"style"===o?a.push(i.attribute+": "+u):s[i.attribute]=null==u?"none":"color"===o?u.gradient?function(e){var i=h(e,"color");if(!i){var n,s=e.getGradient(),r=s._radial,a=e.getOrigin(),o=e.getDestination();if(r){n={cx:a.x,cy:a.y,r:a.getDistance(o)};var l=e.getHighlight();l&&(n.fx=l.x,n.fy=l.y)}else n={x1:a.x,y1:a.y,x2:o.x,y2:o.y};n.gradientUnits="userSpaceOnUse",i=ct.create((r?"radial":"linear")+"Gradient",n,t);for(var u=s._stops,p=0,d=u.length;p<d;p++){var f=u[p],g=f._color,_=g.getAlpha(),v=f._offset;n={offset:null==v?p/(d-1):v},g&&(n["stop-color"]=g.toCSS(!0)),_<1&&(n["stop-opacity"]=_),i.appendChild(ct.create("stop",n,t))}c(e,i,"color")}return"url(#"+i.id+")"}(u):u.toCSS(!0):"array"===o?u.join(","):"lookup"===o?i.toSVG[u]:u}})),a.length&&(s.style=a.join(";")),1===s.opacity&&delete s.opacity,e._visible||(s.visibility="hidden"),ct.set(i,s,t)}function h(t,e){return s||(s={ids:{},svgs:{}}),t&&s.svgs[e+"-"+(t._id||t.__id||(t.__id=_.get("svg")))]}function c(t,e,i){s||h();var n=s.ids[i]=(s.ids[i]||0)+1;e.id=i+"-"+n,s.svgs[i+"-"+(t._id||t.__id)]=e}function u(t,e){var i=t,n=null;if(s){for(var r in i="svg"===t.nodeName.toLowerCase()&&t,s.svgs)n||(i||(i=ct.create("svg")).appendChild(t),n=i.insertBefore(ct.create("defs"),i.firstChild)),n.appendChild(s.svgs[r]);s=null}return e.asString?(new a.XMLSerializer).serializeToString(i):i}function p(t,e,i){var n=r[t._class],s=n&&n(t,e);if(s){var a=e.onExport;a&&(s=a(t,s,e)||s);var h=JSON.stringify(t._data);h&&"{}"!==h&&"null"!==h&&s.setAttribute("data-paper-data",h)}return s&&o(t,s,i)}function d(e){return e||(e={}),t=new f(e.precision),e}I.inject({exportSVG:function(t){return u(p(this,t=d(t),!0),t)}}),S.inject({exportSVG:function(i){i=d(i);var n=this._children,s=this.getView(),r=l.pick(i.bounds,"view"),a=i.matrix||"view"===r&&s._matrix,o=a&&k.read([a]),h="view"===r?new w([0,0],s.getViewSize()):"content"===r?I._getBounds(n,o,{stroke:!0}).rect:w.read([r],0,{readNull:!0}),c={version:"1.1",xmlns:ct.svg,"xmlns:xlink":ct.xlink};h&&(c.width=h.width,c.height=h.height,(h.x||0===h.x||h.y||0===h.y)&&(c.viewBox=t.rectangle(h)));var f=ct.create("svg",c,t),g=f;o&&!o.isIdentity()&&(g=f.appendChild(ct.create("g",e(o),t)));for(var _=0,v=n.length;_<v;_++)g.appendChild(p(n[_],i,!0));return u(f,i)}})},new function(){var t,e={};function i(e,i,n,s,r,a){var o=ct.get(e,i)||a,h=null==o?s?null:n?"":0:n?o:parseFloat(o);return/%\s*$/.test(o)?h/100*(r?1:t[/x|^width/.test(i)?"width":"height"]):h}function n(t,e,n,s,r,a,o){return e=i(t,e||"x",!1,s,r,a),n=i(t,n||"y",!1,s,r,o),!s||null!=e&&null!=n?new v(e,n):null}function s(t,e,n,s,r){return e=i(t,e||"width",!1,s,r),n=i(t,n||"height",!1,s,r),!s||null!=e&&null!=n?new x(e,n):null}function r(t,e,i){return"none"===t?null:"number"===e?parseFloat(t):"array"===e?t?t.split(/[\s,]+/g).map(parseFloat):[]:"color"===e?C(t)||t:"lookup"===e?i[t]:t}function u(t,e,i,n){var s=t.childNodes,r="clippath"===e,a="defs"===e,o=new A,h=o._project,c=h._currentStyle,l=[];if(r||a||(o=b(o,t,n),h._currentStyle=o._style.clone()),n)for(var u=t.querySelectorAll("defs"),p=0,d=u.length;p<d;p++)P(u[p],i,!1);for(p=0,d=s.length;p<d;p++){var f,g=s[p];1!==g.nodeType||/^defs$/i.test(g.nodeName)||!(f=P(g,i,!1))||f instanceof M||l.push(f)}return o.addChildren(l),r&&(o=b(o.reduce(),t,n)),h._currentStyle=c,(r||a)&&(o.remove(),o=null),o}function p(t,e){for(var i=t.getAttribute("points").match(/[+-]?(?:\d*\.\d+|\d+\.?)(?:[eE][+-]?\d+)?/g),n=[],s=0,r=i.length;s<r;s+=2)n.push(new v(parseFloat(i[s]),parseFloat(i[s+1])));var a=new D(n);return"polygon"===e&&a.closePath(),a}function d(t,s){var r,a=(i(t,"href",!0)||"").substring(1),o="radialgradient"===s;if(a)(r=e[a].getGradient())._radial^o&&((r=r.clone())._radial=o);else{for(var h=t.childNodes,c=[],l=0,u=h.length;l<u;l++){var p=h[l];1===p.nodeType&&c.push(b(new Z,p))}r=new G(c,o)}var d,f,g,_="userSpaceOnUse"!==i(t,"gradientUnits",!0);return o?(f=(d=n(t,"cx","cy",!1,_,"50%","50%")).add(i(t,"r",!1,!1,_,"50%"),0),g=n(t,"fx","fy",!0,_)):(d=n(t,"x1","y1",!1,_,"0%","0%"),f=n(t,"x2","y2",!1,_,"100%","0%")),b(new W(r,d,f,g),t)._scaleToBounds=_,null}var f={"#document":function(t,e,i,n){for(var s=t.childNodes,r=0,a=s.length;r<a;r++){var o=s[r];if(1===o.nodeType)return P(o,i,n)}},g:u,svg:u,clippath:u,polygon:p,polyline:p,path:function(t){return B.create(t.getAttribute("d"))},lineargradient:d,radialgradient:d,image:function(t){var e=new E(i(t,"href",!0));return e.on("load",(function(){var e=s(t);this.setSize(e);var i=n(t).add(e.divide(2));this._matrix.append((new k).translate(i))})),e},symbol:function(t,e,i,n){return new M(u(t,e,i,n),!0)},defs:u,use:function(t){var s=(i(t,"href",!0)||"").substring(1),r=e[s],a=n(t);return r?r instanceof M?r.place(a):r.clone().translate(a):null},circle:function(t){return new T.Circle(n(t,"cx","cy"),i(t,"r"))},ellipse:function(t){return new T.Ellipse({center:n(t,"cx","cy"),radius:s(t,"rx","ry")})},rect:function(t){return new T.Rectangle(new w(n(t),s(t)),s(t,"rx","ry"))},line:function(t){return new D.Line(n(t,"x1","y1"),n(t,"x2","y2"))},text:function(t){var e=new H(n(t).add(n(t,"dx","dy")));return e.setContent(t.textContent.trim()||""),e},switch:u};function g(t,e,i,n){if(t.transform){for(var s=(n.getAttribute(i)||"").split(/\)\s*/g),r=new k,a=0,o=s.length;a<o;a++){var h=s[a];if(!h)break;for(var c=h.split(/\(\s*/),l=c[0],u=c[1].split(/[\s,]+/g),p=0,d=u.length;p<d;p++)u[p]=parseFloat(u[p]);switch(l){case"matrix":r.append(new k(u[0],u[1],u[2],u[3],u[4],u[5]));break;case"rotate":r.rotate(u[0],u[1]||0,u[2]||0);break;case"translate":r.translate(u[0],u[1]||0);break;case"scale":r.scale(u);break;case"skewX":r.skew(u[0],0);break;case"skewY":r.skew(0,u[0])}}t.transform(r)}}function _(t,e,i){var n="fill-opacity"===i?"getFillColor":"getStrokeColor",s=t[n]&&t[n]();s&&s.setAlpha(parseFloat(e))}var m=l.set(l.each(lt,(function(t){this[t.attribute]=function(e,i){if(e[t.set]&&(e[t.set](r(i,t.type,t.fromSVG)),"color"===t.type)){var n=e[t.get]();if(n&&n._scaleToBounds){var s=e.getBounds();n.transform((new k).translate(s.getPoint()).scale(s.getSize()))}}}}),{}),{id:function(t,i){e[i]=t,t.setName&&t.setName(i)},"clip-path":function(t,e){var i=C(e);if(i){if((i=i.clone()).setClipMask(!0),!(t instanceof A))return new A(i,t);t.insertChild(0,i)}},gradientTransform:g,transform:g,"fill-opacity":_,"stroke-opacity":_,visibility:function(t,e){t.setVisible&&t.setVisible("visible"===e)},display:function(t,e){t.setVisible&&t.setVisible(null!==e)},"stop-color":function(t,e){t.setColor&&t.setColor(e)},"stop-opacity":function(t,e){t._color&&t._color.setAlpha(parseFloat(e))},offset:function(t,e){if(t.setOffset){var i=e.match(/(.*)%$/);t.setOffset(i?i[1]/100:parseFloat(e))}},viewBox:function(t,e,i,n,a){var o,h=new w(r(e,"array")),c=s(n,null,null,!0);if(t instanceof A){var l=c?c.divide(h.getSize()):1,u=(new k).scale(l).translate(h.getPoint().negate());o=t}else t instanceof M&&(c&&h.setSize(c),o=t._item);if(o){if("visible"!==y(n,"overflow",a)){var p=new T.Rectangle(h);p.setClipMask(!0),o.addChild(p)}u&&o.transform(u)}}});function y(t,e,i){var n=t.attributes[e],s=n&&n.value;if(!s&&t.style){var r=l.camelize(e);(s=t.style[r])||i.node[r]===i.parent[r]||(s=i.node[r])}return s?"none"===s?null:s:o}function b(t,e,i){var n=e.parentNode,s={node:Y.getStyles(e)||{},parent:!i&&!/^defs$/i.test(n.tagName)&&Y.getStyles(n)||{}};return l.each(m,(function(i,n){var r=y(e,n,s);t=r!==o&&i(t,r,n,e,s)||t})),t}function C(t){var i=t&&t.match(/\((?:["'#]*)([^"')]+)/),n=i&&i[1],s=n&&e[h?n.replace(h.location.href.split("#")[0]+"#",""):n];return s&&s._scaleToBounds&&((s=s.clone())._scaleToBounds=!0),s}function P(i,n,r){var a,o,h,u=i.nodeName.toLowerCase(),p="#document"!==u,d=c.body;r&&p&&(t=ut.getView().getSize(),t=s(i,null,null,!0)||t,a=ct.create("svg",{style:"stroke-width: 1px; stroke-miterlimit: 10"}),o=i.parentNode,h=i.nextSibling,a.appendChild(i),d.appendChild(a));var g=ut.settings,_=g.applyMatrix,v=g.insertItems;g.applyMatrix=!1,g.insertItems=!1;var m=f[u],x=m&&m(i,u,n,r)||null;if(g.insertItems=v,g.applyMatrix=_,x){!p||x instanceof A||(x=b(x,i,r));var y=n.onImport,w=p&&i.getAttribute("data-paper-data");y&&(x=y(i,x,n)||x),n.expandShapes&&x instanceof T&&(x.remove(),x=x.toPath()),w&&(x._data=JSON.parse(w))}return a&&(d.removeChild(a),o&&(h?o.insertBefore(i,h):o.appendChild(i))),r&&(e={},x&&l.pick(n.applyMatrix,_)&&x.matrix.apply(!0,!0)),x}function L(t,e,i){if(!t)return null;e="function"==typeof e?{onLoad:e}:e||{};var n=ut,s=null;function r(r){try{var c="object"==typeof r?r:(new a.DOMParser).parseFromString(r,"image/svg+xml");if(!c.nodeName)throw c=null,new Error("Unsupported SVG source: "+t);ut=n,s=P(c,e,!0),e&&!1===e.insert||i._insertItem(o,s);var l=e.onLoad;l&&l(s,r)}catch(t){h(t)}}function h(t,i){var n=e.onError;if(!n)throw new Error(t);n(t,i)}if("string"!=typeof t||/^.*</.test(t)){if("undefined"!=typeof File&&t instanceof File){var l=new FileReader;return l.onload=function(){r(l.result)},l.onerror=function(){h(l.error)},l.readAsText(t)}r(t)}else{var u=c.getElementById(t);u?r(u):at.request({url:t,async:!0,onLoad:r,onError:h})}return s}I.inject({importSVG:function(t,e){return L(t,e,this)}}),S.inject({importSVG:function(t,e){return this.activate(),L(t,e,this)}})},l.exports.PaperScript=function(){var t,e,u,d=this,f=d.acorn;if(!f)try{f=i(29)}catch(t){}f||(f=t=e={},u=function(t){"use strict";var e,i,n,s;t.version="0.5.0",t.parse=function(t,s){return i=String(t),n=i.length,a(s),Gt(),function(t){v=m=o,e.locations&&(x=new Wt),y=b=null,w=[],Xt();var i=t||le(),n=!0;for(t||(i.body=[]);p!==E;){var s=be();i.body.push(s),n&&de(s)&&oe(!0),n=!1}return pe(i,"Program")}(e.program)};var r=t.defaultOptions={ecmaVersion:5,strictSemicolons:!1,allowTrailingCommas:!0,forbidReserved:!1,allowReturnOutsideFunction:!1,locations:!1,onComment:null,ranges:!1,program:null,sourceFile:null,directSourceFile:null};function a(t){for(var i in e=t||{},r)Object.prototype.hasOwnProperty.call(e,i)||(e[i]=r[i]);s=e.sourceFile||null}var o,h,c,l,u,p,d,f,g,_,v,m,x,y,w,b,k=t.getLineInfo=function(t,e){for(var i=1,n=0;;){qt.lastIndex=n;var s=qt.exec(t);if(!(s&&s.index<e))break;++i,n=s.index+s[0].length}return{line:i,column:e-n}};function C(t,e){var n=k(i,t);e+=" ("+n.line+":"+n.column+")";var s=new SyntaxError(e);throw s.pos=t,s.loc=n,s.raisedAt=o,s}t.tokenize=function(t,s){i=String(t),n=i.length,a(s),Gt();var r={};function v(t){return m=c,Xt(t),r.start=h,r.end=c,r.startLoc=l,r.endLoc=u,r.type=p,r.value=d,r}return v.jumpTo=function(t,n){var s;if(o=t,e.locations)for(g=1,_=qt.lastIndex=0;(s=qt.exec(i))&&s.index<t;)++g,_=s.index+s[0].length;f=n,Kt()},v};var S=[],I={type:"num"},A={type:"regexp"},P={type:"string"},T={type:"name"},E={type:"eof"},L={keyword:"break"},M={keyword:"case",beforeExpr:!0},O={keyword:"catch"},N={keyword:"continue"},z={keyword:"debugger"},R={keyword:"default"},V={keyword:"do",isLoop:!0},B={keyword:"else",beforeExpr:!0},D={keyword:"finally"},F={keyword:"for",isLoop:!0},j={keyword:"function"},q={keyword:"if"},U={keyword:"return",beforeExpr:!0},H={keyword:"switch"},W={keyword:"throw",beforeExpr:!0},G={keyword:"try"},Z={keyword:"var"},$={keyword:"while",isLoop:!0},Y={keyword:"with"},K={keyword:"new",beforeExpr:!0},Q={keyword:"this"},X={keyword:"null",atomValue:null},J={keyword:"true",atomValue:!0},tt={keyword:"false",atomValue:!1},et={keyword:"in",binop:7,beforeExpr:!0},it={break:L,case:M,catch:O,continue:N,debugger:z,default:R,do:V,else:B,finally:D,for:F,function:j,if:q,return:U,switch:H,throw:W,try:G,var:Z,while:$,with:Y,null:X,true:J,false:tt,new:K,in:et,instanceof:{keyword:"instanceof",binop:7,beforeExpr:!0},this:Q,typeof:{keyword:"typeof",prefix:!0,beforeExpr:!0},void:{keyword:"void",prefix:!0,beforeExpr:!0},delete:{keyword:"delete",prefix:!0,beforeExpr:!0}},nt={type:"[",beforeExpr:!0},st={type:"]"},rt={type:"{",beforeExpr:!0},at={type:"}"},ot={type:"(",beforeExpr:!0},ht={type:")"},ct={type:",",beforeExpr:!0},lt={type:";",beforeExpr:!0},ut={type:":",beforeExpr:!0},pt={type:"."},dt={type:"?",beforeExpr:!0},ft={binop:10,beforeExpr:!0},gt={isAssign:!0,beforeExpr:!0},_t={isAssign:!0,beforeExpr:!0},vt={postfix:!0,prefix:!0,isUpdate:!0},mt={prefix:!0,beforeExpr:!0},xt={binop:1,beforeExpr:!0},yt={binop:2,beforeExpr:!0},wt={binop:3,beforeExpr:!0},bt={binop:4,beforeExpr:!0},kt={binop:5,beforeExpr:!0},Ct={binop:6,beforeExpr:!0},St={binop:7,beforeExpr:!0},It={binop:8,beforeExpr:!0},At={binop:9,prefix:!0,beforeExpr:!0},Pt={binop:10,beforeExpr:!0};for(var Tt in t.tokTypes={bracketL:nt,bracketR:st,braceL:rt,braceR:at,parenL:ot,parenR:ht,comma:ct,semi:lt,colon:ut,dot:pt,question:dt,slash:ft,eq:gt,name:T,eof:E,num:I,regexp:A,string:P},it)t.tokTypes["_"+Tt]=it[Tt];function Et(t){t=t.split(" ");var e="",i=[];t:for(var n=0;n<t.length;++n){for(var s=0;s<i.length;++s)if(i[s][0].length==t[n].length){i[s].push(t[n]);continue t}i.push([t[n]])}function r(t){if(1==t.length)return e+="return str === "+JSON.stringify(t[0])+";";e+="switch(str){";for(var i=0;i<t.length;++i)e+="case "+JSON.stringify(t[i])+":";e+="return true}return false;"}if(i.length>3){for(i.sort((function(t,e){return e.length-t.length})),e+="switch(str.length){",n=0;n<i.length;++n){var a=i[n];e+="case "+a[0].length+":",r(a)}e+="}"}else r(t);return new Function("str",e)}var Lt,Mt=Et("abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile"),Ot=Et("class enum extends super const export import"),Nt=Et("implements interface let package private protected public static yield"),zt=Et("eval arguments"),Rt=Et("break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this"),Vt=/[\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff]/,Bt="ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԧԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠࢢ-ࢬऄ-हऽॐक़-ॡॱ-ॷॹ-ॿঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-ళవ-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛰᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤜᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚗꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꪀ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ",Dt=new RegExp("["+Bt+"]"),Ft=new RegExp("["+Bt+"̀-ͯ҃-֑҇-ׇֽֿׁׂׅׄؐ-ؚؠ-ىٲ-ۓۧ-ۨۻ-ۼܰ-݊ࠀ-ࠔࠛ-ࠣࠥ-ࠧࠩ-࠭ࡀ-ࡗࣤ-ࣾऀ-ःऺ-़ा-ॏ॑-ॗॢ-ॣ०-९ঁ-ঃ়া-ৄেৈৗয়-ৠਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢ-ૣ૦-૯ଁ-ଃ଼ା-ୄେୈୋ-୍ୖୗୟ-ୠ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఁ-ఃె-ైొ-్ౕౖౢ-ౣ౦-౯ಂಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢ-ೣ೦-೯ംഃെ-ൈൗൢ-ൣ൦-൯ංඃ්ා-ුූෘ-ෟෲෳิ-ฺเ-ๅ๐-๙ິ-ູ່-ໍ໐-໙༘༙༠-༩༹༵༷ཁ-ཇཱ-྄྆-྇ྍ-ྗྙ-ྼ࿆က-ဩ၀-၉ၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟ᜎ-ᜐᜠ-ᜰᝀ-ᝐᝲᝳក-ឲ៝០-៩᠋-᠍᠐-᠙ᤠ-ᤫᤰ-᤻ᥑ-ᥭᦰ-ᧀᧈ-ᧉ᧐-᧙ᨀ-ᨕᨠ-ᩓ᩠-᩿᩼-᪉᪐-᪙ᭆ-ᭋ᭐-᭙᭫-᭳᮰-᮹᯦-᯳ᰀ-ᰢ᱀-᱉ᱛ-ᱽ᳐-᳒ᴀ-ᶾḁ-ἕ‌‍‿⁀⁔⃐-⃥⃜⃡-⃰ⶁ-ⶖⷠ-ⷿ〡-〨゙゚Ꙁ-ꙭꙴ-꙽ꚟ꛰-꛱ꟸ-ꠀ꠆ꠋꠣ-ꠧꢀ-ꢁꢴ-꣄꣐-꣙ꣳ-ꣷ꤀-꤉ꤦ-꤭ꤰ-ꥅꦀ-ꦃ꦳-꧀ꨀ-ꨧꩀ-ꩁꩌ-ꩍ꩐-꩙ꩻꫠ-ꫩꫲ-ꫳꯀ-ꯡ꯬꯭꯰-꯹ﬠ-ﬨ︀-️︠-︦︳︴﹍-﹏０-９＿]"),jt=/[\n\r\u2028\u2029]/,qt=/\r\n|[\n\r\u2028\u2029]/g,Ut=t.isIdentifierStart=function(t){return t<65?36===t:t<91||(t<97?95===t:t<123||t>=170&&Dt.test(String.fromCharCode(t)))},Ht=t.isIdentifierChar=function(t){return t<48?36===t:t<58||!(t<65)&&(t<91||(t<97?95===t:t<123||t>=170&&Ft.test(String.fromCharCode(t))))};function Wt(){this.line=g,this.column=o-_}function Gt(){g=1,o=_=0,f=!0,Kt()}function Zt(t,i){c=o,e.locations&&(u=new Wt),p=t,Kt(),d=i,f=t.beforeExpr}function $t(){var t,n=e.onComment&&e.locations&&new Wt,s=o,r=i.indexOf("*/",o+=2);if(-1===r&&C(o-2,"Unterminated comment"),o=r+2,e.locations)for(qt.lastIndex=s;(t=qt.exec(i))&&t.index<o;)++g,_=t.index+t[0].length;e.onComment&&e.onComment(!0,i.slice(s+2,r),s,o,n,e.locations&&new Wt)}function Yt(){for(var t=o,s=e.onComment&&e.locations&&new Wt,r=i.charCodeAt(o+=2);o<n&&10!==r&&13!==r&&8232!==r&&8233!==r;)++o,r=i.charCodeAt(o);e.onComment&&e.onComment(!1,i.slice(t+2,o),t,o,s,e.locations&&new Wt)}function Kt(){for(;o<n;){var t=i.charCodeAt(o);if(32===t)++o;else if(13===t)++o,10===(s=i.charCodeAt(o))&&++o,e.locations&&(++g,_=o);else if(10===t||8232===t||8233===t)++o,e.locations&&(++g,_=o);else if(t>8&&t<14)++o;else if(47===t){var s;if(42===(s=i.charCodeAt(o+1)))$t();else{if(47!==s)break;Yt()}}else if(160===t)++o;else{if(!(t>=5760&&Vt.test(String.fromCharCode(t))))break;++o}}}function Qt(t){switch(t){case 46:return function(){var t=i.charCodeAt(o+1);return t>=48&&t<=57?ie(!0):(++o,Zt(pt))}();case 40:return++o,Zt(ot);case 41:return++o,Zt(ht);case 59:return++o,Zt(lt);case 44:return++o,Zt(ct);case 91:return++o,Zt(nt);case 93:return++o,Zt(st);case 123:return++o,Zt(rt);case 125:return++o,Zt(at);case 58:return++o,Zt(ut);case 63:return++o,Zt(dt);case 48:var s=i.charCodeAt(o+1);if(120===s||88===s)return function(){o+=2;var t=ee(16);return null==t&&C(h+2,"Expected hexadecimal number"),Ut(i.charCodeAt(o))&&C(o,"Identifier directly after number"),Zt(I,t)}();case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:return ie(!1);case 34:case 39:return function(t){o++;for(var s="";;){o>=n&&C(h,"Unterminated string constant");var r=i.charCodeAt(o);if(r===t)return++o,Zt(P,s);if(92===r){r=i.charCodeAt(++o);var a=/^[0-7]+/.exec(i.slice(o,o+3));for(a&&(a=a[0]);a&&parseInt(a,8)>255;)a=a.slice(0,-1);if("0"===a&&(a=null),++o,a)b&&C(o-2,"Octal literal in strict mode"),s+=String.fromCharCode(parseInt(a,8)),o+=a.length-1;else switch(r){case 110:s+="\n";break;case 114:s+="\r";break;case 120:s+=String.fromCharCode(ne(2));break;case 117:s+=String.fromCharCode(ne(4));break;case 85:s+=String.fromCharCode(ne(8));break;case 116:s+="\t";break;case 98:s+="\b";break;case 118:s+="\v";break;case 102:s+="\f";break;case 48:s+="\0";break;case 13:10===i.charCodeAt(o)&&++o;case 10:e.locations&&(_=o,++g);break;default:s+=String.fromCharCode(r)}}else 13!==r&&10!==r&&8232!==r&&8233!==r||C(h,"Unterminated string constant"),s+=String.fromCharCode(r),++o}}(t);case 47:return function(){var t=i.charCodeAt(o+1);return f?(++o,te()):61===t?Jt(_t,2):Jt(ft,1)}();case 37:case 42:return 61===i.charCodeAt(o+1)?Jt(_t,2):Jt(Pt,1);case 124:case 38:return function(t){var e=i.charCodeAt(o+1);return e===t?Jt(124===t?xt:yt,2):61===e?Jt(_t,2):Jt(124===t?wt:kt,1)}(t);case 94:return 61===i.charCodeAt(o+1)?Jt(_t,2):Jt(bt,1);case 43:case 45:return function(t){var e=i.charCodeAt(o+1);return e===t?45==e&&62==i.charCodeAt(o+2)&&jt.test(i.slice(m,o))?(o+=3,Yt(),Kt(),Xt()):Jt(vt,2):61===e?Jt(_t,2):Jt(At,1)}(t);case 60:case 62:return function(t){var e=i.charCodeAt(o+1),n=1;return e===t?(n=62===t&&62===i.charCodeAt(o+2)?3:2,61===i.charCodeAt(o+n)?Jt(_t,n+1):Jt(It,n)):33==e&&60==t&&45==i.charCodeAt(o+2)&&45==i.charCodeAt(o+3)?(o+=4,Yt(),Kt(),Xt()):(61===e&&(n=61===i.charCodeAt(o+2)?3:2),Jt(St,n))}(t);case 61:case 33:return function(t){return 61===i.charCodeAt(o+1)?Jt(Ct,61===i.charCodeAt(o+2)?3:2):Jt(61===t?gt:mt,1)}(t);case 126:return Jt(mt,1)}return!1}function Xt(t){if(t?o=h+1:h=o,e.locations&&(l=new Wt),t)return te();if(o>=n)return Zt(E);var s=i.charCodeAt(o);if(Ut(s)||92===s)return re();var r=Qt(s);if(!1===r){var a=String.fromCharCode(s);if("\\"===a||Dt.test(a))return re();C(o,"Unexpected character '"+a+"'")}return r}function Jt(t,e){var n=i.slice(o,o+e);o+=e,Zt(t,n)}function te(){for(var t,e,s=o;;){o>=n&&C(s,"Unterminated regular expression");var r=i.charAt(o);if(jt.test(r)&&C(s,"Unterminated regular expression"),t)t=!1;else{if("["===r)e=!0;else if("]"===r&&e)e=!1;else if("/"===r&&!e)break;t="\\"===r}++o}var a=i.slice(s,o);++o;var h=se();h&&!/^[gmsiy]*$/.test(h)&&C(s,"Invalid regexp flag");try{var c=new RegExp(a,h)}catch(t){t instanceof SyntaxError&&C(s,t.message),C(t)}return Zt(A,c)}function ee(t,e){for(var n=o,s=0,r=0,a=null==e?1/0:e;r<a;++r){var h,c=i.charCodeAt(o);if((h=c>=97?c-97+10:c>=65?c-65+10:c>=48&&c<=57?c-48:1/0)>=t)break;++o,s=s*t+h}return o===n||null!=e&&o-n!==e?null:s}function ie(t){var e=o,n=!1,s=48===i.charCodeAt(o);t||null!==ee(10)||C(e,"Invalid number"),46===i.charCodeAt(o)&&(++o,ee(10),n=!0);var r=i.charCodeAt(o);69!==r&&101!==r||(43!==(r=i.charCodeAt(++o))&&45!==r||++o,null===ee(10)&&C(e,"Invalid number"),n=!0),Ut(i.charCodeAt(o))&&C(o,"Identifier directly after number");var a,h=i.slice(e,o);return n?a=parseFloat(h):s&&1!==h.length?/[89]/.test(h)||b?C(e,"Invalid number"):a=parseInt(h,8):a=parseInt(h,10),Zt(I,a)}function ne(t){var e=ee(16,t);return null===e&&C(h,"Bad character escape sequence"),e}function se(){Lt=!1;for(var t,e=!0,n=o;;){var s=i.charCodeAt(o);if(Ht(s))Lt&&(t+=i.charAt(o)),++o;else{if(92!==s)break;Lt||(t=i.slice(n,o)),Lt=!0,117!=i.charCodeAt(++o)&&C(o,"Expecting Unicode escape sequence \\uXXXX"),++o;var r=ne(4),a=String.fromCharCode(r);a||C(o-1,"Invalid Unicode escape"),(e?Ut(r):Ht(r))||C(o-4,"Invalid Unicode escape"),t+=a}e=!1}return Lt?t:i.slice(n,o)}function re(){var t=se(),e=T;return!Lt&&Rt(t)&&(e=it[t]),Zt(e,t)}function ae(){v=h,m=c,x=u,Xt()}function oe(t){if(b=t,o=h,e.locations)for(;o<_;)_=i.lastIndexOf("\n",_-2)+1,--g;Kt(),Xt()}function he(){this.type=null,this.start=h,this.end=null}function ce(){this.start=l,this.end=null,null!==s&&(this.source=s)}function le(){var t=new he;return e.locations&&(t.loc=new ce),e.directSourceFile&&(t.sourceFile=e.directSourceFile),e.ranges&&(t.range=[h,0]),t}function ue(t){var i=new he;return i.start=t.start,e.locations&&(i.loc=new ce,i.loc.start=t.loc.start),e.ranges&&(i.range=[t.range[0],0]),i}function pe(t,i){return t.type=i,t.end=m,e.locations&&(t.loc.end=x),e.ranges&&(t.range[1]=m),t}function de(t){return e.ecmaVersion>=5&&"ExpressionStatement"===t.type&&"Literal"===t.expression.type&&"use strict"===t.expression.value}function fe(t){if(p===t)return ae(),!0}function ge(){return!e.strictSemicolons&&(p===E||p===at||jt.test(i.slice(m,h)))}function _e(){fe(lt)||ge()||me()}function ve(t){p===t?ae():me()}function me(){C(h,"Unexpected token")}function xe(t){"Identifier"!==t.type&&"MemberExpression"!==t.type&&C(t.start,"Assigning to rvalue"),b&&"Identifier"===t.type&&zt(t.name)&&C(t.start,"Assigning to "+t.name+" in strict mode")}var ye={kind:"loop"},we={kind:"switch"};function be(){(p===ft||p===_t&&"/="==d)&&Xt(!0);var t=p,n=le();switch(t){case L:case N:ae();var s=t===L;fe(lt)||ge()?n.label=null:p!==T?me():(n.label=Re(),_e());for(var r=0;r<w.length;++r){var a=w[r];if(null==n.label||a.name===n.label.name){if(null!=a.kind&&(s||"loop"===a.kind))break;if(n.label&&s)break}}return r===w.length&&C(n.start,"Unsyntactic "+t.keyword),pe(n,s?"BreakStatement":"ContinueStatement");case z:return ae(),_e(),pe(n,"DebuggerStatement");case V:return ae(),w.push(ye),n.body=be(),w.pop(),ve($),n.test=ke(),_e(),pe(n,"DoWhileStatement");case F:if(ae(),w.push(ye),ve(ot),p===lt)return Se(n,null);if(p===Z){var o=le();return ae(),Ae(o,!0),pe(o,"VariableDeclaration"),1===o.declarations.length&&fe(et)?Ie(n,o):Se(n,o)}return o=Pe(!1,!0),fe(et)?(xe(o),Ie(n,o)):Se(n,o);case j:return ae(),Ne(n,!0);case q:return ae(),n.test=ke(),n.consequent=be(),n.alternate=fe(B)?be():null,pe(n,"IfStatement");case U:return y||e.allowReturnOutsideFunction||C(h,"'return' outside of function"),ae(),fe(lt)||ge()?n.argument=null:(n.argument=Pe(),_e()),pe(n,"ReturnStatement");case H:ae(),n.discriminant=ke(),n.cases=[],ve(rt),w.push(we);for(var c,l;p!=at;)if(p===M||p===R){var u=p===M;c&&pe(c,"SwitchCase"),n.cases.push(c=le()),c.consequent=[],ae(),u?c.test=Pe():(l&&C(v,"Multiple default clauses"),l=!0,c.test=null),ve(ut)}else c||me(),c.consequent.push(be());return c&&pe(c,"SwitchCase"),ae(),w.pop(),pe(n,"SwitchStatement");case W:return ae(),jt.test(i.slice(m,h))&&C(m,"Illegal newline after throw"),n.argument=Pe(),_e(),pe(n,"ThrowStatement");case G:if(ae(),n.block=Ce(),n.handler=null,p===O){var f=le();ae(),ve(ot),f.param=Re(),b&&zt(f.param.name)&&C(f.param.start,"Binding "+f.param.name+" in strict mode"),ve(ht),f.guard=null,f.body=Ce(),n.handler=pe(f,"CatchClause")}return n.guardedHandlers=S,n.finalizer=fe(D)?Ce():null,n.handler||n.finalizer||C(n.start,"Missing catch or finally clause"),pe(n,"TryStatement");case Z:return ae(),Ae(n),_e(),pe(n,"VariableDeclaration");case $:return ae(),n.test=ke(),w.push(ye),n.body=be(),w.pop(),pe(n,"WhileStatement");case Y:return b&&C(h,"'with' in strict mode"),ae(),n.object=ke(),n.body=be(),pe(n,"WithStatement");case rt:return Ce();case lt:return ae(),pe(n,"EmptyStatement");default:var g=d,_=Pe();if(t===T&&"Identifier"===_.type&&fe(ut)){for(r=0;r<w.length;++r)w[r].name===g&&C(_.start,"Label '"+g+"' is already declared");var x=p.isLoop?"loop":p===H?"switch":null;return w.push({name:g,kind:x}),n.body=be(),w.pop(),n.label=_,pe(n,"LabeledStatement")}return n.expression=_,_e(),pe(n,"ExpressionStatement")}}function ke(){ve(ot);var t=Pe();return ve(ht),t}function Ce(t){var e,i=le(),n=!0,s=!1;for(i.body=[],ve(rt);!fe(at);){var r=be();i.body.push(r),n&&t&&de(r)&&(e=s,oe(s=!0)),n=!1}return s&&!e&&oe(!1),pe(i,"BlockStatement")}function Se(t,e){return t.init=e,ve(lt),t.test=p===lt?null:Pe(),ve(lt),t.update=p===ht?null:Pe(),ve(ht),t.body=be(),w.pop(),pe(t,"ForStatement")}function Ie(t,e){return t.left=e,t.right=Pe(),ve(ht),t.body=be(),w.pop(),pe(t,"ForInStatement")}function Ae(t,e){for(t.declarations=[],t.kind="var";;){var i=le();if(i.id=Re(),b&&zt(i.id.name)&&C(i.id.start,"Binding "+i.id.name+" in strict mode"),i.init=fe(gt)?Pe(!0,e):null,t.declarations.push(pe(i,"VariableDeclarator")),!fe(ct))break}return t}function Pe(t,e){var i=Te(e);if(!t&&p===ct){var n=ue(i);for(n.expressions=[i];fe(ct);)n.expressions.push(Te(e));return pe(n,"SequenceExpression")}return i}function Te(t){var e=function(t){var e=function(t){return function t(e,i,n){var s=p.binop;if(null!=s&&(!n||p!==et)&&s>i){var r=ue(e);r.left=e,r.operator=d;var a=p;ae(),r.right=t(Ee(),s,n);var o=pe(r,a===xt||a===yt?"LogicalExpression":"BinaryExpression");return t(o,i,n)}return e}(Ee(),-1,t)}(t);if(fe(dt)){var i=ue(e);return i.test=e,i.consequent=Pe(!0),ve(ut),i.alternate=Pe(!0,t),pe(i,"ConditionalExpression")}return e}(t);if(p.isAssign){var i=ue(e);return i.operator=d,i.left=e,ae(),i.right=Te(t),xe(e),pe(i,"AssignmentExpression")}return e}function Ee(){if(p.prefix){var t=le(),e=p.isUpdate;return t.operator=d,t.prefix=!0,f=!0,ae(),t.argument=Ee(),e?xe(t.argument):b&&"delete"===t.operator&&"Identifier"===t.argument.type&&C(t.start,"Deleting local variable in strict mode"),pe(t,e?"UpdateExpression":"UnaryExpression")}for(var i=Le(Me());p.postfix&&!ge();)(t=ue(i)).operator=d,t.prefix=!1,t.argument=i,xe(i),ae(),i=pe(t,"UpdateExpression");return i}function Le(t,e){var i;return fe(pt)?((i=ue(t)).object=t,i.property=Re(!0),i.computed=!1,Le(pe(i,"MemberExpression"),e)):fe(nt)?((i=ue(t)).object=t,i.property=Pe(),i.computed=!0,ve(st),Le(pe(i,"MemberExpression"),e)):!e&&fe(ot)?((i=ue(t)).callee=t,i.arguments=ze(ht,!1),Le(pe(i,"CallExpression"),e)):t}function Me(){switch(p){case Q:var t=le();return ae(),pe(t,"ThisExpression");case T:return Re();case I:case P:case A:return(t=le()).value=d,t.raw=i.slice(h,c),ae(),pe(t,"Literal");case X:case J:case tt:return(t=le()).value=p.atomValue,t.raw=p.keyword,ae(),pe(t,"Literal");case ot:var n=l,s=h;ae();var r=Pe();return r.start=s,r.end=c,e.locations&&(r.loc.start=n,r.loc.end=u),e.ranges&&(r.range=[s,c]),ve(ht),r;case nt:return t=le(),ae(),t.elements=ze(st,!0,!0),pe(t,"ArrayExpression");case rt:return function(){var t=le(),i=!0,n=!1;for(t.properties=[],ae();!fe(at);){if(i)i=!1;else if(ve(ct),e.allowTrailingCommas&&fe(at))break;var s,r={key:Oe()},a=!1;if(fe(ut)?(r.value=Pe(!0),s=r.kind="init"):e.ecmaVersion>=5&&"Identifier"===r.key.type&&("get"===r.key.name||"set"===r.key.name)?(a=n=!0,s=r.kind=r.key.name,r.key=Oe(),p!==ot&&me(),r.value=Ne(le(),!1)):me(),"Identifier"===r.key.type&&(b||n))for(var o=0;o<t.properties.length;++o){var h=t.properties[o];if(h.key.name===r.key.name){var c=s==h.kind||a&&"init"===h.kind||"init"===s&&("get"===h.kind||"set"===h.kind);c&&!b&&"init"===s&&"init"===h.kind&&(c=!1),c&&C(r.key.start,"Redefinition of property")}}t.properties.push(r)}return pe(t,"ObjectExpression")}();case j:return t=le(),ae(),Ne(t,!1);case K:return function(){var t=le();return ae(),t.callee=Le(Me(),!0),fe(ot)?t.arguments=ze(ht,!1):t.arguments=S,pe(t,"NewExpression")}();default:me()}}function Oe(){return p===I||p===P?Me():Re(!0)}function Ne(t,e){p===T?t.id=Re():e?me():t.id=null,t.params=[];var i=!0;for(ve(ot);!fe(ht);)i?i=!1:ve(ct),t.params.push(Re());var n=y,s=w;if(y=!0,w=[],t.body=Ce(!0),y=n,w=s,b||t.body.body.length&&de(t.body.body[0]))for(var r=t.id?-1:0;r<t.params.length;++r){var a=r<0?t.id:t.params[r];if((Nt(a.name)||zt(a.name))&&C(a.start,"Defining '"+a.name+"' in strict mode"),r>=0)for(var o=0;o<r;++o)a.name===t.params[o].name&&C(a.start,"Argument name clash in strict mode")}return pe(t,e?"FunctionDeclaration":"FunctionExpression")}function ze(t,i,n){for(var s=[],r=!0;!fe(t);){if(r)r=!1;else if(ve(ct),i&&e.allowTrailingCommas&&fe(t))break;n&&p===ct?s.push(null):s.push(Pe(!0))}return s}function Re(t){var n=le();return t&&"everywhere"==e.forbidReserved&&(t=!1),p===T?(!t&&(e.forbidReserved&&(3===e.ecmaVersion?Mt:Ot)(d)||b&&Nt(d))&&-1==i.slice(h,c).indexOf("\\")&&C(h,"The keyword '"+d+"' is reserved"),n.name=d):t&&p.keyword?n.name=p.keyword:me(),f=!1,ae(),pe(n,"Identifier")}},"object"==typeof t&&"object"==typeof e?u(t):(n=[t],(r="function"==typeof(s=u)?s.apply(t,n):s)===o||(e.exports=r)),f.version||(f=null));function g(t,e){return(d.acorn||f).parse(t,e)}var _={"+":"__add","-":"__subtract","*":"__multiply","/":"__divide","%":"__modulo","==":"__equals","!=":"__equals"},m={"-":"__negate","+":"__self"},y=l.each(["add","subtract","multiply","divide","modulo","equals","negate"],(function(t){this["__"+t]="#"+t}),{__self:function(){return this}});function w(t,e,i){var n=_[e];if(t&&t[n]){var s=t[n](i);return"!="===e?!s:s}switch(e){case"+":return t+i;case"-":return t-i;case"*":return t*i;case"/":return t/i;case"%":return t%i;case"==":return t==i;case"!=":return t!=i}}function b(t,e){var i=m[t];if(e&&e[i])return e[i]();switch(t){case"+":return+e;case"-":return-e}}function k(t,e){if(!t)return"";var i=[];function n(t){for(var e=0,n=i.length;e<n;e++){var s=i[e];if(s[0]>=t)break;t+=s[1]}return t}function s(e){return t.substring(n(e.range[0]),n(e.range[1]))}function r(e,s){for(var r=n(e.range[0]),a=n(e.range[1]),o=0,h=i.length-1;h>=0;h--)if(r>i[h][0]){o=h+1;break}i.splice(o,0,[r,s.length-a+r]),t=t.substring(0,r)+s+t.substring(a)}var o,l=(e=e||{}).url||"",u=ut.agent,p=u.versionNumber,d=!1,f=e.sourceMaps,v=e.source||t,x=/\r\n|\n|\r/gm,y=e.offset||0;if(f&&(u.chrome&&p>=30||u.webkit&&p>=537.76||u.firefox&&p>=23||u.node)){if(u.node)y-=2;else if(h&&l&&!h.location.href.indexOf(l)){var w=c.getElementsByTagName("html")[0].innerHTML;y=w.substr(0,w.indexOf(t)+1).match(x).length+1}var b=["AA"+function(t){var e="";for(t=(Math.abs(t)<<1)+(t<0?1:0);t||!e;){var i=31&t;(t>>=5)&&(i|=32),e+="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"[i]}return e}((d=y>0&&!(u.chrome&&p>=36||u.safari&&p>=600||u.firefox&&p>=40||u.node))?0:y)+"A"];b.length=(t.match(x)||[]).length+1+(d?y:0),o={version:3,file:l,names:[],mappings:b.join(";AACA"),sourceRoot:"",sources:[l],sourcesContent:[v]}}return function e(i,a){if(i){for(var o in i)if("range"!==o&&"loc"!==o){var h=i[o];if(Array.isArray(h))for(var c=0,l=h.length;c<l;c++)e(h[c],i);else h&&"object"==typeof h&&e(h,i)}switch(i.type){case"UnaryExpression":if(i.operator in m&&"Literal"!==i.argument.type){var u=s(i.argument);r(i,'$__("'+i.operator+'", '+u+")")}break;case"BinaryExpression":if(i.operator in _&&"Literal"!==i.left.type){var p=s(i.left),d=s(i.right),f=function(e,i){return t.substring(n(e.range[1]),n(i.range[0]))}(i.left,i.right),g=i.operator;r(i,"__$__("+p+","+f.replace(new RegExp("\\"+g),'"'+g+'"')+", "+d+")")}break;case"UpdateExpression":case"AssignmentExpression":var v=a&&a.type;if(!("ForStatement"===v||"BinaryExpression"===v&&/^[=!<>]/.test(a.operator)||"MemberExpression"===v&&a.computed))if("UpdateExpression"===i.type){var x=(u=s(i.argument))+" = "+(y="__$__("+u+', "'+i.operator[0]+'", 1)');i.prefix?x="("+x+")":"AssignmentExpression"!==v&&"VariableDeclarator"!==v&&"BinaryExpression"!==v||(s(a.left||a.id)===u&&(x=y),x=u+"; "+x),r(i,x)}else if(/^.=$/.test(i.operator)&&"Literal"!==i.left.type){p=s(i.left),d=s(i.right);var y=p+" = __$__("+p+', "'+i.operator[0]+'", '+d+")";r(i,/^\(.*\)$/.test(s(i))?"("+y+")":y)}break;case"ExportDefaultDeclaration":r({range:[i.start,i.declaration.start]},"module.exports = ");break;case"ExportNamedDeclaration":var w=i.declaration,b=i.specifiers;if(w){var k=w.declarations;k&&(k.forEach((function(t){r(t,"module.exports."+s(t))})),r({range:[i.start,w.start+w.kind.length]},""))}else if(b){var C=b.map((function(t){var e=s(t);return"module.exports."+e+" = "+e+"; "})).join("");C&&r(i,C)}}}}(g(t,{ranges:!0,preserveParens:!0,sourceType:"module"})),o&&(d&&(t=new Array(y+1).join("\n")+t),/^(inline|both)$/.test(f)&&(t+="\n//# sourceMappingURL=data:application/json;base64,"+a.btoa(unescape(encodeURIComponent(JSON.stringify(o))))),t+="\n//# sourceURL="+(l||"paperscript")),{url:l,source:v,code:t,map:o}}function C(t,e,i){ut=e;var n,s=e.getView(),r=/\btool\.\w+|\s+on(?:Key|Mouse)(?:Up|Down|Move|Drag)\b/.test(t)&&!/\bnew\s+Tool\b/.test(t)?new st:null,a=r?r._events:[],o=["onFrame","onResize"].concat(a),h=[],u=[],p="object"==typeof t?t:k(t,i);function d(e,i){for(var n in e)!i&&/^_/.test(n)||!new RegExp("([\\b\\s\\W]|^)"+n.replace(/\$/g,"\\$")+"\\b").test(t)||(h.push(n),u.push(e[n]))}t=p.code,d({__$__:w,$__:b,paper:e,tool:r},!0),d(e),t="var module = { exports: {} }; "+t,(m=l.each(o,(function(e){new RegExp("\\s+"+e+"\\b").test(t)&&(h.push(e),this.push("module.exports."+e+" = "+e+";"))}),[]).join("\n"))&&(t+="\n"+m),t+="\nreturn module.exports;";var f=ut.agent;if(c&&(f.chrome||f.firefox&&f.versionNumber<40)){var g=c.createElement("script"),_=c.head||c.getElementsByTagName("head")[0];f.firefox&&(t="\n"+t),g.appendChild(c.createTextNode("document.__paperscript__ = function("+h+") {"+t+"\n}")),_.appendChild(g),n=c.__paperscript__,delete c.__paperscript__,_.removeChild(g)}else n=Function(h,t);var m,x=(m=n&&n.apply(e,u))||{};return l.each(a,(function(t){var e=x[t];e&&(r[t]=e)})),s&&(x.onResize&&s.setOnResize(x.onResize),s.emit("resize",{size:s.size,delta:new v}),x.onFrame&&s.setOnFrame(x.onFrame),s.requestUpdate()),m}function S(t){if(/^text\/(?:x-|)paperscript$/.test(t.type)&&"true"!==p.getAttribute(t,"ignore")){var e=p.getAttribute(t,"canvas"),i=c.getElementById(e),n=t.src||t.getAttribute("data-src"),s=p.hasAttribute(t,"async");if(!i)throw new Error('Unable to find canvas with id "'+e+'"');var r=p.get(i.getAttribute("data-paper-scope"))||(new p).setup(i);return i.setAttribute("data-paper-scope",r._id),n?at.request({url:n,async:s,mimeType:"text/plain",onLoad:function(t){C(t,r,n)}}):C(t.innerHTML,r,t.baseURI),t.setAttribute("data-paper-ignore","true"),r}}function I(){l.each(c&&c.getElementsByTagName("script"),S)}return v.inject(y),x.inject(y),W.inject(y),h&&("complete"===c.readyState?setTimeout(I):K.add(h,{load:I})),{compile:k,execute:C,load:function(t){return t?S(t):I()},parse:g,calculateBinary:w,calculateUnary:b}}.call(this);var ut=new(p.inject(l.exports,{Base:l,Numerical:g,Key:et,DomEvent:K,DomElement:Y,document:c,window:h,Symbol:M,PlacedSymbol:L}));return ut.agent.node&&i(30)(ut),(r="function"==typeof(s=ut)?s.call(e,i,e,t):s)===o||(t.exports=r),ut}).call(this,"object"==typeof self?self:null)},function(t,e,i){t.exports=i.p+"app/img/hand-with-megaphone-.png"},function(t,e,i){t.exports=i.p+"app/img/croco-intro.png"},function(t,e,i){t.exports=i.p+"app/img/factory-5.png"},function(t,e,i){t.exports='<div class="info-scene">\n    <div class="scene-blur"></div>\n    <div class="info-scene__text">\n        <h2 class="info-scene__title" data-action-scene-info-title></h2>\n        <p class="info-scene__description" data-action-scene-info-description></p>\n        <button class="info-scene__button" data-action-scene-info-button></button>\n    </div>\n\n    <img src="'+i(3)+'" alt="" class="croco">\n</div>\n'},function(t,e,i){t.exports=i.p+"app/img/croco.png"},function(t,e,i){t.exports='<div class="circus-wrapper">\n    <img class="circus" src="'+i(27)+'" alt="">\n\x3c!--        <div class="speaker-wrapper">--\x3e\n\x3c!--            <img class="voice" src="../../../img/voice.png" alt="">--\x3e\n\x3c!--        </div>--\x3e\n    <canvas id="croco" class="y-offset absolute"></canvas>\n</div>\n'},function(t,e,i){t.exports=i.p+"app/img/fishnet.png"},function(t,e,i){t.exports=i.p+"app/img/101.png"},function(t,e){t.exports='<div class="sky">\n    <div class="sun">\n    </div>\n    <div class="cloud-wrapper delay-1">\n        <div class="cloud c2"></div>\n    </div>\n    <div class="cloud-wrapper delay-2">\n        <div class="cloud c3"></div>\n    </div>\n</div>\n\n<div class="canvas-wrapper">\n    <canvas id="water" class="y-offset"></canvas>\n    <canvas id="croco" class="y-offset absolute"></canvas>\n    <canvas id="beach" class="y-offset"></canvas>\n</div>\n<div class="action-icons">\n    <div class="icon-wrapper">\n        <div class="icon" data-action-icon="1">\n            <div class="icons-popover" data-action-popover="1"></div>\n        </div>\n    </div>\n    <div class="icon-wrapper">\n        <div class="icon" data-action-icon="2">\n            <div class="icons-popover" data-action-popover="2"></div>\n        </div>\n    </div>\n    <div class="icon-wrapper">\n        <div class="icon" data-action-icon="3">\n            <div class="icons-popover" data-action-popover="3"></div>\n        </div>\n    </div>\n</div>\n\n<div class="sea-decorations p-1">\n    <div class="croco-full" data-crocodile-img></div>\n</div>\n\n<div class="beach-decorations">\n    <div class="shell type-1 bg"></div>\n    <div class="shell type-2 bg"></div>\n    <div class="shell type-3 bg"></div>\n    <div class="crab bg"></div>\n    <div class="umbrella bg"></div>\n</div>'},function(t,e,i){t.exports=i.p+"app/img/meat.jpg"},function(t,e,i){t.exports=i.p+"app/img/101-2.png"},function(t,e){t.exports='<div class="sky-gradient sky-gradient-16"></div>\n\n<div class="back-row-toggle splat-toggle">\n    <div data-rain-front class="rain front-row"></div>\n    <div data-rain-back class="rain back-row"></div>\n</div>\n\n<div class="canvas-wrapper">\n    <canvas id="water" class="y-offset"></canvas>\n    <canvas id="croco" class="y-offset absolute"></canvas>\n    <canvas id="beach" class="y-offset-2"></canvas>\n</div>\n<div class="action-icons">\n    <div class="icon-wrapper">\n        <div class="icon" data-action-icon="1">\n            <div class="icons-popover" data-action-popover="1"></div>\n        </div>\n    </div>\n    <div class="icon-wrapper">\n        <div class="icon" data-action-icon="2">\n            <div class="icons-popover" data-action-popover="2"></div>\n        </div>\n    </div>\n    <div class="icon-wrapper">\n        <div class="icon" data-action-icon="3">\n            <div class="icons-popover" data-action-popover="3"></div>\n        </div>\n    </div>\n</div>\n\n<div class="sea-decorations p-1">\n    <div class="croco"></div>\n</div>\n<div class="beach-decorations">\n    <div class="shell type-4 bg"></div>\n    <div class="shell type-5 bg"></div>\n    <div class="shell type-6 bg"></div>\n    <div class="snail bg"></div>\n</div>'},function(t,e,i){t.exports=i.p+"app/img/water-clean.png"},function(t,e,i){t.exports=i.p+"app/img/factory-line.png"},function(t,e,i){t.exports=i.p+"app/img/wait.png"},function(t,e){t.exports='<div class="decorations decorations-top">\n    <div class="sky hide-clouds h-21">\n        <div class="sun">\n        </div>\n        <div class="cloud-wrapper delay-1">\n            <div class="cloud c2"></div>\n        </div>\n        <div class="cloud-wrapper delay-2">\n            <div class="cloud c3"></div>\n        </div>\n    </div>\n    <div class="wrapper">\n        <div class="factory-wrapper">\n            <div class="factory factory-4"></div>\n            <div class="factory factory-2">\n                <div class="smoke p-1">\n                    <span class="s0"></span>\n                    <span class="s1"></span>\n                    <span class="s2"></span>\n                    <span class="s3"></span>\n                    <span class="s4"></span>\n                    <span class="s5"></span>\n                    <span class="s6"></span>\n                    <span class="s7"></span>\n                    <span class="s8"></span>\n                    <span class="s9"></span>\n                </div>\n                <div class="smoke p-2 bigger">\n                    <span class="s0"></span>\n                    <span class="s1"></span>\n                    <span class="s2"></span>\n                    <span class="s3"></span>\n                    <span class="s4"></span>\n                    <span class="s5"></span>\n                    <span class="s6"></span>\n                    <span class="s7"></span>\n                    <span class="s8"></span>\n                    <span class="s9"></span>\n                </div>\n            </div>\n            <div class="factory factory-5"></div>\n            <div class="tree"></div>\n            <div class="tree type-2"></div>\n        </div>\n        <div class="road"></div>\n\n        <div class="action-icons fixed-top">\n            <div class="icon-wrapper">\n                <div class="icon" data-action-icon="1">\n                    <div class="icons-popover" data-action-popover="1"></div>\n                </div>\n            </div>\n            <div class="icon-wrapper">\n                <div class="icon" data-action-icon="2">\n                    <div class="icons-popover" data-action-popover="2"></div>\n                </div>\n            </div>\n            <div class="icon-wrapper">\n                <div class="icon" data-action-icon="3">\n                    <div class="icons-popover" data-action-popover="3"></div>\n                </div>\n            </div>\n        </div>\n\n        <div class="rocks">\n            <div class="rock type-1 p-1"></div>\n            <div class="rock type-2 p-2"></div>\n        </div>\n    </div>\n</div>\n\n<canvas id="water" class="y-offset-3"></canvas>\n\n<div class="sea-decorations p-2">\n    <div class="croco"></div>\n</div>\n<div class="decorations decorations-bottom" data-grass-container></div>'},function(t,e,i){t.exports=i.p+"app/img/hospital.png"},function(t,e,i){t.exports=i.p+"app/img/shapito.png"},function(t,e,i){t.exports=i.p+"app/img/lifeguards.png"},function(t,e,i){t.exports='<div class="decorations decorations-top no-height">\n    <div class="sky height-50">\n        <div class="sun">\n        </div>\n        <div class="cloud-wrapper delay-1">\n            <div class="cloud c2"></div>\n        </div>\n        <div class="cloud-wrapper delay-2">\n            <div class="cloud c3"></div>\n        </div>\n    </div>\n    <div class="action-icons">\n        <div class="icon-wrapper">\n            <div class="icon" data-action-icon="1">\n                <div class="icons-popover" data-action-popover="1"></div>\n            </div>\n        </div>\n        <div class="icon-wrapper">\n            <div class="icon" data-action-icon="2">\n                <div class="icons-popover" data-action-popover="2"></div>\n            </div>\n        </div>\n        <div class="icon-wrapper">\n            <div class="icon" data-action-icon="3">\n                <div class="icons-popover" data-action-popover="3"></div>\n            </div>\n        </div>\n    </div>\n</div>\n\n<canvas id="water" class="y-offset-3"></canvas>\n<div class="decorations decorations-bottom" data-grass-container></div>\n<div class="decorations decorations-bottom pier">\n    <img src="'+i(31)+'" alt="">\n</div>\n'},function(t,e,i){t.exports='<div class="info-scene">\n    <div class="scene-blur"></div>\n    <div class="info-scene__text">\n        <h2 class="info-scene__title" data-action-scene-info-title></h2>\n        <p class="info-scene__description" data-action-scene-info-description></p>\n        <button class="info-scene__button" data-action-scene-info-button="end"></button>\n    </div>\n\n    \x3c!-- TODO: mb use dead croco image --\x3e\n    <img src="'+i(3)+'" alt="" class="croco">\n</div>\n'},function(t,e,i){t.exports='<div class="final">\n    <div class="sky no-background">\n        <div class="sun">\n        </div>\n        <div class="cloud-wrapper delay-1">\n            <div class="cloud c2"></div>\n        </div>\n        <div class="cloud-wrapper delay-2">\n            <div class="cloud c3"></div>\n        </div>\n    </div>\n\n    <div class="cube">\n        \x3c!--Front--\x3e\n        <div></div>\n        \x3c!--Back--\x3e\n        <div></div>\n        \x3c!--Left--\x3e\n        <div></div>\n        \x3c!--Right--\x3e\n        <div></div>\n        \x3c!--Top--\x3e\n        <div></div>\n        \x3c!--Bottom--\x3e\n        <div></div>\n\n        <img src="'+i(32)+'" alt="">\n    </div>\n\n    <div class="action-icons">\n        <div class="icon-wrapper">\n            <div class="icon" data-action-icon="1">\n                <div class="icons-popover" data-action-popover="1"></div>\n            </div>\n        </div>\n        <div class="icon-wrapper">\n            <div class="icon" data-action-icon="2">\n                <div class="icons-popover" data-action-popover="2"></div>\n            </div>\n        </div>\n    </div>\n</div>'},function(t,e,i){t.exports=i.p+"app/img/croco-in-nature.png"},function(t,e,i){t.exports=i.p+"app/img/city-hall.png"},function(t,e){t.exports='<div class="fireworks-wrapper" data-scene-win>\n    <div class="pyro">\n        <div class="before"></div>\n        <div class="after"></div>\n    </div>\n</div>'},function(t,e,i){t.exports=i.p+"app/img/circus.png"},function(t,e){},function(t,e,i){"use strict";i.r(e),i.d(e,"Node",(function(){return ot})),i.d(e,"Parser",(function(){return H})),i.d(e,"Position",(function(){return N})),i.d(e,"SourceLocation",(function(){return z})),i.d(e,"TokContext",(function(){return lt})),i.d(e,"Token",(function(){return Ot})),i.d(e,"TokenType",(function(){return _})),i.d(e,"defaultOptions",(function(){return V})),i.d(e,"getLineInfo",(function(){return R})),i.d(e,"isIdentifierChar",(function(){return g})),i.d(e,"isIdentifierStart",(function(){return f})),i.d(e,"isNewLine",(function(){return S})),i.d(e,"keywordTypes",(function(){return y})),i.d(e,"lineBreak",(function(){return k})),i.d(e,"lineBreakG",(function(){return C})),i.d(e,"nonASCIIwhitespace",(function(){return I})),i.d(e,"parse",(function(){return Bt})),i.d(e,"parseExpressionAt",(function(){return Dt})),i.d(e,"tokContexts",(function(){return ut})),i.d(e,"tokTypes",(function(){return b})),i.d(e,"tokenizer",(function(){return Ft})),i.d(e,"version",(function(){return Vt}));var n={3:"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile",5:"class enum extends super const export import",6:"enum",strict:"implements interface let package private protected public static yield",strictBind:"eval arguments"},s="break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this",r={5:s,"5module":s+" export import",6:s+" const class extends export import super"},a=/^in(stanceof)?$/,o="ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙՠ-ֈא-תׯ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࡠ-ࡪࢠ-ࢴࢶ-ࢽऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱৼਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡૹଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘ-ౚౠౡಀಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൔ-ൖൟ-ൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄຆ-ຊຌ-ຣລວ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏽᏸ-ᏽᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡸᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᲀ-ᲈᲐ-ᲺᲽ-Ჿᳩ-ᳬᳮ-ᳳᳵᳶᳺᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄯㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿯ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞿꟂ-Ᶎꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꣽꣾꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭧꭰ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ",h="‌‍·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߽߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛࣓-ࣣ࣡-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯৾ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ૺ-૿ଁ-ଃ଼ା-ୄେୈୋ-୍ୖୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఄా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ഀ-ഃ഻഼ാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ංඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ຼ່-ໍ໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜔ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠐-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭᳴᳷-᳹᷀-᷹᷻-᷿‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯꘠-꘩꙯ꙴ-꙽ꚞꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧꢀꢁꢴ-ꣅ꣐-꣙꣠-꣱ꣿ-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︯︳︴﹍-﹏０-９＿",c=new RegExp("["+o+"]"),l=new RegExp("["+o+h+"]");o=h=null;var u=[0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,157,310,10,21,11,7,153,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,477,28,11,0,9,21,155,22,13,52,76,44,33,24,27,35,30,0,12,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,0,33,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,230,43,117,63,32,0,161,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,35,56,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,270,921,103,110,18,195,2749,1070,4050,582,8634,568,8,30,114,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,754,9486,286,50,2,18,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,2357,44,11,6,17,0,370,43,1301,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42710,42,4148,12,221,3,5761,15,7472,3104,541],p=[509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,525,10,176,2,54,14,32,9,16,3,46,10,54,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,4,9,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,232,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,135,4,60,6,26,9,1014,0,2,54,8,3,19723,1,5319,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,262,6,10,9,419,13,1495,6,110,6,6,9,792487,239];function d(t,e){for(var i=65536,n=0;n<e.length;n+=2){if((i+=e[n])>t)return!1;if((i+=e[n+1])>=t)return!0}}function f(t,e){return t<65?36===t:t<91||(t<97?95===t:t<123||(t<=65535?t>=170&&c.test(String.fromCharCode(t)):!1!==e&&d(t,u)))}function g(t,e){return t<48?36===t:t<58||!(t<65)&&(t<91||(t<97?95===t:t<123||(t<=65535?t>=170&&l.test(String.fromCharCode(t)):!1!==e&&(d(t,u)||d(t,p)))))}var _=function(t,e){void 0===e&&(e={}),this.label=t,this.keyword=e.keyword,this.beforeExpr=!!e.beforeExpr,this.startsExpr=!!e.startsExpr,this.isLoop=!!e.isLoop,this.isAssign=!!e.isAssign,this.prefix=!!e.prefix,this.postfix=!!e.postfix,this.binop=e.binop||null,this.updateContext=null};function v(t,e){return new _(t,{beforeExpr:!0,binop:e})}var m={beforeExpr:!0},x={startsExpr:!0},y={};function w(t,e){return void 0===e&&(e={}),e.keyword=t,y[t]=new _(t,e)}var b={num:new _("num",x),regexp:new _("regexp",x),string:new _("string",x),name:new _("name",x),eof:new _("eof"),bracketL:new _("[",{beforeExpr:!0,startsExpr:!0}),bracketR:new _("]"),braceL:new _("{",{beforeExpr:!0,startsExpr:!0}),braceR:new _("}"),parenL:new _("(",{beforeExpr:!0,startsExpr:!0}),parenR:new _(")"),comma:new _(",",m),semi:new _(";",m),colon:new _(":",m),dot:new _("."),question:new _("?",m),arrow:new _("=>",m),template:new _("template"),invalidTemplate:new _("invalidTemplate"),ellipsis:new _("...",m),backQuote:new _("`",x),dollarBraceL:new _("${",{beforeExpr:!0,startsExpr:!0}),eq:new _("=",{beforeExpr:!0,isAssign:!0}),assign:new _("_=",{beforeExpr:!0,isAssign:!0}),incDec:new _("++/--",{prefix:!0,postfix:!0,startsExpr:!0}),prefix:new _("!/~",{beforeExpr:!0,prefix:!0,startsExpr:!0}),logicalOR:v("||",1),logicalAND:v("&&",2),bitwiseOR:v("|",3),bitwiseXOR:v("^",4),bitwiseAND:v("&",5),equality:v("==/!=/===/!==",6),relational:v("</>/<=/>=",7),bitShift:v("<</>>/>>>",8),plusMin:new _("+/-",{beforeExpr:!0,binop:9,prefix:!0,startsExpr:!0}),modulo:v("%",10),star:v("*",10),slash:v("/",10),starstar:new _("**",{beforeExpr:!0}),_break:w("break"),_case:w("case",m),_catch:w("catch"),_continue:w("continue"),_debugger:w("debugger"),_default:w("default",m),_do:w("do",{isLoop:!0,beforeExpr:!0}),_else:w("else",m),_finally:w("finally"),_for:w("for",{isLoop:!0}),_function:w("function",x),_if:w("if"),_return:w("return",m),_switch:w("switch"),_throw:w("throw",m),_try:w("try"),_var:w("var"),_const:w("const"),_while:w("while",{isLoop:!0}),_with:w("with"),_new:w("new",{beforeExpr:!0,startsExpr:!0}),_this:w("this",x),_super:w("super",x),_class:w("class",x),_extends:w("extends",m),_export:w("export"),_import:w("import",x),_null:w("null",x),_true:w("true",x),_false:w("false",x),_in:w("in",{beforeExpr:!0,binop:7}),_instanceof:w("instanceof",{beforeExpr:!0,binop:7}),_typeof:w("typeof",{beforeExpr:!0,prefix:!0,startsExpr:!0}),_void:w("void",{beforeExpr:!0,prefix:!0,startsExpr:!0}),_delete:w("delete",{beforeExpr:!0,prefix:!0,startsExpr:!0})},k=/\r\n?|\n|\u2028|\u2029/,C=new RegExp(k.source,"g");function S(t,e){return 10===t||13===t||!e&&(8232===t||8233===t)}var I=/[\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]/,A=/(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g,P=Object.prototype,T=P.hasOwnProperty,E=P.toString;function L(t,e){return T.call(t,e)}var M=Array.isArray||function(t){return"[object Array]"===E.call(t)};function O(t){return new RegExp("^(?:"+t.replace(/ /g,"|")+")$")}var N=function(t,e){this.line=t,this.column=e};N.prototype.offset=function(t){return new N(this.line,this.column+t)};var z=function(t,e,i){this.start=e,this.end=i,null!==t.sourceFile&&(this.source=t.sourceFile)};function R(t,e){for(var i=1,n=0;;){C.lastIndex=n;var s=C.exec(t);if(!(s&&s.index<e))return new N(i,e-n);++i,n=s.index+s[0].length}}var V={ecmaVersion:9,sourceType:"script",onInsertedSemicolon:null,onTrailingComma:null,allowReserved:null,allowReturnOutsideFunction:!1,allowImportExportEverywhere:!1,allowAwaitOutsideFunction:!1,allowHashBang:!1,locations:!1,onToken:null,onComment:null,ranges:!1,program:null,sourceFile:null,directSourceFile:null,preserveParens:!1};function B(t){var e={};for(var i in V)e[i]=t&&L(t,i)?t[i]:V[i];if(e.ecmaVersion>=2015&&(e.ecmaVersion-=2009),null==e.allowReserved&&(e.allowReserved=e.ecmaVersion<5),M(e.onToken)){var n=e.onToken;e.onToken=function(t){return n.push(t)}}return M(e.onComment)&&(e.onComment=function(t,e){return function(i,n,s,r,a,o){var h={type:i?"Block":"Line",value:n,start:s,end:r};t.locations&&(h.loc=new z(this,a,o)),t.ranges&&(h.range=[s,r]),e.push(h)}}(e,e.onComment)),e}var D=2,F=1|D,j=4,q=8;function U(t,e){return D|(t?j:0)|(e?q:0)}var H=function(t,e,i){this.options=t=B(t),this.sourceFile=t.sourceFile,this.keywords=O(r[t.ecmaVersion>=6?6:"module"===t.sourceType?"5module":5]);var s="";if(!0!==t.allowReserved){for(var a=t.ecmaVersion;!(s=n[a]);a--);"module"===t.sourceType&&(s+=" await")}this.reservedWords=O(s);var o=(s?s+" ":"")+n.strict;this.reservedWordsStrict=O(o),this.reservedWordsStrictBind=O(o+" "+n.strictBind),this.input=String(e),this.containsEsc=!1,i?(this.pos=i,this.lineStart=this.input.lastIndexOf("\n",i-1)+1,this.curLine=this.input.slice(0,this.lineStart).split(k).length):(this.pos=this.lineStart=0,this.curLine=1),this.type=b.eof,this.value=null,this.start=this.end=this.pos,this.startLoc=this.endLoc=this.curPosition(),this.lastTokEndLoc=this.lastTokStartLoc=null,this.lastTokStart=this.lastTokEnd=this.pos,this.context=this.initialContext(),this.exprAllowed=!0,this.inModule="module"===t.sourceType,this.strict=this.inModule||this.strictDirective(this.pos),this.potentialArrowAt=-1,this.yieldPos=this.awaitPos=this.awaitIdentPos=0,this.labels=[],this.undefinedExports={},0===this.pos&&t.allowHashBang&&"#!"===this.input.slice(0,2)&&this.skipLineComment(2),this.scopeStack=[],this.enterScope(1),this.regexpState=null},W={inFunction:{configurable:!0},inGenerator:{configurable:!0},inAsync:{configurable:!0},allowSuper:{configurable:!0},allowDirectSuper:{configurable:!0},treatFunctionsAsVar:{configurable:!0}};H.prototype.parse=function(){var t=this.options.program||this.startNode();return this.nextToken(),this.parseTopLevel(t)},W.inFunction.get=function(){return(this.currentVarScope().flags&D)>0},W.inGenerator.get=function(){return(this.currentVarScope().flags&q)>0},W.inAsync.get=function(){return(this.currentVarScope().flags&j)>0},W.allowSuper.get=function(){return(64&this.currentThisScope().flags)>0},W.allowDirectSuper.get=function(){return(128&this.currentThisScope().flags)>0},W.treatFunctionsAsVar.get=function(){return this.treatFunctionsAsVarInScope(this.currentScope())},H.prototype.inNonArrowFunction=function(){return(this.currentThisScope().flags&D)>0},H.extend=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];for(var i=this,n=0;n<t.length;n++)i=t[n](i);return i},H.parse=function(t,e){return new this(e,t).parse()},H.parseExpressionAt=function(t,e,i){var n=new this(i,t,e);return n.nextToken(),n.parseExpression()},H.tokenizer=function(t,e){return new this(e,t)},Object.defineProperties(H.prototype,W);var G=H.prototype,Z=/^(?:'((?:\\.|[^'])*?)'|"((?:\\.|[^"])*?)")/;function $(){this.shorthandAssign=this.trailingComma=this.parenthesizedAssign=this.parenthesizedBind=this.doubleProto=-1}G.strictDirective=function(t){for(;;){A.lastIndex=t,t+=A.exec(this.input)[0].length;var e=Z.exec(this.input.slice(t));if(!e)return!1;if("use strict"===(e[1]||e[2]))return!0;t+=e[0].length,A.lastIndex=t,t+=A.exec(this.input)[0].length,";"===this.input[t]&&t++}},G.eat=function(t){return this.type===t&&(this.next(),!0)},G.isContextual=function(t){return this.type===b.name&&this.value===t&&!this.containsEsc},G.eatContextual=function(t){return!!this.isContextual(t)&&(this.next(),!0)},G.expectContextual=function(t){this.eatContextual(t)||this.unexpected()},G.canInsertSemicolon=function(){return this.type===b.eof||this.type===b.braceR||k.test(this.input.slice(this.lastTokEnd,this.start))},G.insertSemicolon=function(){if(this.canInsertSemicolon())return this.options.onInsertedSemicolon&&this.options.onInsertedSemicolon(this.lastTokEnd,this.lastTokEndLoc),!0},G.semicolon=function(){this.eat(b.semi)||this.insertSemicolon()||this.unexpected()},G.afterTrailingComma=function(t,e){if(this.type===t)return this.options.onTrailingComma&&this.options.onTrailingComma(this.lastTokStart,this.lastTokStartLoc),e||this.next(),!0},G.expect=function(t){this.eat(t)||this.unexpected()},G.unexpected=function(t){this.raise(null!=t?t:this.start,"Unexpected token")},G.checkPatternErrors=function(t,e){if(t){t.trailingComma>-1&&this.raiseRecoverable(t.trailingComma,"Comma is not permitted after the rest element");var i=e?t.parenthesizedAssign:t.parenthesizedBind;i>-1&&this.raiseRecoverable(i,"Parenthesized pattern")}},G.checkExpressionErrors=function(t,e){if(!t)return!1;var i=t.shorthandAssign,n=t.doubleProto;if(!e)return i>=0||n>=0;i>=0&&this.raise(i,"Shorthand property assignments are valid only in destructuring patterns"),n>=0&&this.raiseRecoverable(n,"Redefinition of __proto__ property")},G.checkYieldAwaitInDefaultParams=function(){this.yieldPos&&(!this.awaitPos||this.yieldPos<this.awaitPos)&&this.raise(this.yieldPos,"Yield expression cannot be a default value"),this.awaitPos&&this.raise(this.awaitPos,"Await expression cannot be a default value")},G.isSimpleAssignTarget=function(t){return"ParenthesizedExpression"===t.type?this.isSimpleAssignTarget(t.expression):"Identifier"===t.type||"MemberExpression"===t.type};var Y=H.prototype;Y.parseTopLevel=function(t){var e={};for(t.body||(t.body=[]);this.type!==b.eof;){var i=this.parseStatement(null,!0,e);t.body.push(i)}if(this.inModule)for(var n=0,s=Object.keys(this.undefinedExports);n<s.length;n+=1){var r=s[n];this.raiseRecoverable(this.undefinedExports[r].start,"Export '"+r+"' is not defined")}return this.adaptDirectivePrologue(t.body),this.next(),t.sourceType=this.options.sourceType,this.finishNode(t,"Program")};var K={kind:"loop"},Q={kind:"switch"};Y.isLet=function(t){if(this.options.ecmaVersion<6||!this.isContextual("let"))return!1;A.lastIndex=this.pos;var e=A.exec(this.input),i=this.pos+e[0].length,n=this.input.charCodeAt(i);if(91===n)return!0;if(t)return!1;if(123===n)return!0;if(f(n,!0)){for(var s=i+1;g(this.input.charCodeAt(s),!0);)++s;var r=this.input.slice(i,s);if(!a.test(r))return!0}return!1},Y.isAsyncFunction=function(){if(this.options.ecmaVersion<8||!this.isContextual("async"))return!1;A.lastIndex=this.pos;var t=A.exec(this.input),e=this.pos+t[0].length;return!(k.test(this.input.slice(this.pos,e))||"function"!==this.input.slice(e,e+8)||e+8!==this.input.length&&g(this.input.charAt(e+8)))},Y.parseStatement=function(t,e,i){var n,s=this.type,r=this.startNode();switch(this.isLet(t)&&(s=b._var,n="let"),s){case b._break:case b._continue:return this.parseBreakContinueStatement(r,s.keyword);case b._debugger:return this.parseDebuggerStatement(r);case b._do:return this.parseDoStatement(r);case b._for:return this.parseForStatement(r);case b._function:return t&&(this.strict||"if"!==t&&"label"!==t)&&this.options.ecmaVersion>=6&&this.unexpected(),this.parseFunctionStatement(r,!1,!t);case b._class:return t&&this.unexpected(),this.parseClass(r,!0);case b._if:return this.parseIfStatement(r);case b._return:return this.parseReturnStatement(r);case b._switch:return this.parseSwitchStatement(r);case b._throw:return this.parseThrowStatement(r);case b._try:return this.parseTryStatement(r);case b._const:case b._var:return n=n||this.value,t&&"var"!==n&&this.unexpected(),this.parseVarStatement(r,n);case b._while:return this.parseWhileStatement(r);case b._with:return this.parseWithStatement(r);case b.braceL:return this.parseBlock(!0,r);case b.semi:return this.parseEmptyStatement(r);case b._export:case b._import:if(this.options.ecmaVersion>10&&s===b._import){A.lastIndex=this.pos;var a=A.exec(this.input),o=this.pos+a[0].length;if(40===this.input.charCodeAt(o))return this.parseExpressionStatement(r,this.parseExpression())}return this.options.allowImportExportEverywhere||(e||this.raise(this.start,"'import' and 'export' may only appear at the top level"),this.inModule||this.raise(this.start,"'import' and 'export' may appear only with 'sourceType: module'")),s===b._import?this.parseImport(r):this.parseExport(r,i);default:if(this.isAsyncFunction())return t&&this.unexpected(),this.next(),this.parseFunctionStatement(r,!0,!t);var h=this.value,c=this.parseExpression();return s===b.name&&"Identifier"===c.type&&this.eat(b.colon)?this.parseLabeledStatement(r,h,c,t):this.parseExpressionStatement(r,c)}},Y.parseBreakContinueStatement=function(t,e){var i="break"===e;this.next(),this.eat(b.semi)||this.insertSemicolon()?t.label=null:this.type!==b.name?this.unexpected():(t.label=this.parseIdent(),this.semicolon());for(var n=0;n<this.labels.length;++n){var s=this.labels[n];if(null==t.label||s.name===t.label.name){if(null!=s.kind&&(i||"loop"===s.kind))break;if(t.label&&i)break}}return n===this.labels.length&&this.raise(t.start,"Unsyntactic "+e),this.finishNode(t,i?"BreakStatement":"ContinueStatement")},Y.parseDebuggerStatement=function(t){return this.next(),this.semicolon(),this.finishNode(t,"DebuggerStatement")},Y.parseDoStatement=function(t){return this.next(),this.labels.push(K),t.body=this.parseStatement("do"),this.labels.pop(),this.expect(b._while),t.test=this.parseParenExpression(),this.options.ecmaVersion>=6?this.eat(b.semi):this.semicolon(),this.finishNode(t,"DoWhileStatement")},Y.parseForStatement=function(t){this.next();var e=this.options.ecmaVersion>=9&&(this.inAsync||!this.inFunction&&this.options.allowAwaitOutsideFunction)&&this.eatContextual("await")?this.lastTokStart:-1;if(this.labels.push(K),this.enterScope(0),this.expect(b.parenL),this.type===b.semi)return e>-1&&this.unexpected(e),this.parseFor(t,null);var i=this.isLet();if(this.type===b._var||this.type===b._const||i){var n=this.startNode(),s=i?"let":this.value;return this.next(),this.parseVar(n,!0,s),this.finishNode(n,"VariableDeclaration"),(this.type===b._in||this.options.ecmaVersion>=6&&this.isContextual("of"))&&1===n.declarations.length?(this.options.ecmaVersion>=9&&(this.type===b._in?e>-1&&this.unexpected(e):t.await=e>-1),this.parseForIn(t,n)):(e>-1&&this.unexpected(e),this.parseFor(t,n))}var r=new $,a=this.parseExpression(!0,r);return this.type===b._in||this.options.ecmaVersion>=6&&this.isContextual("of")?(this.options.ecmaVersion>=9&&(this.type===b._in?e>-1&&this.unexpected(e):t.await=e>-1),this.toAssignable(a,!1,r),this.checkLVal(a),this.parseForIn(t,a)):(this.checkExpressionErrors(r,!0),e>-1&&this.unexpected(e),this.parseFor(t,a))},Y.parseFunctionStatement=function(t,e,i){return this.next(),this.parseFunction(t,J|(i?0:tt),!1,e)},Y.parseIfStatement=function(t){return this.next(),t.test=this.parseParenExpression(),t.consequent=this.parseStatement("if"),t.alternate=this.eat(b._else)?this.parseStatement("if"):null,this.finishNode(t,"IfStatement")},Y.parseReturnStatement=function(t){return this.inFunction||this.options.allowReturnOutsideFunction||this.raise(this.start,"'return' outside of function"),this.next(),this.eat(b.semi)||this.insertSemicolon()?t.argument=null:(t.argument=this.parseExpression(),this.semicolon()),this.finishNode(t,"ReturnStatement")},Y.parseSwitchStatement=function(t){var e;this.next(),t.discriminant=this.parseParenExpression(),t.cases=[],this.expect(b.braceL),this.labels.push(Q),this.enterScope(0);for(var i=!1;this.type!==b.braceR;)if(this.type===b._case||this.type===b._default){var n=this.type===b._case;e&&this.finishNode(e,"SwitchCase"),t.cases.push(e=this.startNode()),e.consequent=[],this.next(),n?e.test=this.parseExpression():(i&&this.raiseRecoverable(this.lastTokStart,"Multiple default clauses"),i=!0,e.test=null),this.expect(b.colon)}else e||this.unexpected(),e.consequent.push(this.parseStatement(null));return this.exitScope(),e&&this.finishNode(e,"SwitchCase"),this.next(),this.labels.pop(),this.finishNode(t,"SwitchStatement")},Y.parseThrowStatement=function(t){return this.next(),k.test(this.input.slice(this.lastTokEnd,this.start))&&this.raise(this.lastTokEnd,"Illegal newline after throw"),t.argument=this.parseExpression(),this.semicolon(),this.finishNode(t,"ThrowStatement")};var X=[];Y.parseTryStatement=function(t){if(this.next(),t.block=this.parseBlock(),t.handler=null,this.type===b._catch){var e=this.startNode();if(this.next(),this.eat(b.parenL)){e.param=this.parseBindingAtom();var i="Identifier"===e.param.type;this.enterScope(i?32:0),this.checkLVal(e.param,i?4:2),this.expect(b.parenR)}else this.options.ecmaVersion<10&&this.unexpected(),e.param=null,this.enterScope(0);e.body=this.parseBlock(!1),this.exitScope(),t.handler=this.finishNode(e,"CatchClause")}return t.finalizer=this.eat(b._finally)?this.parseBlock():null,t.handler||t.finalizer||this.raise(t.start,"Missing catch or finally clause"),this.finishNode(t,"TryStatement")},Y.parseVarStatement=function(t,e){return this.next(),this.parseVar(t,!1,e),this.semicolon(),this.finishNode(t,"VariableDeclaration")},Y.parseWhileStatement=function(t){return this.next(),t.test=this.parseParenExpression(),this.labels.push(K),t.body=this.parseStatement("while"),this.labels.pop(),this.finishNode(t,"WhileStatement")},Y.parseWithStatement=function(t){return this.strict&&this.raise(this.start,"'with' in strict mode"),this.next(),t.object=this.parseParenExpression(),t.body=this.parseStatement("with"),this.finishNode(t,"WithStatement")},Y.parseEmptyStatement=function(t){return this.next(),this.finishNode(t,"EmptyStatement")},Y.parseLabeledStatement=function(t,e,i,n){for(var s=0,r=this.labels;s<r.length;s+=1){r[s].name===e&&this.raise(i.start,"Label '"+e+"' is already declared")}for(var a=this.type.isLoop?"loop":this.type===b._switch?"switch":null,o=this.labels.length-1;o>=0;o--){var h=this.labels[o];if(h.statementStart!==t.start)break;h.statementStart=this.start,h.kind=a}return this.labels.push({name:e,kind:a,statementStart:this.start}),t.body=this.parseStatement(n?-1===n.indexOf("label")?n+"label":n:"label"),this.labels.pop(),t.label=i,this.finishNode(t,"LabeledStatement")},Y.parseExpressionStatement=function(t,e){return t.expression=e,this.semicolon(),this.finishNode(t,"ExpressionStatement")},Y.parseBlock=function(t,e){for(void 0===t&&(t=!0),void 0===e&&(e=this.startNode()),e.body=[],this.expect(b.braceL),t&&this.enterScope(0);!this.eat(b.braceR);){var i=this.parseStatement(null);e.body.push(i)}return t&&this.exitScope(),this.finishNode(e,"BlockStatement")},Y.parseFor=function(t,e){return t.init=e,this.expect(b.semi),t.test=this.type===b.semi?null:this.parseExpression(),this.expect(b.semi),t.update=this.type===b.parenR?null:this.parseExpression(),this.expect(b.parenR),t.body=this.parseStatement("for"),this.exitScope(),this.labels.pop(),this.finishNode(t,"ForStatement")},Y.parseForIn=function(t,e){var i=this.type===b._in;return this.next(),"VariableDeclaration"===e.type&&null!=e.declarations[0].init&&(!i||this.options.ecmaVersion<8||this.strict||"var"!==e.kind||"Identifier"!==e.declarations[0].id.type)?this.raise(e.start,(i?"for-in":"for-of")+" loop variable declaration may not have an initializer"):"AssignmentPattern"===e.type&&this.raise(e.start,"Invalid left-hand side in for-loop"),t.left=e,t.right=i?this.parseExpression():this.parseMaybeAssign(),this.expect(b.parenR),t.body=this.parseStatement("for"),this.exitScope(),this.labels.pop(),this.finishNode(t,i?"ForInStatement":"ForOfStatement")},Y.parseVar=function(t,e,i){for(t.declarations=[],t.kind=i;;){var n=this.startNode();if(this.parseVarId(n,i),this.eat(b.eq)?n.init=this.parseMaybeAssign(e):"const"!==i||this.type===b._in||this.options.ecmaVersion>=6&&this.isContextual("of")?"Identifier"===n.id.type||e&&(this.type===b._in||this.isContextual("of"))?n.init=null:this.raise(this.lastTokEnd,"Complex binding patterns require an initialization value"):this.unexpected(),t.declarations.push(this.finishNode(n,"VariableDeclarator")),!this.eat(b.comma))break}return t},Y.parseVarId=function(t,e){t.id=this.parseBindingAtom(),this.checkLVal(t.id,"var"===e?1:2,!1)};var J=1,tt=2;Y.parseFunction=function(t,e,i,n){this.initFunction(t),(this.options.ecmaVersion>=9||this.options.ecmaVersion>=6&&!n)&&(this.type===b.star&&e&tt&&this.unexpected(),t.generator=this.eat(b.star)),this.options.ecmaVersion>=8&&(t.async=!!n),e&J&&(t.id=4&e&&this.type!==b.name?null:this.parseIdent(),!t.id||e&tt||this.checkLVal(t.id,this.strict||t.generator||t.async?this.treatFunctionsAsVar?1:2:3));var s=this.yieldPos,r=this.awaitPos,a=this.awaitIdentPos;return this.yieldPos=0,this.awaitPos=0,this.awaitIdentPos=0,this.enterScope(U(t.async,t.generator)),e&J||(t.id=this.type===b.name?this.parseIdent():null),this.parseFunctionParams(t),this.parseFunctionBody(t,i,!1),this.yieldPos=s,this.awaitPos=r,this.awaitIdentPos=a,this.finishNode(t,e&J?"FunctionDeclaration":"FunctionExpression")},Y.parseFunctionParams=function(t){this.expect(b.parenL),t.params=this.parseBindingList(b.parenR,!1,this.options.ecmaVersion>=8),this.checkYieldAwaitInDefaultParams()},Y.parseClass=function(t,e){this.next();var i=this.strict;this.strict=!0,this.parseClassId(t,e),this.parseClassSuper(t);var n=this.startNode(),s=!1;for(n.body=[],this.expect(b.braceL);!this.eat(b.braceR);){var r=this.parseClassElement(null!==t.superClass);r&&(n.body.push(r),"MethodDefinition"===r.type&&"constructor"===r.kind&&(s&&this.raise(r.start,"Duplicate constructor in the same class"),s=!0))}return t.body=this.finishNode(n,"ClassBody"),this.strict=i,this.finishNode(t,e?"ClassDeclaration":"ClassExpression")},Y.parseClassElement=function(t){var e=this;if(this.eat(b.semi))return null;var i=this.startNode(),n=function(t,n){void 0===n&&(n=!1);var s=e.start,r=e.startLoc;return!!e.eatContextual(t)&&(!(e.type===b.parenL||n&&e.canInsertSemicolon())||(i.key&&e.unexpected(),i.computed=!1,i.key=e.startNodeAt(s,r),i.key.name=t,e.finishNode(i.key,"Identifier"),!1))};i.kind="method",i.static=n("static");var s=this.eat(b.star),r=!1;s||(this.options.ecmaVersion>=8&&n("async",!0)?(r=!0,s=this.options.ecmaVersion>=9&&this.eat(b.star)):n("get")?i.kind="get":n("set")&&(i.kind="set")),i.key||this.parsePropertyName(i);var a=i.key,o=!1;return i.computed||i.static||!("Identifier"===a.type&&"constructor"===a.name||"Literal"===a.type&&"constructor"===a.value)?i.static&&"Identifier"===a.type&&"prototype"===a.name&&this.raise(a.start,"Classes may not have a static property named prototype"):("method"!==i.kind&&this.raise(a.start,"Constructor can't have get/set modifier"),s&&this.raise(a.start,"Constructor can't be a generator"),r&&this.raise(a.start,"Constructor can't be an async method"),i.kind="constructor",o=t),this.parseClassMethod(i,s,r,o),"get"===i.kind&&0!==i.value.params.length&&this.raiseRecoverable(i.value.start,"getter should have no params"),"set"===i.kind&&1!==i.value.params.length&&this.raiseRecoverable(i.value.start,"setter should have exactly one param"),"set"===i.kind&&"RestElement"===i.value.params[0].type&&this.raiseRecoverable(i.value.params[0].start,"Setter cannot use rest params"),i},Y.parseClassMethod=function(t,e,i,n){return t.value=this.parseMethod(e,i,n),this.finishNode(t,"MethodDefinition")},Y.parseClassId=function(t,e){this.type===b.name?(t.id=this.parseIdent(),e&&this.checkLVal(t.id,2,!1)):(!0===e&&this.unexpected(),t.id=null)},Y.parseClassSuper=function(t){t.superClass=this.eat(b._extends)?this.parseExprSubscripts():null},Y.parseExport=function(t,e){if(this.next(),this.eat(b.star))return this.expectContextual("from"),this.type!==b.string&&this.unexpected(),t.source=this.parseExprAtom(),this.semicolon(),this.finishNode(t,"ExportAllDeclaration");if(this.eat(b._default)){var i;if(this.checkExport(e,"default",this.lastTokStart),this.type===b._function||(i=this.isAsyncFunction())){var n=this.startNode();this.next(),i&&this.next(),t.declaration=this.parseFunction(n,4|J,!1,i)}else if(this.type===b._class){var s=this.startNode();t.declaration=this.parseClass(s,"nullableID")}else t.declaration=this.parseMaybeAssign(),this.semicolon();return this.finishNode(t,"ExportDefaultDeclaration")}if(this.shouldParseExportStatement())t.declaration=this.parseStatement(null),"VariableDeclaration"===t.declaration.type?this.checkVariableExport(e,t.declaration.declarations):this.checkExport(e,t.declaration.id.name,t.declaration.id.start),t.specifiers=[],t.source=null;else{if(t.declaration=null,t.specifiers=this.parseExportSpecifiers(e),this.eatContextual("from"))this.type!==b.string&&this.unexpected(),t.source=this.parseExprAtom();else{for(var r=0,a=t.specifiers;r<a.length;r+=1){var o=a[r];this.checkUnreserved(o.local),this.checkLocalExport(o.local)}t.source=null}this.semicolon()}return this.finishNode(t,"ExportNamedDeclaration")},Y.checkExport=function(t,e,i){t&&(L(t,e)&&this.raiseRecoverable(i,"Duplicate export '"+e+"'"),t[e]=!0)},Y.checkPatternExport=function(t,e){var i=e.type;if("Identifier"===i)this.checkExport(t,e.name,e.start);else if("ObjectPattern"===i)for(var n=0,s=e.properties;n<s.length;n+=1){var r=s[n];this.checkPatternExport(t,r)}else if("ArrayPattern"===i)for(var a=0,o=e.elements;a<o.length;a+=1){var h=o[a];h&&this.checkPatternExport(t,h)}else"Property"===i?this.checkPatternExport(t,e.value):"AssignmentPattern"===i?this.checkPatternExport(t,e.left):"RestElement"===i?this.checkPatternExport(t,e.argument):"ParenthesizedExpression"===i&&this.checkPatternExport(t,e.expression)},Y.checkVariableExport=function(t,e){if(t)for(var i=0,n=e;i<n.length;i+=1){var s=n[i];this.checkPatternExport(t,s.id)}},Y.shouldParseExportStatement=function(){return"var"===this.type.keyword||"const"===this.type.keyword||"class"===this.type.keyword||"function"===this.type.keyword||this.isLet()||this.isAsyncFunction()},Y.parseExportSpecifiers=function(t){var e=[],i=!0;for(this.expect(b.braceL);!this.eat(b.braceR);){if(i)i=!1;else if(this.expect(b.comma),this.afterTrailingComma(b.braceR))break;var n=this.startNode();n.local=this.parseIdent(!0),n.exported=this.eatContextual("as")?this.parseIdent(!0):n.local,this.checkExport(t,n.exported.name,n.exported.start),e.push(this.finishNode(n,"ExportSpecifier"))}return e},Y.parseImport=function(t){return this.next(),this.type===b.string?(t.specifiers=X,t.source=this.parseExprAtom()):(t.specifiers=this.parseImportSpecifiers(),this.expectContextual("from"),t.source=this.type===b.string?this.parseExprAtom():this.unexpected()),this.semicolon(),this.finishNode(t,"ImportDeclaration")},Y.parseImportSpecifiers=function(){var t=[],e=!0;if(this.type===b.name){var i=this.startNode();if(i.local=this.parseIdent(),this.checkLVal(i.local,2),t.push(this.finishNode(i,"ImportDefaultSpecifier")),!this.eat(b.comma))return t}if(this.type===b.star){var n=this.startNode();return this.next(),this.expectContextual("as"),n.local=this.parseIdent(),this.checkLVal(n.local,2),t.push(this.finishNode(n,"ImportNamespaceSpecifier")),t}for(this.expect(b.braceL);!this.eat(b.braceR);){if(e)e=!1;else if(this.expect(b.comma),this.afterTrailingComma(b.braceR))break;var s=this.startNode();s.imported=this.parseIdent(!0),this.eatContextual("as")?s.local=this.parseIdent():(this.checkUnreserved(s.imported),s.local=s.imported),this.checkLVal(s.local,2),t.push(this.finishNode(s,"ImportSpecifier"))}return t},Y.adaptDirectivePrologue=function(t){for(var e=0;e<t.length&&this.isDirectiveCandidate(t[e]);++e)t[e].directive=t[e].expression.raw.slice(1,-1)},Y.isDirectiveCandidate=function(t){return"ExpressionStatement"===t.type&&"Literal"===t.expression.type&&"string"==typeof t.expression.value&&('"'===this.input[t.start]||"'"===this.input[t.start])};var et=H.prototype;et.toAssignable=function(t,e,i){if(this.options.ecmaVersion>=6&&t)switch(t.type){case"Identifier":this.inAsync&&"await"===t.name&&this.raise(t.start,"Cannot use 'await' as identifier inside an async function");break;case"ObjectPattern":case"ArrayPattern":case"RestElement":break;case"ObjectExpression":t.type="ObjectPattern",i&&this.checkPatternErrors(i,!0);for(var n=0,s=t.properties;n<s.length;n+=1){var r=s[n];this.toAssignable(r,e),"RestElement"!==r.type||"ArrayPattern"!==r.argument.type&&"ObjectPattern"!==r.argument.type||this.raise(r.argument.start,"Unexpected token")}break;case"Property":"init"!==t.kind&&this.raise(t.key.start,"Object pattern can't contain getter or setter"),this.toAssignable(t.value,e);break;case"ArrayExpression":t.type="ArrayPattern",i&&this.checkPatternErrors(i,!0),this.toAssignableList(t.elements,e);break;case"SpreadElement":t.type="RestElement",this.toAssignable(t.argument,e),"AssignmentPattern"===t.argument.type&&this.raise(t.argument.start,"Rest elements cannot have a default value");break;case"AssignmentExpression":"="!==t.operator&&this.raise(t.left.end,"Only '=' operator can be used for specifying default value."),t.type="AssignmentPattern",delete t.operator,this.toAssignable(t.left,e);case"AssignmentPattern":break;case"ParenthesizedExpression":this.toAssignable(t.expression,e,i);break;case"MemberExpression":if(!e)break;default:this.raise(t.start,"Assigning to rvalue")}else i&&this.checkPatternErrors(i,!0);return t},et.toAssignableList=function(t,e){for(var i=t.length,n=0;n<i;n++){var s=t[n];s&&this.toAssignable(s,e)}if(i){var r=t[i-1];6===this.options.ecmaVersion&&e&&r&&"RestElement"===r.type&&"Identifier"!==r.argument.type&&this.unexpected(r.argument.start)}return t},et.parseSpread=function(t){var e=this.startNode();return this.next(),e.argument=this.parseMaybeAssign(!1,t),this.finishNode(e,"SpreadElement")},et.parseRestBinding=function(){var t=this.startNode();return this.next(),6===this.options.ecmaVersion&&this.type!==b.name&&this.unexpected(),t.argument=this.parseBindingAtom(),this.finishNode(t,"RestElement")},et.parseBindingAtom=function(){if(this.options.ecmaVersion>=6)switch(this.type){case b.bracketL:var t=this.startNode();return this.next(),t.elements=this.parseBindingList(b.bracketR,!0,!0),this.finishNode(t,"ArrayPattern");case b.braceL:return this.parseObj(!0)}return this.parseIdent()},et.parseBindingList=function(t,e,i){for(var n=[],s=!0;!this.eat(t);)if(s?s=!1:this.expect(b.comma),e&&this.type===b.comma)n.push(null);else{if(i&&this.afterTrailingComma(t))break;if(this.type===b.ellipsis){var r=this.parseRestBinding();this.parseBindingListItem(r),n.push(r),this.type===b.comma&&this.raise(this.start,"Comma is not permitted after the rest element"),this.expect(t);break}var a=this.parseMaybeDefault(this.start,this.startLoc);this.parseBindingListItem(a),n.push(a)}return n},et.parseBindingListItem=function(t){return t},et.parseMaybeDefault=function(t,e,i){if(i=i||this.parseBindingAtom(),this.options.ecmaVersion<6||!this.eat(b.eq))return i;var n=this.startNodeAt(t,e);return n.left=i,n.right=this.parseMaybeAssign(),this.finishNode(n,"AssignmentPattern")},et.checkLVal=function(t,e,i){switch(void 0===e&&(e=0),t.type){case"Identifier":2===e&&"let"===t.name&&this.raiseRecoverable(t.start,"let is disallowed as a lexically bound name"),this.strict&&this.reservedWordsStrictBind.test(t.name)&&this.raiseRecoverable(t.start,(e?"Binding ":"Assigning to ")+t.name+" in strict mode"),i&&(L(i,t.name)&&this.raiseRecoverable(t.start,"Argument name clash"),i[t.name]=!0),0!==e&&5!==e&&this.declareName(t.name,e,t.start);break;case"MemberExpression":e&&this.raiseRecoverable(t.start,"Binding member expression");break;case"ObjectPattern":for(var n=0,s=t.properties;n<s.length;n+=1){var r=s[n];this.checkLVal(r,e,i)}break;case"Property":this.checkLVal(t.value,e,i);break;case"ArrayPattern":for(var a=0,o=t.elements;a<o.length;a+=1){var h=o[a];h&&this.checkLVal(h,e,i)}break;case"AssignmentPattern":this.checkLVal(t.left,e,i);break;case"RestElement":this.checkLVal(t.argument,e,i);break;case"ParenthesizedExpression":this.checkLVal(t.expression,e,i);break;default:this.raise(t.start,(e?"Binding":"Assigning to")+" rvalue")}};var it=H.prototype;it.checkPropClash=function(t,e,i){if(!(this.options.ecmaVersion>=9&&"SpreadElement"===t.type||this.options.ecmaVersion>=6&&(t.computed||t.method||t.shorthand))){var n,s=t.key;switch(s.type){case"Identifier":n=s.name;break;case"Literal":n=String(s.value);break;default:return}var r=t.kind;if(this.options.ecmaVersion>=6)"__proto__"===n&&"init"===r&&(e.proto&&(i&&i.doubleProto<0?i.doubleProto=s.start:this.raiseRecoverable(s.start,"Redefinition of __proto__ property")),e.proto=!0);else{var a=e[n="$"+n];if(a)("init"===r?this.strict&&a.init||a.get||a.set:a.init||a[r])&&this.raiseRecoverable(s.start,"Redefinition of property");else a=e[n]={init:!1,get:!1,set:!1};a[r]=!0}}},it.parseExpression=function(t,e){var i=this.start,n=this.startLoc,s=this.parseMaybeAssign(t,e);if(this.type===b.comma){var r=this.startNodeAt(i,n);for(r.expressions=[s];this.eat(b.comma);)r.expressions.push(this.parseMaybeAssign(t,e));return this.finishNode(r,"SequenceExpression")}return s},it.parseMaybeAssign=function(t,e,i){if(this.isContextual("yield")){if(this.inGenerator)return this.parseYield(t);this.exprAllowed=!1}var n=!1,s=-1,r=-1,a=-1;e?(s=e.parenthesizedAssign,r=e.trailingComma,a=e.shorthandAssign,e.parenthesizedAssign=e.trailingComma=e.shorthandAssign=-1):(e=new $,n=!0);var o=this.start,h=this.startLoc;this.type!==b.parenL&&this.type!==b.name||(this.potentialArrowAt=this.start);var c=this.parseMaybeConditional(t,e);if(i&&(c=i.call(this,c,o,h)),this.type.isAssign){var l=this.startNodeAt(o,h);return l.operator=this.value,l.left=this.type===b.eq?this.toAssignable(c,!1,e):c,n||$.call(e),e.shorthandAssign=-1,this.checkLVal(c),this.next(),l.right=this.parseMaybeAssign(t),this.finishNode(l,"AssignmentExpression")}return n&&this.checkExpressionErrors(e,!0),s>-1&&(e.parenthesizedAssign=s),r>-1&&(e.trailingComma=r),a>-1&&(e.shorthandAssign=a),c},it.parseMaybeConditional=function(t,e){var i=this.start,n=this.startLoc,s=this.parseExprOps(t,e);if(this.checkExpressionErrors(e))return s;if(this.eat(b.question)){var r=this.startNodeAt(i,n);return r.test=s,r.consequent=this.parseMaybeAssign(),this.expect(b.colon),r.alternate=this.parseMaybeAssign(t),this.finishNode(r,"ConditionalExpression")}return s},it.parseExprOps=function(t,e){var i=this.start,n=this.startLoc,s=this.parseMaybeUnary(e,!1);return this.checkExpressionErrors(e)?s:s.start===i&&"ArrowFunctionExpression"===s.type?s:this.parseExprOp(s,i,n,-1,t)},it.parseExprOp=function(t,e,i,n,s){var r=this.type.binop;if(null!=r&&(!s||this.type!==b._in)&&r>n){var a=this.type===b.logicalOR||this.type===b.logicalAND,o=this.value;this.next();var h=this.start,c=this.startLoc,l=this.parseExprOp(this.parseMaybeUnary(null,!1),h,c,r,s),u=this.buildBinary(e,i,t,l,o,a);return this.parseExprOp(u,e,i,n,s)}return t},it.buildBinary=function(t,e,i,n,s,r){var a=this.startNodeAt(t,e);return a.left=i,a.operator=s,a.right=n,this.finishNode(a,r?"LogicalExpression":"BinaryExpression")},it.parseMaybeUnary=function(t,e){var i,n=this.start,s=this.startLoc;if(this.isContextual("await")&&(this.inAsync||!this.inFunction&&this.options.allowAwaitOutsideFunction))i=this.parseAwait(),e=!0;else if(this.type.prefix){var r=this.startNode(),a=this.type===b.incDec;r.operator=this.value,r.prefix=!0,this.next(),r.argument=this.parseMaybeUnary(null,!0),this.checkExpressionErrors(t,!0),a?this.checkLVal(r.argument):this.strict&&"delete"===r.operator&&"Identifier"===r.argument.type?this.raiseRecoverable(r.start,"Deleting local variable in strict mode"):e=!0,i=this.finishNode(r,a?"UpdateExpression":"UnaryExpression")}else{if(i=this.parseExprSubscripts(t),this.checkExpressionErrors(t))return i;for(;this.type.postfix&&!this.canInsertSemicolon();){var o=this.startNodeAt(n,s);o.operator=this.value,o.prefix=!1,o.argument=i,this.checkLVal(i),this.next(),i=this.finishNode(o,"UpdateExpression")}}return!e&&this.eat(b.starstar)?this.buildBinary(n,s,i,this.parseMaybeUnary(null,!1),"**",!1):i},it.parseExprSubscripts=function(t){var e=this.start,i=this.startLoc,n=this.parseExprAtom(t),s="ArrowFunctionExpression"===n.type&&")"!==this.input.slice(this.lastTokStart,this.lastTokEnd);if(this.checkExpressionErrors(t)||s)return n;var r=this.parseSubscripts(n,e,i);return t&&"MemberExpression"===r.type&&(t.parenthesizedAssign>=r.start&&(t.parenthesizedAssign=-1),t.parenthesizedBind>=r.start&&(t.parenthesizedBind=-1)),r},it.parseSubscripts=function(t,e,i,n){for(var s=this.options.ecmaVersion>=8&&"Identifier"===t.type&&"async"===t.name&&this.lastTokEnd===t.end&&!this.canInsertSemicolon()&&"async"===this.input.slice(t.start,t.end);;){var r=this.parseSubscript(t,e,i,n,s);if(r===t||"ArrowFunctionExpression"===r.type)return r;t=r}},it.parseSubscript=function(t,e,i,n,s){var r=this.eat(b.bracketL);if(r||this.eat(b.dot)){var a=this.startNodeAt(e,i);a.object=t,a.property=r?this.parseExpression():this.parseIdent("never"!==this.options.allowReserved),a.computed=!!r,r&&this.expect(b.bracketR),t=this.finishNode(a,"MemberExpression")}else if(!n&&this.eat(b.parenL)){var o=new $,h=this.yieldPos,c=this.awaitPos,l=this.awaitIdentPos;this.yieldPos=0,this.awaitPos=0,this.awaitIdentPos=0;var u=this.parseExprList(b.parenR,this.options.ecmaVersion>=8&&"Import"!==t.type,!1,o);if(s&&!this.canInsertSemicolon()&&this.eat(b.arrow))return this.checkPatternErrors(o,!1),this.checkYieldAwaitInDefaultParams(),this.awaitIdentPos>0&&this.raise(this.awaitIdentPos,"Cannot use 'await' as identifier inside an async function"),this.yieldPos=h,this.awaitPos=c,this.awaitIdentPos=l,this.parseArrowExpression(this.startNodeAt(e,i),u,!0);this.checkExpressionErrors(o,!0),this.yieldPos=h||this.yieldPos,this.awaitPos=c||this.awaitPos,this.awaitIdentPos=l||this.awaitIdentPos;var p=this.startNodeAt(e,i);if(p.callee=t,p.arguments=u,"Import"===p.callee.type){1!==p.arguments.length&&this.raise(p.start,"import() requires exactly one argument");var d=p.arguments[0];d&&"SpreadElement"===d.type&&this.raise(d.start,"... is not allowed in import()")}t=this.finishNode(p,"CallExpression")}else if(this.type===b.backQuote){var f=this.startNodeAt(e,i);f.tag=t,f.quasi=this.parseTemplate({isTagged:!0}),t=this.finishNode(f,"TaggedTemplateExpression")}return t},it.parseExprAtom=function(t){this.type===b.slash&&this.readRegexp();var e,i=this.potentialArrowAt===this.start;switch(this.type){case b._super:return this.allowSuper||this.raise(this.start,"'super' keyword outside a method"),e=this.startNode(),this.next(),this.type!==b.parenL||this.allowDirectSuper||this.raise(e.start,"super() call outside constructor of a subclass"),this.type!==b.dot&&this.type!==b.bracketL&&this.type!==b.parenL&&this.unexpected(),this.finishNode(e,"Super");case b._this:return e=this.startNode(),this.next(),this.finishNode(e,"ThisExpression");case b.name:var n=this.start,s=this.startLoc,r=this.containsEsc,a=this.parseIdent(!1);if(this.options.ecmaVersion>=8&&!r&&"async"===a.name&&!this.canInsertSemicolon()&&this.eat(b._function))return this.parseFunction(this.startNodeAt(n,s),0,!1,!0);if(i&&!this.canInsertSemicolon()){if(this.eat(b.arrow))return this.parseArrowExpression(this.startNodeAt(n,s),[a],!1);if(this.options.ecmaVersion>=8&&"async"===a.name&&this.type===b.name&&!r)return a=this.parseIdent(!1),!this.canInsertSemicolon()&&this.eat(b.arrow)||this.unexpected(),this.parseArrowExpression(this.startNodeAt(n,s),[a],!0)}return a;case b.regexp:var o=this.value;return(e=this.parseLiteral(o.value)).regex={pattern:o.pattern,flags:o.flags},e;case b.num:case b.string:return this.parseLiteral(this.value);case b._null:case b._true:case b._false:return(e=this.startNode()).value=this.type===b._null?null:this.type===b._true,e.raw=this.type.keyword,this.next(),this.finishNode(e,"Literal");case b.parenL:var h=this.start,c=this.parseParenAndDistinguishExpression(i);return t&&(t.parenthesizedAssign<0&&!this.isSimpleAssignTarget(c)&&(t.parenthesizedAssign=h),t.parenthesizedBind<0&&(t.parenthesizedBind=h)),c;case b.bracketL:return e=this.startNode(),this.next(),e.elements=this.parseExprList(b.bracketR,!0,!0,t),this.finishNode(e,"ArrayExpression");case b.braceL:return this.parseObj(!1,t);case b._function:return e=this.startNode(),this.next(),this.parseFunction(e,0);case b._class:return this.parseClass(this.startNode(),!1);case b._new:return this.parseNew();case b.backQuote:return this.parseTemplate();case b._import:return this.options.ecmaVersion>10?this.parseDynamicImport():this.unexpected();default:this.unexpected()}},it.parseDynamicImport=function(){var t=this.startNode();return this.next(),this.type!==b.parenL&&this.unexpected(),this.finishNode(t,"Import")},it.parseLiteral=function(t){var e=this.startNode();return e.value=t,e.raw=this.input.slice(this.start,this.end),110===e.raw.charCodeAt(e.raw.length-1)&&(e.bigint=e.raw.slice(0,-1)),this.next(),this.finishNode(e,"Literal")},it.parseParenExpression=function(){this.expect(b.parenL);var t=this.parseExpression();return this.expect(b.parenR),t},it.parseParenAndDistinguishExpression=function(t){var e,i=this.start,n=this.startLoc,s=this.options.ecmaVersion>=8;if(this.options.ecmaVersion>=6){this.next();var r,a=this.start,o=this.startLoc,h=[],c=!0,l=!1,u=new $,p=this.yieldPos,d=this.awaitPos;for(this.yieldPos=0,this.awaitPos=0;this.type!==b.parenR;){if(c?c=!1:this.expect(b.comma),s&&this.afterTrailingComma(b.parenR,!0)){l=!0;break}if(this.type===b.ellipsis){r=this.start,h.push(this.parseParenItem(this.parseRestBinding())),this.type===b.comma&&this.raise(this.start,"Comma is not permitted after the rest element");break}h.push(this.parseMaybeAssign(!1,u,this.parseParenItem))}var f=this.start,g=this.startLoc;if(this.expect(b.parenR),t&&!this.canInsertSemicolon()&&this.eat(b.arrow))return this.checkPatternErrors(u,!1),this.checkYieldAwaitInDefaultParams(),this.yieldPos=p,this.awaitPos=d,this.parseParenArrowList(i,n,h);h.length&&!l||this.unexpected(this.lastTokStart),r&&this.unexpected(r),this.checkExpressionErrors(u,!0),this.yieldPos=p||this.yieldPos,this.awaitPos=d||this.awaitPos,h.length>1?((e=this.startNodeAt(a,o)).expressions=h,this.finishNodeAt(e,"SequenceExpression",f,g)):e=h[0]}else e=this.parseParenExpression();if(this.options.preserveParens){var _=this.startNodeAt(i,n);return _.expression=e,this.finishNode(_,"ParenthesizedExpression")}return e},it.parseParenItem=function(t){return t},it.parseParenArrowList=function(t,e,i){return this.parseArrowExpression(this.startNodeAt(t,e),i)};var nt=[];it.parseNew=function(){var t=this.startNode(),e=this.parseIdent(!0);if(this.options.ecmaVersion>=6&&this.eat(b.dot)){t.meta=e;var i=this.containsEsc;return t.property=this.parseIdent(!0),("target"!==t.property.name||i)&&this.raiseRecoverable(t.property.start,"The only valid meta property for new is new.target"),this.inNonArrowFunction()||this.raiseRecoverable(t.start,"new.target can only be used in functions"),this.finishNode(t,"MetaProperty")}var n=this.start,s=this.startLoc;return t.callee=this.parseSubscripts(this.parseExprAtom(),n,s,!0),this.options.ecmaVersion>10&&"Import"===t.callee.type&&this.raise(t.callee.start,"Cannot use new with import(...)"),this.eat(b.parenL)?t.arguments=this.parseExprList(b.parenR,this.options.ecmaVersion>=8&&"Import"!==t.callee.type,!1):t.arguments=nt,this.finishNode(t,"NewExpression")},it.parseTemplateElement=function(t){var e=t.isTagged,i=this.startNode();return this.type===b.invalidTemplate?(e||this.raiseRecoverable(this.start,"Bad escape sequence in untagged template literal"),i.value={raw:this.value,cooked:null}):i.value={raw:this.input.slice(this.start,this.end).replace(/\r\n?/g,"\n"),cooked:this.value},this.next(),i.tail=this.type===b.backQuote,this.finishNode(i,"TemplateElement")},it.parseTemplate=function(t){void 0===t&&(t={});var e=t.isTagged;void 0===e&&(e=!1);var i=this.startNode();this.next(),i.expressions=[];var n=this.parseTemplateElement({isTagged:e});for(i.quasis=[n];!n.tail;)this.type===b.eof&&this.raise(this.pos,"Unterminated template literal"),this.expect(b.dollarBraceL),i.expressions.push(this.parseExpression()),this.expect(b.braceR),i.quasis.push(n=this.parseTemplateElement({isTagged:e}));return this.next(),this.finishNode(i,"TemplateLiteral")},it.isAsyncProp=function(t){return!t.computed&&"Identifier"===t.key.type&&"async"===t.key.name&&(this.type===b.name||this.type===b.num||this.type===b.string||this.type===b.bracketL||this.type.keyword||this.options.ecmaVersion>=9&&this.type===b.star)&&!k.test(this.input.slice(this.lastTokEnd,this.start))},it.parseObj=function(t,e){var i=this.startNode(),n=!0,s={};for(i.properties=[],this.next();!this.eat(b.braceR);){if(n)n=!1;else if(this.expect(b.comma),this.afterTrailingComma(b.braceR))break;var r=this.parseProperty(t,e);t||this.checkPropClash(r,s,e),i.properties.push(r)}return this.finishNode(i,t?"ObjectPattern":"ObjectExpression")},it.parseProperty=function(t,e){var i,n,s,r,a=this.startNode();if(this.options.ecmaVersion>=9&&this.eat(b.ellipsis))return t?(a.argument=this.parseIdent(!1),this.type===b.comma&&this.raise(this.start,"Comma is not permitted after the rest element"),this.finishNode(a,"RestElement")):(this.type===b.parenL&&e&&(e.parenthesizedAssign<0&&(e.parenthesizedAssign=this.start),e.parenthesizedBind<0&&(e.parenthesizedBind=this.start)),a.argument=this.parseMaybeAssign(!1,e),this.type===b.comma&&e&&e.trailingComma<0&&(e.trailingComma=this.start),this.finishNode(a,"SpreadElement"));this.options.ecmaVersion>=6&&(a.method=!1,a.shorthand=!1,(t||e)&&(s=this.start,r=this.startLoc),t||(i=this.eat(b.star)));var o=this.containsEsc;return this.parsePropertyName(a),!t&&!o&&this.options.ecmaVersion>=8&&!i&&this.isAsyncProp(a)?(n=!0,i=this.options.ecmaVersion>=9&&this.eat(b.star),this.parsePropertyName(a,e)):n=!1,this.parsePropertyValue(a,t,i,n,s,r,e,o),this.finishNode(a,"Property")},it.parsePropertyValue=function(t,e,i,n,s,r,a,o){if((i||n)&&this.type===b.colon&&this.unexpected(),this.eat(b.colon))t.value=e?this.parseMaybeDefault(this.start,this.startLoc):this.parseMaybeAssign(!1,a),t.kind="init";else if(this.options.ecmaVersion>=6&&this.type===b.parenL)e&&this.unexpected(),t.kind="init",t.method=!0,t.value=this.parseMethod(i,n);else if(e||o||!(this.options.ecmaVersion>=5)||t.computed||"Identifier"!==t.key.type||"get"!==t.key.name&&"set"!==t.key.name||this.type===b.comma||this.type===b.braceR)this.options.ecmaVersion>=6&&!t.computed&&"Identifier"===t.key.type?((i||n)&&this.unexpected(),this.checkUnreserved(t.key),"await"!==t.key.name||this.awaitIdentPos||(this.awaitIdentPos=s),t.kind="init",e?t.value=this.parseMaybeDefault(s,r,t.key):this.type===b.eq&&a?(a.shorthandAssign<0&&(a.shorthandAssign=this.start),t.value=this.parseMaybeDefault(s,r,t.key)):t.value=t.key,t.shorthand=!0):this.unexpected();else{(i||n)&&this.unexpected(),t.kind=t.key.name,this.parsePropertyName(t),t.value=this.parseMethod(!1);var h="get"===t.kind?0:1;if(t.value.params.length!==h){var c=t.value.start;"get"===t.kind?this.raiseRecoverable(c,"getter should have no params"):this.raiseRecoverable(c,"setter should have exactly one param")}else"set"===t.kind&&"RestElement"===t.value.params[0].type&&this.raiseRecoverable(t.value.params[0].start,"Setter cannot use rest params")}},it.parsePropertyName=function(t){if(this.options.ecmaVersion>=6){if(this.eat(b.bracketL))return t.computed=!0,t.key=this.parseMaybeAssign(),this.expect(b.bracketR),t.key;t.computed=!1}return t.key=this.type===b.num||this.type===b.string?this.parseExprAtom():this.parseIdent("never"!==this.options.allowReserved)},it.initFunction=function(t){t.id=null,this.options.ecmaVersion>=6&&(t.generator=t.expression=!1),this.options.ecmaVersion>=8&&(t.async=!1)},it.parseMethod=function(t,e,i){var n=this.startNode(),s=this.yieldPos,r=this.awaitPos,a=this.awaitIdentPos;return this.initFunction(n),this.options.ecmaVersion>=6&&(n.generator=t),this.options.ecmaVersion>=8&&(n.async=!!e),this.yieldPos=0,this.awaitPos=0,this.awaitIdentPos=0,this.enterScope(64|U(e,n.generator)|(i?128:0)),this.expect(b.parenL),n.params=this.parseBindingList(b.parenR,!1,this.options.ecmaVersion>=8),this.checkYieldAwaitInDefaultParams(),this.parseFunctionBody(n,!1,!0),this.yieldPos=s,this.awaitPos=r,this.awaitIdentPos=a,this.finishNode(n,"FunctionExpression")},it.parseArrowExpression=function(t,e,i){var n=this.yieldPos,s=this.awaitPos,r=this.awaitIdentPos;return this.enterScope(16|U(i,!1)),this.initFunction(t),this.options.ecmaVersion>=8&&(t.async=!!i),this.yieldPos=0,this.awaitPos=0,this.awaitIdentPos=0,t.params=this.toAssignableList(e,!0),this.parseFunctionBody(t,!0,!1),this.yieldPos=n,this.awaitPos=s,this.awaitIdentPos=r,this.finishNode(t,"ArrowFunctionExpression")},it.parseFunctionBody=function(t,e,i){var n=e&&this.type!==b.braceL,s=this.strict,r=!1;if(n)t.body=this.parseMaybeAssign(),t.expression=!0,this.checkParams(t,!1);else{var a=this.options.ecmaVersion>=7&&!this.isSimpleParamList(t.params);s&&!a||(r=this.strictDirective(this.end))&&a&&this.raiseRecoverable(t.start,"Illegal 'use strict' directive in function with non-simple parameter list");var o=this.labels;this.labels=[],r&&(this.strict=!0),this.checkParams(t,!s&&!r&&!e&&!i&&this.isSimpleParamList(t.params)),t.body=this.parseBlock(!1),t.expression=!1,this.adaptDirectivePrologue(t.body.body),this.labels=o}this.exitScope(),this.strict&&t.id&&this.checkLVal(t.id,5),this.strict=s},it.isSimpleParamList=function(t){for(var e=0,i=t;e<i.length;e+=1){if("Identifier"!==i[e].type)return!1}return!0},it.checkParams=function(t,e){for(var i={},n=0,s=t.params;n<s.length;n+=1){var r=s[n];this.checkLVal(r,1,e?null:i)}},it.parseExprList=function(t,e,i,n){for(var s=[],r=!0;!this.eat(t);){if(r)r=!1;else if(this.expect(b.comma),e&&this.afterTrailingComma(t))break;var a=void 0;i&&this.type===b.comma?a=null:this.type===b.ellipsis?(a=this.parseSpread(n),n&&this.type===b.comma&&n.trailingComma<0&&(n.trailingComma=this.start)):a=this.parseMaybeAssign(!1,n),s.push(a)}return s},it.checkUnreserved=function(t){var e=t.start,i=t.end,n=t.name;(this.inGenerator&&"yield"===n&&this.raiseRecoverable(e,"Cannot use 'yield' as identifier inside a generator"),this.inAsync&&"await"===n&&this.raiseRecoverable(e,"Cannot use 'await' as identifier inside an async function"),this.keywords.test(n)&&this.raise(e,"Unexpected keyword '"+n+"'"),this.options.ecmaVersion<6&&-1!==this.input.slice(e,i).indexOf("\\"))||(this.strict?this.reservedWordsStrict:this.reservedWords).test(n)&&(this.inAsync||"await"!==n||this.raiseRecoverable(e,"Cannot use keyword 'await' outside an async function"),this.raiseRecoverable(e,"The keyword '"+n+"' is reserved"))},it.parseIdent=function(t,e){var i=this.startNode();return this.type===b.name?i.name=this.value:this.type.keyword?(i.name=this.type.keyword,"class"!==i.name&&"function"!==i.name||this.lastTokEnd===this.lastTokStart+1&&46===this.input.charCodeAt(this.lastTokStart)||this.context.pop()):this.unexpected(),this.next(),this.finishNode(i,"Identifier"),t||(this.checkUnreserved(i),"await"!==i.name||this.awaitIdentPos||(this.awaitIdentPos=i.start)),i},it.parseYield=function(t){this.yieldPos||(this.yieldPos=this.start);var e=this.startNode();return this.next(),this.type===b.semi||this.canInsertSemicolon()||this.type!==b.star&&!this.type.startsExpr?(e.delegate=!1,e.argument=null):(e.delegate=this.eat(b.star),e.argument=this.parseMaybeAssign(t)),this.finishNode(e,"YieldExpression")},it.parseAwait=function(){this.awaitPos||(this.awaitPos=this.start);var t=this.startNode();return this.next(),t.argument=this.parseMaybeUnary(null,!0),this.finishNode(t,"AwaitExpression")};var st=H.prototype;st.raise=function(t,e){var i=R(this.input,t);e+=" ("+i.line+":"+i.column+")";var n=new SyntaxError(e);throw n.pos=t,n.loc=i,n.raisedAt=this.pos,n},st.raiseRecoverable=st.raise,st.curPosition=function(){if(this.options.locations)return new N(this.curLine,this.pos-this.lineStart)};var rt=H.prototype,at=function(t){this.flags=t,this.var=[],this.lexical=[],this.functions=[]};rt.enterScope=function(t){this.scopeStack.push(new at(t))},rt.exitScope=function(){this.scopeStack.pop()},rt.treatFunctionsAsVarInScope=function(t){return t.flags&D||!this.inModule&&1&t.flags},rt.declareName=function(t,e,i){var n=!1;if(2===e){var s=this.currentScope();n=s.lexical.indexOf(t)>-1||s.functions.indexOf(t)>-1||s.var.indexOf(t)>-1,s.lexical.push(t),this.inModule&&1&s.flags&&delete this.undefinedExports[t]}else if(4===e){this.currentScope().lexical.push(t)}else if(3===e){var r=this.currentScope();n=this.treatFunctionsAsVar?r.lexical.indexOf(t)>-1:r.lexical.indexOf(t)>-1||r.var.indexOf(t)>-1,r.functions.push(t)}else for(var a=this.scopeStack.length-1;a>=0;--a){var o=this.scopeStack[a];if(o.lexical.indexOf(t)>-1&&!(32&o.flags&&o.lexical[0]===t)||!this.treatFunctionsAsVarInScope(o)&&o.functions.indexOf(t)>-1){n=!0;break}if(o.var.push(t),this.inModule&&1&o.flags&&delete this.undefinedExports[t],o.flags&F)break}n&&this.raiseRecoverable(i,"Identifier '"+t+"' has already been declared")},rt.checkLocalExport=function(t){-1===this.scopeStack[0].lexical.indexOf(t.name)&&-1===this.scopeStack[0].var.indexOf(t.name)&&(this.undefinedExports[t.name]=t)},rt.currentScope=function(){return this.scopeStack[this.scopeStack.length-1]},rt.currentVarScope=function(){for(var t=this.scopeStack.length-1;;t--){var e=this.scopeStack[t];if(e.flags&F)return e}},rt.currentThisScope=function(){for(var t=this.scopeStack.length-1;;t--){var e=this.scopeStack[t];if(e.flags&F&&!(16&e.flags))return e}};var ot=function(t,e,i){this.type="",this.start=e,this.end=0,t.options.locations&&(this.loc=new z(t,i)),t.options.directSourceFile&&(this.sourceFile=t.options.directSourceFile),t.options.ranges&&(this.range=[e,0])},ht=H.prototype;function ct(t,e,i,n){return t.type=e,t.end=i,this.options.locations&&(t.loc.end=n),this.options.ranges&&(t.range[1]=i),t}ht.startNode=function(){return new ot(this,this.start,this.startLoc)},ht.startNodeAt=function(t,e){return new ot(this,t,e)},ht.finishNode=function(t,e){return ct.call(this,t,e,this.lastTokEnd,this.lastTokEndLoc)},ht.finishNodeAt=function(t,e,i,n){return ct.call(this,t,e,i,n)};var lt=function(t,e,i,n,s){this.token=t,this.isExpr=!!e,this.preserveSpace=!!i,this.override=n,this.generator=!!s},ut={b_stat:new lt("{",!1),b_expr:new lt("{",!0),b_tmpl:new lt("${",!1),p_stat:new lt("(",!1),p_expr:new lt("(",!0),q_tmpl:new lt("`",!0,!0,(function(t){return t.tryReadTemplateToken()})),f_stat:new lt("function",!1),f_expr:new lt("function",!0),f_expr_gen:new lt("function",!0,!1,null,!0),f_gen:new lt("function",!1,!1,null,!0)},pt=H.prototype;pt.initialContext=function(){return[ut.b_stat]},pt.braceIsBlock=function(t){var e=this.curContext();return e===ut.f_expr||e===ut.f_stat||(t!==b.colon||e!==ut.b_stat&&e!==ut.b_expr?t===b._return||t===b.name&&this.exprAllowed?k.test(this.input.slice(this.lastTokEnd,this.start)):t===b._else||t===b.semi||t===b.eof||t===b.parenR||t===b.arrow||(t===b.braceL?e===ut.b_stat:t!==b._var&&t!==b._const&&t!==b.name&&!this.exprAllowed):!e.isExpr)},pt.inGeneratorContext=function(){for(var t=this.context.length-1;t>=1;t--){var e=this.context[t];if("function"===e.token)return e.generator}return!1},pt.updateContext=function(t){var e,i=this.type;i.keyword&&t===b.dot?this.exprAllowed=!1:(e=i.updateContext)?e.call(this,t):this.exprAllowed=i.beforeExpr},b.parenR.updateContext=b.braceR.updateContext=function(){if(1!==this.context.length){var t=this.context.pop();t===ut.b_stat&&"function"===this.curContext().token&&(t=this.context.pop()),this.exprAllowed=!t.isExpr}else this.exprAllowed=!0},b.braceL.updateContext=function(t){this.context.push(this.braceIsBlock(t)?ut.b_stat:ut.b_expr),this.exprAllowed=!0},b.dollarBraceL.updateContext=function(){this.context.push(ut.b_tmpl),this.exprAllowed=!0},b.parenL.updateContext=function(t){var e=t===b._if||t===b._for||t===b._with||t===b._while;this.context.push(e?ut.p_stat:ut.p_expr),this.exprAllowed=!0},b.incDec.updateContext=function(){},b._function.updateContext=b._class.updateContext=function(t){!t.beforeExpr||t===b.semi||t===b._else||t===b._return&&k.test(this.input.slice(this.lastTokEnd,this.start))||(t===b.colon||t===b.braceL)&&this.curContext()===ut.b_stat?this.context.push(ut.f_stat):this.context.push(ut.f_expr),this.exprAllowed=!1},b.backQuote.updateContext=function(){this.curContext()===ut.q_tmpl?this.context.pop():this.context.push(ut.q_tmpl),this.exprAllowed=!1},b.star.updateContext=function(t){if(t===b._function){var e=this.context.length-1;this.context[e]===ut.f_expr?this.context[e]=ut.f_expr_gen:this.context[e]=ut.f_gen}this.exprAllowed=!0},b.name.updateContext=function(t){var e=!1;this.options.ecmaVersion>=6&&t!==b.dot&&("of"===this.value&&!this.exprAllowed||"yield"===this.value&&this.inGeneratorContext())&&(e=!0),this.exprAllowed=e};var dt="ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS",ft=dt+" Extended_Pictographic",gt={9:dt,10:ft,11:"ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS Extended_Pictographic"},_t="Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu",vt="Adlam Adlm Ahom Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb",mt=vt+" Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd",xt={9:vt,10:mt,11:"Adlam Adlm Ahom Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho"},yt={};function wt(t){var e=yt[t]={binary:O(gt[t]+" "+_t),nonBinary:{General_Category:O(_t),Script:O(xt[t])}};e.nonBinary.Script_Extensions=e.nonBinary.Script,e.nonBinary.gc=e.nonBinary.General_Category,e.nonBinary.sc=e.nonBinary.Script,e.nonBinary.scx=e.nonBinary.Script_Extensions}wt(9),wt(10),wt(11);var bt=H.prototype,kt=function(t){this.parser=t,this.validFlags="gim"+(t.options.ecmaVersion>=6?"uy":"")+(t.options.ecmaVersion>=9?"s":""),this.unicodeProperties=yt[t.options.ecmaVersion>=11?11:t.options.ecmaVersion],this.source="",this.flags="",this.start=0,this.switchU=!1,this.switchN=!1,this.pos=0,this.lastIntValue=0,this.lastStringValue="",this.lastAssertionIsQuantifiable=!1,this.numCapturingParens=0,this.maxBackReference=0,this.groupNames=[],this.backReferenceNames=[]};function Ct(t){return t<=65535?String.fromCharCode(t):(t-=65536,String.fromCharCode(55296+(t>>10),56320+(1023&t)))}function St(t){return 36===t||t>=40&&t<=43||46===t||63===t||t>=91&&t<=94||t>=123&&t<=125}function It(t){return t>=65&&t<=90||t>=97&&t<=122}function At(t){return It(t)||95===t}function Pt(t){return At(t)||Tt(t)}function Tt(t){return t>=48&&t<=57}function Et(t){return t>=48&&t<=57||t>=65&&t<=70||t>=97&&t<=102}function Lt(t){return t>=65&&t<=70?t-65+10:t>=97&&t<=102?t-97+10:t-48}function Mt(t){return t>=48&&t<=55}kt.prototype.reset=function(t,e,i){var n=-1!==i.indexOf("u");this.start=0|t,this.source=e+"",this.flags=i,this.switchU=n&&this.parser.options.ecmaVersion>=6,this.switchN=n&&this.parser.options.ecmaVersion>=9},kt.prototype.raise=function(t){this.parser.raiseRecoverable(this.start,"Invalid regular expression: /"+this.source+"/: "+t)},kt.prototype.at=function(t){var e=this.source,i=e.length;if(t>=i)return-1;var n=e.charCodeAt(t);return!this.switchU||n<=55295||n>=57344||t+1>=i?n:(n<<10)+e.charCodeAt(t+1)-56613888},kt.prototype.nextIndex=function(t){var e=this.source,i=e.length;if(t>=i)return i;var n=e.charCodeAt(t);return!this.switchU||n<=55295||n>=57344||t+1>=i?t+1:t+2},kt.prototype.current=function(){return this.at(this.pos)},kt.prototype.lookahead=function(){return this.at(this.nextIndex(this.pos))},kt.prototype.advance=function(){this.pos=this.nextIndex(this.pos)},kt.prototype.eat=function(t){return this.current()===t&&(this.advance(),!0)},bt.validateRegExpFlags=function(t){for(var e=t.validFlags,i=t.flags,n=0;n<i.length;n++){var s=i.charAt(n);-1===e.indexOf(s)&&this.raise(t.start,"Invalid regular expression flag"),i.indexOf(s,n+1)>-1&&this.raise(t.start,"Duplicate regular expression flag")}},bt.validateRegExpPattern=function(t){this.regexp_pattern(t),!t.switchN&&this.options.ecmaVersion>=9&&t.groupNames.length>0&&(t.switchN=!0,this.regexp_pattern(t))},bt.regexp_pattern=function(t){t.pos=0,t.lastIntValue=0,t.lastStringValue="",t.lastAssertionIsQuantifiable=!1,t.numCapturingParens=0,t.maxBackReference=0,t.groupNames.length=0,t.backReferenceNames.length=0,this.regexp_disjunction(t),t.pos!==t.source.length&&(t.eat(41)&&t.raise("Unmatched ')'"),(t.eat(93)||t.eat(125))&&t.raise("Lone quantifier brackets")),t.maxBackReference>t.numCapturingParens&&t.raise("Invalid escape");for(var e=0,i=t.backReferenceNames;e<i.length;e+=1){var n=i[e];-1===t.groupNames.indexOf(n)&&t.raise("Invalid named capture referenced")}},bt.regexp_disjunction=function(t){for(this.regexp_alternative(t);t.eat(124);)this.regexp_alternative(t);this.regexp_eatQuantifier(t,!0)&&t.raise("Nothing to repeat"),t.eat(123)&&t.raise("Lone quantifier brackets")},bt.regexp_alternative=function(t){for(;t.pos<t.source.length&&this.regexp_eatTerm(t););},bt.regexp_eatTerm=function(t){return this.regexp_eatAssertion(t)?(t.lastAssertionIsQuantifiable&&this.regexp_eatQuantifier(t)&&t.switchU&&t.raise("Invalid quantifier"),!0):!(t.switchU?!this.regexp_eatAtom(t):!this.regexp_eatExtendedAtom(t))&&(this.regexp_eatQuantifier(t),!0)},bt.regexp_eatAssertion=function(t){var e=t.pos;if(t.lastAssertionIsQuantifiable=!1,t.eat(94)||t.eat(36))return!0;if(t.eat(92)){if(t.eat(66)||t.eat(98))return!0;t.pos=e}if(t.eat(40)&&t.eat(63)){var i=!1;if(this.options.ecmaVersion>=9&&(i=t.eat(60)),t.eat(61)||t.eat(33))return this.regexp_disjunction(t),t.eat(41)||t.raise("Unterminated group"),t.lastAssertionIsQuantifiable=!i,!0}return t.pos=e,!1},bt.regexp_eatQuantifier=function(t,e){return void 0===e&&(e=!1),!!this.regexp_eatQuantifierPrefix(t,e)&&(t.eat(63),!0)},bt.regexp_eatQuantifierPrefix=function(t,e){return t.eat(42)||t.eat(43)||t.eat(63)||this.regexp_eatBracedQuantifier(t,e)},bt.regexp_eatBracedQuantifier=function(t,e){var i=t.pos;if(t.eat(123)){var n=0,s=-1;if(this.regexp_eatDecimalDigits(t)&&(n=t.lastIntValue,t.eat(44)&&this.regexp_eatDecimalDigits(t)&&(s=t.lastIntValue),t.eat(125)))return-1!==s&&s<n&&!e&&t.raise("numbers out of order in {} quantifier"),!0;t.switchU&&!e&&t.raise("Incomplete quantifier"),t.pos=i}return!1},bt.regexp_eatAtom=function(t){return this.regexp_eatPatternCharacters(t)||t.eat(46)||this.regexp_eatReverseSolidusAtomEscape(t)||this.regexp_eatCharacterClass(t)||this.regexp_eatUncapturingGroup(t)||this.regexp_eatCapturingGroup(t)},bt.regexp_eatReverseSolidusAtomEscape=function(t){var e=t.pos;if(t.eat(92)){if(this.regexp_eatAtomEscape(t))return!0;t.pos=e}return!1},bt.regexp_eatUncapturingGroup=function(t){var e=t.pos;if(t.eat(40)){if(t.eat(63)&&t.eat(58)){if(this.regexp_disjunction(t),t.eat(41))return!0;t.raise("Unterminated group")}t.pos=e}return!1},bt.regexp_eatCapturingGroup=function(t){if(t.eat(40)){if(this.options.ecmaVersion>=9?this.regexp_groupSpecifier(t):63===t.current()&&t.raise("Invalid group"),this.regexp_disjunction(t),t.eat(41))return t.numCapturingParens+=1,!0;t.raise("Unterminated group")}return!1},bt.regexp_eatExtendedAtom=function(t){return t.eat(46)||this.regexp_eatReverseSolidusAtomEscape(t)||this.regexp_eatCharacterClass(t)||this.regexp_eatUncapturingGroup(t)||this.regexp_eatCapturingGroup(t)||this.regexp_eatInvalidBracedQuantifier(t)||this.regexp_eatExtendedPatternCharacter(t)},bt.regexp_eatInvalidBracedQuantifier=function(t){return this.regexp_eatBracedQuantifier(t,!0)&&t.raise("Nothing to repeat"),!1},bt.regexp_eatSyntaxCharacter=function(t){var e=t.current();return!!St(e)&&(t.lastIntValue=e,t.advance(),!0)},bt.regexp_eatPatternCharacters=function(t){for(var e=t.pos,i=0;-1!==(i=t.current())&&!St(i);)t.advance();return t.pos!==e},bt.regexp_eatExtendedPatternCharacter=function(t){var e=t.current();return!(-1===e||36===e||e>=40&&e<=43||46===e||63===e||91===e||94===e||124===e)&&(t.advance(),!0)},bt.regexp_groupSpecifier=function(t){if(t.eat(63)){if(this.regexp_eatGroupName(t))return-1!==t.groupNames.indexOf(t.lastStringValue)&&t.raise("Duplicate capture group name"),void t.groupNames.push(t.lastStringValue);t.raise("Invalid group")}},bt.regexp_eatGroupName=function(t){if(t.lastStringValue="",t.eat(60)){if(this.regexp_eatRegExpIdentifierName(t)&&t.eat(62))return!0;t.raise("Invalid capture group name")}return!1},bt.regexp_eatRegExpIdentifierName=function(t){if(t.lastStringValue="",this.regexp_eatRegExpIdentifierStart(t)){for(t.lastStringValue+=Ct(t.lastIntValue);this.regexp_eatRegExpIdentifierPart(t);)t.lastStringValue+=Ct(t.lastIntValue);return!0}return!1},bt.regexp_eatRegExpIdentifierStart=function(t){var e=t.pos,i=t.current();return t.advance(),92===i&&this.regexp_eatRegExpUnicodeEscapeSequence(t)&&(i=t.lastIntValue),function(t){return f(t,!0)||36===t||95===t}(i)?(t.lastIntValue=i,!0):(t.pos=e,!1)},bt.regexp_eatRegExpIdentifierPart=function(t){var e=t.pos,i=t.current();return t.advance(),92===i&&this.regexp_eatRegExpUnicodeEscapeSequence(t)&&(i=t.lastIntValue),function(t){return g(t,!0)||36===t||95===t||8204===t||8205===t}(i)?(t.lastIntValue=i,!0):(t.pos=e,!1)},bt.regexp_eatAtomEscape=function(t){return!!(this.regexp_eatBackReference(t)||this.regexp_eatCharacterClassEscape(t)||this.regexp_eatCharacterEscape(t)||t.switchN&&this.regexp_eatKGroupName(t))||(t.switchU&&(99===t.current()&&t.raise("Invalid unicode escape"),t.raise("Invalid escape")),!1)},bt.regexp_eatBackReference=function(t){var e=t.pos;if(this.regexp_eatDecimalEscape(t)){var i=t.lastIntValue;if(t.switchU)return i>t.maxBackReference&&(t.maxBackReference=i),!0;if(i<=t.numCapturingParens)return!0;t.pos=e}return!1},bt.regexp_eatKGroupName=function(t){if(t.eat(107)){if(this.regexp_eatGroupName(t))return t.backReferenceNames.push(t.lastStringValue),!0;t.raise("Invalid named reference")}return!1},bt.regexp_eatCharacterEscape=function(t){return this.regexp_eatControlEscape(t)||this.regexp_eatCControlLetter(t)||this.regexp_eatZero(t)||this.regexp_eatHexEscapeSequence(t)||this.regexp_eatRegExpUnicodeEscapeSequence(t)||!t.switchU&&this.regexp_eatLegacyOctalEscapeSequence(t)||this.regexp_eatIdentityEscape(t)},bt.regexp_eatCControlLetter=function(t){var e=t.pos;if(t.eat(99)){if(this.regexp_eatControlLetter(t))return!0;t.pos=e}return!1},bt.regexp_eatZero=function(t){return 48===t.current()&&!Tt(t.lookahead())&&(t.lastIntValue=0,t.advance(),!0)},bt.regexp_eatControlEscape=function(t){var e=t.current();return 116===e?(t.lastIntValue=9,t.advance(),!0):110===e?(t.lastIntValue=10,t.advance(),!0):118===e?(t.lastIntValue=11,t.advance(),!0):102===e?(t.lastIntValue=12,t.advance(),!0):114===e&&(t.lastIntValue=13,t.advance(),!0)},bt.regexp_eatControlLetter=function(t){var e=t.current();return!!It(e)&&(t.lastIntValue=e%32,t.advance(),!0)},bt.regexp_eatRegExpUnicodeEscapeSequence=function(t){var e,i=t.pos;if(t.eat(117)){if(this.regexp_eatFixedHexDigits(t,4)){var n=t.lastIntValue;if(t.switchU&&n>=55296&&n<=56319){var s=t.pos;if(t.eat(92)&&t.eat(117)&&this.regexp_eatFixedHexDigits(t,4)){var r=t.lastIntValue;if(r>=56320&&r<=57343)return t.lastIntValue=1024*(n-55296)+(r-56320)+65536,!0}t.pos=s,t.lastIntValue=n}return!0}if(t.switchU&&t.eat(123)&&this.regexp_eatHexDigits(t)&&t.eat(125)&&((e=t.lastIntValue)>=0&&e<=1114111))return!0;t.switchU&&t.raise("Invalid unicode escape"),t.pos=i}return!1},bt.regexp_eatIdentityEscape=function(t){if(t.switchU)return!!this.regexp_eatSyntaxCharacter(t)||!!t.eat(47)&&(t.lastIntValue=47,!0);var e=t.current();return!(99===e||t.switchN&&107===e)&&(t.lastIntValue=e,t.advance(),!0)},bt.regexp_eatDecimalEscape=function(t){t.lastIntValue=0;var e=t.current();if(e>=49&&e<=57){do{t.lastIntValue=10*t.lastIntValue+(e-48),t.advance()}while((e=t.current())>=48&&e<=57);return!0}return!1},bt.regexp_eatCharacterClassEscape=function(t){var e=t.current();if(function(t){return 100===t||68===t||115===t||83===t||119===t||87===t}(e))return t.lastIntValue=-1,t.advance(),!0;if(t.switchU&&this.options.ecmaVersion>=9&&(80===e||112===e)){if(t.lastIntValue=-1,t.advance(),t.eat(123)&&this.regexp_eatUnicodePropertyValueExpression(t)&&t.eat(125))return!0;t.raise("Invalid property name")}return!1},bt.regexp_eatUnicodePropertyValueExpression=function(t){var e=t.pos;if(this.regexp_eatUnicodePropertyName(t)&&t.eat(61)){var i=t.lastStringValue;if(this.regexp_eatUnicodePropertyValue(t)){var n=t.lastStringValue;return this.regexp_validateUnicodePropertyNameAndValue(t,i,n),!0}}if(t.pos=e,this.regexp_eatLoneUnicodePropertyNameOrValue(t)){var s=t.lastStringValue;return this.regexp_validateUnicodePropertyNameOrValue(t,s),!0}return!1},bt.regexp_validateUnicodePropertyNameAndValue=function(t,e,i){L(t.unicodeProperties.nonBinary,e)||t.raise("Invalid property name"),t.unicodeProperties.nonBinary[e].test(i)||t.raise("Invalid property value")},bt.regexp_validateUnicodePropertyNameOrValue=function(t,e){t.unicodeProperties.binary.test(e)||t.raise("Invalid property name")},bt.regexp_eatUnicodePropertyName=function(t){var e=0;for(t.lastStringValue="";At(e=t.current());)t.lastStringValue+=Ct(e),t.advance();return""!==t.lastStringValue},bt.regexp_eatUnicodePropertyValue=function(t){var e=0;for(t.lastStringValue="";Pt(e=t.current());)t.lastStringValue+=Ct(e),t.advance();return""!==t.lastStringValue},bt.regexp_eatLoneUnicodePropertyNameOrValue=function(t){return this.regexp_eatUnicodePropertyValue(t)},bt.regexp_eatCharacterClass=function(t){if(t.eat(91)){if(t.eat(94),this.regexp_classRanges(t),t.eat(93))return!0;t.raise("Unterminated character class")}return!1},bt.regexp_classRanges=function(t){for(;this.regexp_eatClassAtom(t);){var e=t.lastIntValue;if(t.eat(45)&&this.regexp_eatClassAtom(t)){var i=t.lastIntValue;!t.switchU||-1!==e&&-1!==i||t.raise("Invalid character class"),-1!==e&&-1!==i&&e>i&&t.raise("Range out of order in character class")}}},bt.regexp_eatClassAtom=function(t){var e=t.pos;if(t.eat(92)){if(this.regexp_eatClassEscape(t))return!0;if(t.switchU){var i=t.current();(99===i||Mt(i))&&t.raise("Invalid class escape"),t.raise("Invalid escape")}t.pos=e}var n=t.current();return 93!==n&&(t.lastIntValue=n,t.advance(),!0)},bt.regexp_eatClassEscape=function(t){var e=t.pos;if(t.eat(98))return t.lastIntValue=8,!0;if(t.switchU&&t.eat(45))return t.lastIntValue=45,!0;if(!t.switchU&&t.eat(99)){if(this.regexp_eatClassControlLetter(t))return!0;t.pos=e}return this.regexp_eatCharacterClassEscape(t)||this.regexp_eatCharacterEscape(t)},bt.regexp_eatClassControlLetter=function(t){var e=t.current();return!(!Tt(e)&&95!==e)&&(t.lastIntValue=e%32,t.advance(),!0)},bt.regexp_eatHexEscapeSequence=function(t){var e=t.pos;if(t.eat(120)){if(this.regexp_eatFixedHexDigits(t,2))return!0;t.switchU&&t.raise("Invalid escape"),t.pos=e}return!1},bt.regexp_eatDecimalDigits=function(t){var e=t.pos,i=0;for(t.lastIntValue=0;Tt(i=t.current());)t.lastIntValue=10*t.lastIntValue+(i-48),t.advance();return t.pos!==e},bt.regexp_eatHexDigits=function(t){var e=t.pos,i=0;for(t.lastIntValue=0;Et(i=t.current());)t.lastIntValue=16*t.lastIntValue+Lt(i),t.advance();return t.pos!==e},bt.regexp_eatLegacyOctalEscapeSequence=function(t){if(this.regexp_eatOctalDigit(t)){var e=t.lastIntValue;if(this.regexp_eatOctalDigit(t)){var i=t.lastIntValue;e<=3&&this.regexp_eatOctalDigit(t)?t.lastIntValue=64*e+8*i+t.lastIntValue:t.lastIntValue=8*e+i}else t.lastIntValue=e;return!0}return!1},bt.regexp_eatOctalDigit=function(t){var e=t.current();return Mt(e)?(t.lastIntValue=e-48,t.advance(),!0):(t.lastIntValue=0,!1)},bt.regexp_eatFixedHexDigits=function(t,e){var i=t.pos;t.lastIntValue=0;for(var n=0;n<e;++n){var s=t.current();if(!Et(s))return t.pos=i,!1;t.lastIntValue=16*t.lastIntValue+Lt(s),t.advance()}return!0};var Ot=function(t){this.type=t.type,this.value=t.value,this.start=t.start,this.end=t.end,t.options.locations&&(this.loc=new z(t,t.startLoc,t.endLoc)),t.options.ranges&&(this.range=[t.start,t.end])},Nt=H.prototype;function zt(t){return t<=65535?String.fromCharCode(t):(t-=65536,String.fromCharCode(55296+(t>>10),56320+(1023&t)))}Nt.next=function(){this.options.onToken&&this.options.onToken(new Ot(this)),this.lastTokEnd=this.end,this.lastTokStart=this.start,this.lastTokEndLoc=this.endLoc,this.lastTokStartLoc=this.startLoc,this.nextToken()},Nt.getToken=function(){return this.next(),new Ot(this)},"undefined"!=typeof Symbol&&(Nt[Symbol.iterator]=function(){var t=this;return{next:function(){var e=t.getToken();return{done:e.type===b.eof,value:e}}}}),Nt.curContext=function(){return this.context[this.context.length-1]},Nt.nextToken=function(){var t=this.curContext();return t&&t.preserveSpace||this.skipSpace(),this.start=this.pos,this.options.locations&&(this.startLoc=this.curPosition()),this.pos>=this.input.length?this.finishToken(b.eof):t.override?t.override(this):void this.readToken(this.fullCharCodeAtPos())},Nt.readToken=function(t){return f(t,this.options.ecmaVersion>=6)||92===t?this.readWord():this.getTokenFromCode(t)},Nt.fullCharCodeAtPos=function(){var t=this.input.charCodeAt(this.pos);return t<=55295||t>=57344?t:(t<<10)+this.input.charCodeAt(this.pos+1)-56613888},Nt.skipBlockComment=function(){var t,e=this.options.onComment&&this.curPosition(),i=this.pos,n=this.input.indexOf("*/",this.pos+=2);if(-1===n&&this.raise(this.pos-2,"Unterminated comment"),this.pos=n+2,this.options.locations)for(C.lastIndex=i;(t=C.exec(this.input))&&t.index<this.pos;)++this.curLine,this.lineStart=t.index+t[0].length;this.options.onComment&&this.options.onComment(!0,this.input.slice(i+2,n),i,this.pos,e,this.curPosition())},Nt.skipLineComment=function(t){for(var e=this.pos,i=this.options.onComment&&this.curPosition(),n=this.input.charCodeAt(this.pos+=t);this.pos<this.input.length&&!S(n);)n=this.input.charCodeAt(++this.pos);this.options.onComment&&this.options.onComment(!1,this.input.slice(e+t,this.pos),e,this.pos,i,this.curPosition())},Nt.skipSpace=function(){t:for(;this.pos<this.input.length;){var t=this.input.charCodeAt(this.pos);switch(t){case 32:case 160:++this.pos;break;case 13:10===this.input.charCodeAt(this.pos+1)&&++this.pos;case 10:case 8232:case 8233:++this.pos,this.options.locations&&(++this.curLine,this.lineStart=this.pos);break;case 47:switch(this.input.charCodeAt(this.pos+1)){case 42:this.skipBlockComment();break;case 47:this.skipLineComment(2);break;default:break t}break;default:if(!(t>8&&t<14||t>=5760&&I.test(String.fromCharCode(t))))break t;++this.pos}}},Nt.finishToken=function(t,e){this.end=this.pos,this.options.locations&&(this.endLoc=this.curPosition());var i=this.type;this.type=t,this.value=e,this.updateContext(i)},Nt.readToken_dot=function(){var t=this.input.charCodeAt(this.pos+1);if(t>=48&&t<=57)return this.readNumber(!0);var e=this.input.charCodeAt(this.pos+2);return this.options.ecmaVersion>=6&&46===t&&46===e?(this.pos+=3,this.finishToken(b.ellipsis)):(++this.pos,this.finishToken(b.dot))},Nt.readToken_slash=function(){var t=this.input.charCodeAt(this.pos+1);return this.exprAllowed?(++this.pos,this.readRegexp()):61===t?this.finishOp(b.assign,2):this.finishOp(b.slash,1)},Nt.readToken_mult_modulo_exp=function(t){var e=this.input.charCodeAt(this.pos+1),i=1,n=42===t?b.star:b.modulo;return this.options.ecmaVersion>=7&&42===t&&42===e&&(++i,n=b.starstar,e=this.input.charCodeAt(this.pos+2)),61===e?this.finishOp(b.assign,i+1):this.finishOp(n,i)},Nt.readToken_pipe_amp=function(t){var e=this.input.charCodeAt(this.pos+1);return e===t?this.finishOp(124===t?b.logicalOR:b.logicalAND,2):61===e?this.finishOp(b.assign,2):this.finishOp(124===t?b.bitwiseOR:b.bitwiseAND,1)},Nt.readToken_caret=function(){return 61===this.input.charCodeAt(this.pos+1)?this.finishOp(b.assign,2):this.finishOp(b.bitwiseXOR,1)},Nt.readToken_plus_min=function(t){var e=this.input.charCodeAt(this.pos+1);return e===t?45!==e||this.inModule||62!==this.input.charCodeAt(this.pos+2)||0!==this.lastTokEnd&&!k.test(this.input.slice(this.lastTokEnd,this.pos))?this.finishOp(b.incDec,2):(this.skipLineComment(3),this.skipSpace(),this.nextToken()):61===e?this.finishOp(b.assign,2):this.finishOp(b.plusMin,1)},Nt.readToken_lt_gt=function(t){var e=this.input.charCodeAt(this.pos+1),i=1;return e===t?(i=62===t&&62===this.input.charCodeAt(this.pos+2)?3:2,61===this.input.charCodeAt(this.pos+i)?this.finishOp(b.assign,i+1):this.finishOp(b.bitShift,i)):33!==e||60!==t||this.inModule||45!==this.input.charCodeAt(this.pos+2)||45!==this.input.charCodeAt(this.pos+3)?(61===e&&(i=2),this.finishOp(b.relational,i)):(this.skipLineComment(4),this.skipSpace(),this.nextToken())},Nt.readToken_eq_excl=function(t){var e=this.input.charCodeAt(this.pos+1);return 61===e?this.finishOp(b.equality,61===this.input.charCodeAt(this.pos+2)?3:2):61===t&&62===e&&this.options.ecmaVersion>=6?(this.pos+=2,this.finishToken(b.arrow)):this.finishOp(61===t?b.eq:b.prefix,1)},Nt.getTokenFromCode=function(t){switch(t){case 46:return this.readToken_dot();case 40:return++this.pos,this.finishToken(b.parenL);case 41:return++this.pos,this.finishToken(b.parenR);case 59:return++this.pos,this.finishToken(b.semi);case 44:return++this.pos,this.finishToken(b.comma);case 91:return++this.pos,this.finishToken(b.bracketL);case 93:return++this.pos,this.finishToken(b.bracketR);case 123:return++this.pos,this.finishToken(b.braceL);case 125:return++this.pos,this.finishToken(b.braceR);case 58:return++this.pos,this.finishToken(b.colon);case 63:return++this.pos,this.finishToken(b.question);case 96:if(this.options.ecmaVersion<6)break;return++this.pos,this.finishToken(b.backQuote);case 48:var e=this.input.charCodeAt(this.pos+1);if(120===e||88===e)return this.readRadixNumber(16);if(this.options.ecmaVersion>=6){if(111===e||79===e)return this.readRadixNumber(8);if(98===e||66===e)return this.readRadixNumber(2)}case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:return this.readNumber(!1);case 34:case 39:return this.readString(t);case 47:return this.readToken_slash();case 37:case 42:return this.readToken_mult_modulo_exp(t);case 124:case 38:return this.readToken_pipe_amp(t);case 94:return this.readToken_caret();case 43:case 45:return this.readToken_plus_min(t);case 60:case 62:return this.readToken_lt_gt(t);case 61:case 33:return this.readToken_eq_excl(t);case 126:return this.finishOp(b.prefix,1)}this.raise(this.pos,"Unexpected character '"+zt(t)+"'")},Nt.finishOp=function(t,e){var i=this.input.slice(this.pos,this.pos+e);return this.pos+=e,this.finishToken(t,i)},Nt.readRegexp=function(){for(var t,e,i=this.pos;;){this.pos>=this.input.length&&this.raise(i,"Unterminated regular expression");var n=this.input.charAt(this.pos);if(k.test(n)&&this.raise(i,"Unterminated regular expression"),t)t=!1;else{if("["===n)e=!0;else if("]"===n&&e)e=!1;else if("/"===n&&!e)break;t="\\"===n}++this.pos}var s=this.input.slice(i,this.pos);++this.pos;var r=this.pos,a=this.readWord1();this.containsEsc&&this.unexpected(r);var o=this.regexpState||(this.regexpState=new kt(this));o.reset(i,s,a),this.validateRegExpFlags(o),this.validateRegExpPattern(o);var h=null;try{h=new RegExp(s,a)}catch(t){}return this.finishToken(b.regexp,{pattern:s,flags:a,value:h})},Nt.readInt=function(t,e){for(var i=this.pos,n=0,s=0,r=null==e?1/0:e;s<r;++s){var a=this.input.charCodeAt(this.pos),o=void 0;if((o=a>=97?a-97+10:a>=65?a-65+10:a>=48&&a<=57?a-48:1/0)>=t)break;++this.pos,n=n*t+o}return this.pos===i||null!=e&&this.pos-i!==e?null:n},Nt.readRadixNumber=function(t){var e=this.pos;this.pos+=2;var i=this.readInt(t);return null==i&&this.raise(this.start+2,"Expected number in radix "+t),this.options.ecmaVersion>=11&&110===this.input.charCodeAt(this.pos)?(i="undefined"!=typeof BigInt?BigInt(this.input.slice(e,this.pos)):null,++this.pos):f(this.fullCharCodeAtPos())&&this.raise(this.pos,"Identifier directly after number"),this.finishToken(b.num,i)},Nt.readNumber=function(t){var e=this.pos;t||null!==this.readInt(10)||this.raise(e,"Invalid number");var i=this.pos-e>=2&&48===this.input.charCodeAt(e);i&&this.strict&&this.raise(e,"Invalid number"),i&&/[89]/.test(this.input.slice(e,this.pos))&&(i=!1);var n=this.input.charCodeAt(this.pos);if(!i&&!t&&this.options.ecmaVersion>=11&&110===n){var s=this.input.slice(e,this.pos),r="undefined"!=typeof BigInt?BigInt(s):null;return++this.pos,f(this.fullCharCodeAtPos())&&this.raise(this.pos,"Identifier directly after number"),this.finishToken(b.num,r)}46!==n||i||(++this.pos,this.readInt(10),n=this.input.charCodeAt(this.pos)),69!==n&&101!==n||i||(43!==(n=this.input.charCodeAt(++this.pos))&&45!==n||++this.pos,null===this.readInt(10)&&this.raise(e,"Invalid number")),f(this.fullCharCodeAtPos())&&this.raise(this.pos,"Identifier directly after number");var a=this.input.slice(e,this.pos),o=i?parseInt(a,8):parseFloat(a);return this.finishToken(b.num,o)},Nt.readCodePoint=function(){var t;if(123===this.input.charCodeAt(this.pos)){this.options.ecmaVersion<6&&this.unexpected();var e=++this.pos;t=this.readHexChar(this.input.indexOf("}",this.pos)-this.pos),++this.pos,t>1114111&&this.invalidStringToken(e,"Code point out of bounds")}else t=this.readHexChar(4);return t},Nt.readString=function(t){for(var e="",i=++this.pos;;){this.pos>=this.input.length&&this.raise(this.start,"Unterminated string constant");var n=this.input.charCodeAt(this.pos);if(n===t)break;92===n?(e+=this.input.slice(i,this.pos),e+=this.readEscapedChar(!1),i=this.pos):(S(n,this.options.ecmaVersion>=10)&&this.raise(this.start,"Unterminated string constant"),++this.pos)}return e+=this.input.slice(i,this.pos++),this.finishToken(b.string,e)};var Rt={};Nt.tryReadTemplateToken=function(){this.inTemplateElement=!0;try{this.readTmplToken()}catch(t){if(t!==Rt)throw t;this.readInvalidTemplateToken()}this.inTemplateElement=!1},Nt.invalidStringToken=function(t,e){if(this.inTemplateElement&&this.options.ecmaVersion>=9)throw Rt;this.raise(t,e)},Nt.readTmplToken=function(){for(var t="",e=this.pos;;){this.pos>=this.input.length&&this.raise(this.start,"Unterminated template");var i=this.input.charCodeAt(this.pos);if(96===i||36===i&&123===this.input.charCodeAt(this.pos+1))return this.pos!==this.start||this.type!==b.template&&this.type!==b.invalidTemplate?(t+=this.input.slice(e,this.pos),this.finishToken(b.template,t)):36===i?(this.pos+=2,this.finishToken(b.dollarBraceL)):(++this.pos,this.finishToken(b.backQuote));if(92===i)t+=this.input.slice(e,this.pos),t+=this.readEscapedChar(!0),e=this.pos;else if(S(i)){switch(t+=this.input.slice(e,this.pos),++this.pos,i){case 13:10===this.input.charCodeAt(this.pos)&&++this.pos;case 10:t+="\n";break;default:t+=String.fromCharCode(i)}this.options.locations&&(++this.curLine,this.lineStart=this.pos),e=this.pos}else++this.pos}},Nt.readInvalidTemplateToken=function(){for(;this.pos<this.input.length;this.pos++)switch(this.input[this.pos]){case"\\":++this.pos;break;case"$":if("{"!==this.input[this.pos+1])break;case"`":return this.finishToken(b.invalidTemplate,this.input.slice(this.start,this.pos))}this.raise(this.start,"Unterminated template")},Nt.readEscapedChar=function(t){var e=this.input.charCodeAt(++this.pos);switch(++this.pos,e){case 110:return"\n";case 114:return"\r";case 120:return String.fromCharCode(this.readHexChar(2));case 117:return zt(this.readCodePoint());case 116:return"\t";case 98:return"\b";case 118:return"\v";case 102:return"\f";case 13:10===this.input.charCodeAt(this.pos)&&++this.pos;case 10:return this.options.locations&&(this.lineStart=this.pos,++this.curLine),"";default:if(e>=48&&e<=55){var i=this.input.substr(this.pos-1,3).match(/^[0-7]+/)[0],n=parseInt(i,8);return n>255&&(i=i.slice(0,-1),n=parseInt(i,8)),this.pos+=i.length-1,e=this.input.charCodeAt(this.pos),"0"===i&&56!==e&&57!==e||!this.strict&&!t||this.invalidStringToken(this.pos-1-i.length,t?"Octal literal in template string":"Octal literal in strict mode"),String.fromCharCode(n)}return S(e)?"":String.fromCharCode(e)}},Nt.readHexChar=function(t){var e=this.pos,i=this.readInt(16,t);return null===i&&this.invalidStringToken(e,"Bad character escape sequence"),i},Nt.readWord1=function(){this.containsEsc=!1;for(var t="",e=!0,i=this.pos,n=this.options.ecmaVersion>=6;this.pos<this.input.length;){var s=this.fullCharCodeAtPos();if(g(s,n))this.pos+=s<=65535?1:2;else{if(92!==s)break;this.containsEsc=!0,t+=this.input.slice(i,this.pos);var r=this.pos;117!==this.input.charCodeAt(++this.pos)&&this.invalidStringToken(this.pos,"Expecting Unicode escape sequence \\uXXXX"),++this.pos;var a=this.readCodePoint();(e?f:g)(a,n)||this.invalidStringToken(r,"Invalid Unicode escape"),t+=zt(a),i=this.pos}e=!1}return t+this.input.slice(i,this.pos)},Nt.readWord=function(){var t=this.readWord1(),e=b.name;return this.keywords.test(t)&&(this.containsEsc&&this.raiseRecoverable(this.start,"Escape sequence in keyword "+t),e=y[t]),this.finishToken(e,t)};var Vt="6.3.0";function Bt(t,e){return H.parse(t,e)}function Dt(t,e,i){return H.parseExpressionAt(t,e,i)}function Ft(t,e){return H.tokenizer(t,e)}},function(t,e){},function(t,e,i){t.exports=i.p+"app/img/pier-2.png"},function(t,e,i){t.exports=i.p+"app/img/Dizzy_000.png"},function(t,e,i){var n=i(34);"string"==typeof n&&(n=[[t.i,n,""]]);var s={hmr:!0,transform:void 0,insertInto:void 0};i(59)(n,s);n.locals&&(t.exports=n.locals)},function(t,e,i){var n=i(35);(t.exports=i(36)(!1)).push([t.i,".overlay{position:absolute;left:0;top:0;background-color:#000;z-index:55;width:100vw;height:100vh;visibility:visible}.overlay.init{visibility:hidden;transition:0.6s all ease;background-color:rgba(0,0,0,0)}.overlay.active{visibility:visible;transition:0.6s all ease;background-color:#000}.action-icons{position:absolute;left:0;top:84%;height:65px;width:100%;display:flex;justify-content:space-around;z-index:20}.action-icons .icon-wrapper{background-color:#fff;padding:6px;border:1px solid #000;width:65px;height:65px;border-radius:50%;z-index:5}@media (max-width: 700px){.action-icons .icon-wrapper:first-child .icons-popover{transform:translate(0, -100%)}.action-icons .icon-wrapper:last-child .icons-popover{transform:translate(-75%, -100%)}}.action-icons .icon{display:block;width:65px;height:65px;background-size:cover;background-position:center;background-repeat:no-repeat;background-color:rgba(0,0,0,0.5);transition:0.2s all ease;z-index:20;border-radius:50%;position:relative;cursor:pointer;-moz-animation:0.35s scale infinite alternate;-webkit-animation:0.35s scale infinite alternate}.action-icons .icon:hover{transform:scale(1.15);-webkit-animation-play-state:paused;-moz-animation-play-state:paused;-o-animation-play-state:paused;animation-play-state:paused;cursor:pointer}.icons-popover{display:block;position:absolute;width:250px;height:auto;border-radius:5px;border:1px solid #666;padding:5px;transition:0.2s all ease;transform:translate(-35%, -100%);top:-10px;background-color:rgba(255,255,255,0.85);opacity:0;visibility:hidden;text-align:center}.icons-popover.show{opacity:1;visibility:visible}@-moz-keyframes scale{from{transform:scale(1)}to{transform:scale(1.05)}}@-ms-keyframes scale{from{transform:scale(1)}to{transform:scale(1.05)}}@-webkit-keyframes scale{from{transform:scale(1)}to{transform:scale(1.05)}}.scene-blur{position:absolute;left:0;top:0;width:100vw;height:100vh;background-color:rgba(0,0,0,0.4);z-index:1}.info-scene{display:flex;align-items:center;justify-content:center;width:100vw;height:100vh;background-image:url("+n(i(37))+');background-repeat:no-repeat;background-size:cover;background-position:center bottom;color:#000}.info-scene .info-scene__text{display:flex;flex-direction:column;align-items:center;z-index:2;padding:10px 20px;height:auto;max-width:90%;width:auto;background:rgba(248,223,205,0.8);position:relative;border:10px solid red}.info-scene .info-scene__text::before{content:\'\';position:absolute;left:-7px;top:-7px;border:5px dotted #fff;width:calc(100% + 4px);height:calc(100% + 5px)}.info-scene .croco{position:absolute;bottom:0;left:60%;width:160px;height:auto;z-index:2}@media (max-width: 750px){.info-scene .croco{display:none}}.info-scene__title{margin:0;text-align:center;font-size:2em}.info-scene__description{width:100%;padding:0;margin:0;line-height:30px;font-size:1.5em;text-align:center}.info-scene__button{margin-top:20px;font-size:1.5em;border-radius:5px;padding:10px 20px;transition:0.2s all ease;color:#FFF;background-color:#cf0b0c;cursor:pointer;z-index:100}.info-scene__button:hover{background-color:#cf0003;transform:scale(1.05)}.circus-wrapper{display:block;height:100vh;width:100vw}.circus-wrapper .circus{width:100%;height:100%}.circus-wrapper .voice{width:200px;height:auto}.circus-wrapper .speaker-text{position:absolute;top:calc(50% + 110px);left:calc(50% - 85px);color:#ffffff}.circus-wrapper .speaker-wrapper{position:absolute;left:calc(50% - 100px);top:calc(50% - 75px);display:block;padding:10px;background-color:rgba(255,255,255,0.8);border:1px solid #000;border-radius:50px;-moz-animation:0.35s scale infinite alternate;-webkit-animation:0.35s scale infinite alternate}@-moz-keyframes scale{from{transform:scale(1)}to{transform:scale(1.05)}}@-ms-keyframes scale{from{transform:scale(1)}to{transform:scale(1.05)}}@-webkit-keyframes scale{from{transform:scale(1)}to{transform:scale(1.05)}}.sky{background:deepskyblue;width:100vw;height:40vh;overflow:hidden}.sky.height-25{height:25vh}.sky.height-50{height:50vh}.sky.no-background{background:none}.sky.hide-clouds .cloud{display:none}.sky.h-21{height:21vh}.sky-gradient{width:100%;position:relative;height:40vh;transition:box-shadow 150ms}.sky-gradient.abs{position:absolute}.sky-gradient.vh-22{height:22vh}.sky-gradient::after{content:"";position:absolute;top:100%;width:2500%;height:400%;background:inherit;transform:translateZ(0);opacity:0;transition:opacity 0s 1s}.sky-gradient-16{background:linear-gradient(to bottom, #1e528e 0%, #265889 50%, #9da671 100%)}.sky-gradient-17{background:linear-gradient(to bottom, #1e528e 0%, #728a7c 50%, #e9ce5d 100%)}.sky-gradient-12{background:linear-gradient(to bottom, #90dffe 0%, #38a3d1 100%)}.sky.sky--dark{background:deepskyblue}.sun{opacity:1;box-shadow:0 0 15px 3px yellow;width:100px;height:100px;position:absolute;top:25px;right:15vw;animation:sunpulse 2s alternate infinite;border-radius:50%;background-image:radial-gradient(circle, #ffd200 95%, #f7971e)}@keyframes sunpulse{from{box-shadow:0 0 100px #ff0, 0 0 100px #ff0}to{box-shadow:0 0 25px #ff0, 0 0 75px #ff0}}.cloud-wrapper{animation:movecloudsoversky 15s linear infinite;animation-delay:-1s;z-index:2001}.cloud-wrapper.delay-1{animation-delay:-1s}.cloud-wrapper.delay-2{animation-delay:-6s}.cloud{width:200px;height:60px;background:white;position:relative;border-radius:200px;z-index:2000}.cloud:before{content:"";background:white;position:absolute;width:100px;height:80px;top:-15px;left:10px;border-radius:100px;transform:rotate(30deg)}.cloud:after{content:"";background:white;position:absolute;width:100px;height:80px;top:-15px;left:10px;border-radius:100px;transform:rotate(30deg);width:120px;height:120px;top:-55px;left:auto;right:15px}.c1{margin-top:-20px;animation-delay:0s}.c2{margin-top:10px;animation-delay:0s}.c3{margin-top:5px;animation-delay:0s}@keyframes movecloudsoversky{0%{transform:translate(-25%, 10vh);opacity:0.8}50%{opacity:0.8}100%{transform:translate(125%, 10vh);opacity:0.4}}.rain{position:absolute;left:0;width:100%;height:100%;z-index:2;overflow:hidden}.rain.back-row{display:none;z-index:1;bottom:60px;opacity:0.5}.back-row-toggle .rain.back-row{display:block}.drop{position:absolute;bottom:100%;width:15px;height:120px;pointer-events:none;animation:drop 0.5s linear infinite}@keyframes drop{0%{transform:translateY(0vh)}75%{transform:translateY(90vh)}100%{transform:translateY(90vh)}}.stem{width:2.5px;height:60%;margin-left:7px;background:linear-gradient(to bottom, rgba(255,255,255,0), rgba(255,255,255,0.25));animation:stem 0.5s linear infinite}@keyframes stem{0%{opacity:1}65%{opacity:1}75%{opacity:0}100%{opacity:0}}.splat{width:25px;height:10px;border-top:2px dotted rgba(255,255,255,0.5);border-radius:50%;opacity:1;transform:scale(0);animation:splat 0.5s linear infinite;display:none}@keyframes splat{0%{opacity:1;transform:scale(0)}80%{opacity:1;transform:scale(0)}90%{opacity:0.5;transform:scale(1)}100%{opacity:0;transform:scale(1.5)}}.decorations{display:block;width:100%;height:65vh}.decorations.pier{display:flex;position:absolute;height:300px;width:auto}.decorations.pier::before{content:\'\';width:200px;height:91px;position:absolute;left:35%;top:55px;background-image:url('+n(i(38))+");background-repeat:no-repeat;background-position:center;background-size:contain}.decorations.decorations-bottom{left:0;bottom:0}.decorations.no-height{height:auto}.decorations .wrapper{display:flex;flex-direction:column;width:100%;position:relative;background:#4caf50;background:linear-gradient(90deg, #6abd6d 31%, #57b05a 73%);padding:10px 0}.decorations .wrapper .rocks{position:absolute;left:0;top:40vh;z-index:5;width:100%;height:100%}.decorations .wrapper .rocks .rock{background-repeat:no-repeat;background-size:contain;background-position:center;width:50px;height:50px;position:absolute}.decorations .wrapper .rocks .rock.type-1{background-image:url("+n(i(39))+")}.decorations .wrapper .rocks .rock.type-2{background-image:url("+n(i(40))+")}.decorations .wrapper .rocks .rock.type-3{width:180px;height:140px;background-image:url("+n(i(41))+")}.decorations .wrapper .rocks .rock.p-1{left:5px;top:20px}.decorations .wrapper .rocks .rock.p-2{right:10px;top:15%}.decorations .wrapper .rocks .rock.p-3{left:36%;top:12%}.decorations .road{display:block;width:100%;height:60px;position:relative;bottom:100px;margin-top:15px;background-size:70px;background-position:center;background-repeat:repeat-x;background-image:url("+n(i(42))+")}.decorations .factory-wrapper{display:flex;justify-content:flex-end;align-items:center;height:100%;width:100%;position:relative;bottom:100px;min-width:500px}.decorations .factory{display:block;background-repeat:no-repeat;background-position:center;background-size:contain;position:relative}.decorations .factory-2{width:250px;height:220px;background-image:url("+n(i(43))+");background-size:contain}.decorations .factory-4{width:210px;height:220px;background-image:url("+n(i(44))+");background-size:contain;transform:rotateY(180deg)}.decorations .factory-5{width:236px;height:220px;background-image:url("+n(i(4))+");background-size:contain}.decorations .grass{position:absolute;display:block;width:50px;height:50px;background-image:url("+n(i(4))+");background-repeat:no-repeat;background-position:center;z-index:5}.decorations .reeds{background-image:url("+n(i(45))+");background-size:cover;bottom:0}.decorations .action-icons{top:34%}.decorations .action-icons.fixed-top{top:71%}.decorations .tree{position:absolute;top:185px;left:0;width:350px;height:50px;background-image:url("+n(i(46))+");background-repeat:repeat-x;background-size:contain;background-position:center}.decorations .tree.type-2{width:100%;top:261px;z-index:5}.smoke{position:absolute;z-index:3;width:1px;height:160px}.smoke.p-1{left:11.5%;bottom:80%}.smoke.p-2{bottom:82%;left:39.5%}.smoke.bigger span{border-width:80px}@media (max-width: 681px){.smoke.p-1{bottom:71%}.smoke.p-2{left:37%;bottom:70%}}.smoke span{display:block;position:absolute;bottom:-35px;margin-left:-20px;height:0;width:0;border:35px solid #4b4b4b;border-radius:35px;left:-14px;opacity:0;transform:scale(0.2)}@keyframes smokeL{0%{transform:scale(0.2) translate(0, 0)}10%{opacity:1;transform:scale(0.2) translate(0, -5px)}100%{opacity:0;transform:scale(1) translate(-20px, -130px)}}@keyframes smokeR{0%{transform:scale(0.2) translate(0, 0)}10%{opacity:1;transform:scale(0.2) translate(0, -5px)}100%{opacity:0;transform:scale(1) translate(20px, -130px)}}.smoke .s0{animation:smokeL 10s 0s infinite}.smoke .s1{animation:smokeR 10s 1s infinite}.smoke .s2{animation:smokeL 10s 2s infinite}.smoke .s3{animation:smokeR 10s 3s infinite}.smoke .s4{animation:smokeL 10s 4s infinite}.smoke .s5{animation:smokeR 10s 5s infinite}.smoke .s6{animation:smokeL 10s 6s infinite}.smoke .s7{animation:smokeR 10s 7s infinite}.smoke .s8{animation:smokeL 10s 8s infinite}.smoke .s9{animation:smokeR 10s 9s infinite}.beach-decorations{position:absolute;left:0;bottom:0;width:100%;height:25vh;background:#ffe259;background:linear-gradient(90deg, #ffe259 0%, #ffa751 100%)}.beach-decorations .bg{background-repeat:no-repeat;background-size:cover;background-position:center;position:absolute}.beach-decorations .shell{width:35px;height:35px}.beach-decorations .shell.type-1{left:10px;top:15px;background-image:url("+n(i(47))+")}.beach-decorations .shell.type-2{right:10px;top:50%;background-image:url("+n(i(48))+")}.beach-decorations .shell.type-3{transform:rotate(90deg);left:40%;top:22%;background-image:url("+n(i(49))+")}.beach-decorations .shell.type-4{left:50px;top:calc(90% - 50px);background-image:url("+n(i(50))+")}.beach-decorations .shell.type-5{right:40px;top:5%;background-image:url("+n(i(51))+")}.beach-decorations .shell.type-6{left:60%;top:22%;background-image:url("+n(i(52))+")}.beach-decorations .snail,.beach-decorations .crab{width:40px;height:40px;transition:0.2s all ease;z-index:10}@media (max-width: 600px){.beach-decorations .snail,.beach-decorations .crab{display:none}}.beach-decorations .snail{background-image:url("+n(i(53))+");right:30px;top:0;animation:20s snailMove infinite alternate}.beach-decorations .crab{background-image:url("+n(i(54))+");left:30px;top:0;animation:20s crabMove infinite alternate}.beach-decorations .umbrella{background-image:url("+n(i(55))+");width:176px;height:145px;left:56%;bottom:0}@keyframes crabMove{0%{left:30px;top:30px;transform:rotate(7deg)}25%{left:25%;top:25%;transform:rotate(-7deg)}50%{left:50%;top:30%;transform:rotate(7deg)}75%{left:75%;top:70%;transform:rotate(-7deg)}100%{left:88%;top:73%;transform:rotate(0deg)}}@keyframes snailMove{0%{right:30px;top:30px;transform:rotate(7deg)}25%{right:25%;top:25%;transform:rotate(-7deg)}50%{right:50%;top:55%;transform:rotate(7deg)}75%{right:75%;top:70%;transform:rotate(-7deg)}100%{right:88%;top:73%;transform:rotate(0deg)}}.sea-decorations{position:absolute;left:0;width:100%}.sea-decorations.p-1{top:34%;height:35vh}.sea-decorations.p-2{top:65%;height:20vh}.sea-decorations .croco{position:absolute;left:100px;top:0;width:99px;height:54px;max-height:54px;background-image:url("+n(i(56))+");background-repeat:no-repeat;background-size:cover;background-position:center;animation:10s headSwim infinite alternate}.sea-decorations .croco-full{position:absolute;left:0;top:10%;width:200px;height:80px;background-repeat:no-repeat;background-size:contain;background-position:center;background-image:url("+n(i(57))+");transform:rotate(-4deg)}.sea-decorations .croco-full.rotate{transform:scaleX(-1)}@keyframes headSwim{0%{left:5%;top:5%}25%{left:5%;top:15%;background-position:center 55px}50%{left:25%;top:15%;background-position:center}75%{left:25%;top:20%;background-position:center 55px}100%{left:calc(100% - 100px);top:35%;background-position:center}}@keyframes swim{0%{left:5%;top:5%}100%{left:55%;top:15%}}.scene-information-popup{position:absolute;left:0;top:0;width:100vw;height:100vh;align-items:center;justify-content:center;display:flex;opacity:0;transition:1s all ease;z-index:15;visibility:hidden}.scene-information-popup.active{visibility:visible;opacity:1}.scene-information-popup__wrapper{position:relative;padding:15px 10px;width:65%;min-width:320px;height:auto;text-align:center}.scene-information-popup__text{font-size:29px;border-radius:10px;color:#fff;text-shadow:1px 1px 1px darkblue}.scene-information-popup__close{position:absolute;right:0;top:0;width:17px;height:17px;background-image:url("+n(i(58))+");background-size:cover;background-position:center;cursor:pointer;transition:0.2s all ease}.scene-information-popup__close:hover{transform:rotate(90deg)}.final{display:flex;justify-content:center;width:100vw;height:100vh;perspective-origin:50% -100%;perspective:1500px;background-image:linear-gradient(to right, #4facfe 0%, #00f2fe 100%);overflow:hidden}.final .sky{position:absolute;left:0;top:0}.final img{position:absolute;width:265px;height:250px;opacity:.85;z-index:1;left:calc(50% - 146px);top:calc(50% - 103px)}.final .cube{position:relative;width:250px;height:250px;transform-style:preserve-3d;transform:rotateY(12deg) rotatex(0deg);margin-top:20%}@media (max-width: 560px){.final .cube{margin-top:35%}}.final .cube div{position:absolute;width:250px;height:250px;background-color:inherit;border:1px solid #000;z-index:2;box-shadow:inset 0 0 2000px rgba(255,255,255,0.5);margin:-20px}.final .cube div:nth-child(1){transform:translateZ(125px)}.final .cube div:nth-child(2){transform:rotateX(180deg) translateZ(125px)}.final .cube div:nth-child(3){transform:rotateY(-90deg) translateZ(125px)}.final .cube div:nth-child(4){transform:rotateY(90deg) translateZ(125px);z-index:1}.final .cube div:nth-child(5){transform:rotateX(90deg) translateZ(125px)}.final .cube div:nth-child(6){transform:rotateX(-90deg) translateZ(125px)}.fireworks-wrapper{width:100vw;height:100vh;background-color:#000}.pyro>.before,.pyro>.after{position:absolute;width:5px;height:5px;border-radius:50%;box-shadow:-120px -218.66667px blue, 248px -16.66667px #00ff84, 190px 16.33333px #002bff, -113px -308.66667px #ff009d, -109px -287.66667px #ffb300, -50px -313.66667px #ff006e, 226px -31.66667px #ff4000, 180px -351.66667px #ff00d0, -12px -338.66667px #00f6ff, 220px -388.66667px #99ff00, -69px -27.66667px #ff0400, -111px -339.66667px #6200ff, 155px -237.66667px #00ddff, -152px -380.66667px #00ffd0, -50px -37.66667px #00ffdd, -95px -175.66667px #a6ff00, -88px 10.33333px #0d00ff, 112px -309.66667px #005eff, 69px -415.66667px #ff00a6, 168px -100.66667px #ff004c, -244px 24.33333px #ff6600, 97px -325.66667px #ff0066, -211px -182.66667px #00ffa2, 236px -126.66667px #b700ff, 140px -196.66667px #9000ff, 125px -175.66667px #00bbff, 118px -381.66667px #ff002f, 144px -111.66667px #ffae00, 36px -78.66667px #f600ff, -63px -196.66667px #c800ff, -218px -227.66667px #d4ff00, -134px -377.66667px #ea00ff, -36px -412.66667px #ff00d4, 209px -106.66667px #00fff2, 91px -278.66667px #000dff, -22px -191.66667px #9dff00, 139px -392.66667px #a6ff00, 56px -2.66667px #0099ff, -156px -276.66667px #ea00ff, -163px -233.66667px #00fffb, -238px -346.66667px #00ff73, 62px -363.66667px #0088ff, 244px -170.66667px #0062ff, 224px -142.66667px #b300ff, 141px -208.66667px #9000ff, 211px -285.66667px #ff6600, 181px -128.66667px #1e00ff, 90px -123.66667px #c800ff, 189px 70.33333px #00ffc8, -18px -383.66667px #00ff33, 100px -6.66667px #ff008c;animation:1s bang ease-out infinite backwards, 1s gravity ease-in infinite backwards, 5s position linear infinite backwards}.pyro>.after{-moz-animation-delay:1.25s, 1.25s, 1.25s;-webkit-animation-delay:1.25s, 1.25s, 1.25s;-o-animation-delay:1.25s, 1.25s, 1.25s;-ms-animation-delay:1.25s, 1.25s, 1.25s;animation-delay:1.25s, 1.25s, 1.25s;-moz-animation-duration:1.25s, 1.25s, 6.25s;-webkit-animation-duration:1.25s, 1.25s, 6.25s;-o-animation-duration:1.25s, 1.25s, 6.25s;-ms-animation-duration:1.25s, 1.25s, 6.25s;animation-duration:1.25s, 1.25s, 6.25s}@-webkit-keyframes bang{from{box-shadow:0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white}}@-moz-keyframes bang{from{box-shadow:0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white}}@-o-keyframes bang{from{box-shadow:0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white}}@-ms-keyframes bang{from{box-shadow:0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white}}@keyframes bang{from{box-shadow:0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white, 0 0 white}}@-webkit-keyframes gravity{to{transform:translateY(200px);-moz-transform:translateY(200px);-webkit-transform:translateY(200px);-o-transform:translateY(200px);-ms-transform:translateY(200px);opacity:0}}@-moz-keyframes gravity{to{transform:translateY(200px);-moz-transform:translateY(200px);-webkit-transform:translateY(200px);-o-transform:translateY(200px);-ms-transform:translateY(200px);opacity:0}}@-o-keyframes gravity{to{transform:translateY(200px);-moz-transform:translateY(200px);-webkit-transform:translateY(200px);-o-transform:translateY(200px);-ms-transform:translateY(200px);opacity:0}}@-ms-keyframes gravity{to{transform:translateY(200px);-moz-transform:translateY(200px);-webkit-transform:translateY(200px);-o-transform:translateY(200px);-ms-transform:translateY(200px);opacity:0}}@keyframes gravity{to{transform:translateY(200px);-moz-transform:translateY(200px);-webkit-transform:translateY(200px);-o-transform:translateY(200px);-ms-transform:translateY(200px);opacity:0}}@-webkit-keyframes position{0%,19.9%{margin-top:10%;margin-left:40%}20%,39.9%{margin-top:40%;margin-left:30%}40%,59.9%{margin-top:20%;margin-left:70%}60%,79.9%{margin-top:30%;margin-left:20%}80%,99.9%{margin-top:30%;margin-left:80%}}@-moz-keyframes position{0%,19.9%{margin-top:10%;margin-left:40%}20%,39.9%{margin-top:40%;margin-left:30%}40%,59.9%{margin-top:20%;margin-left:70%}60%,79.9%{margin-top:30%;margin-left:20%}80%,99.9%{margin-top:30%;margin-left:80%}}@-o-keyframes position{0%,19.9%{margin-top:10%;margin-left:40%}20%,39.9%{margin-top:40%;margin-left:30%}40%,59.9%{margin-top:20%;margin-left:70%}60%,79.9%{margin-top:30%;margin-left:20%}80%,99.9%{margin-top:30%;margin-left:80%}}@-ms-keyframes position{0%,19.9%{margin-top:10%;margin-left:40%}20%,39.9%{margin-top:40%;margin-left:30%}40%,59.9%{margin-top:20%;margin-left:70%}60%,79.9%{margin-top:30%;margin-left:20%}80%,99.9%{margin-top:30%;margin-left:80%}}@keyframes position{0%,19.9%{margin-top:10%;margin-left:40%}20%,39.9%{margin-top:40%;margin-left:30%}40%,59.9%{margin-top:20%;margin-left:70%}60%,79.9%{margin-top:30%;margin-left:20%}80%,99.9%{margin-top:30%;margin-left:80%}}html,body{margin:0;padding:0;box-sizing:border-box;overflow:hidden}#croco{width:100%;height:100%}.y-offset{position:relative;top:-40px}.y-offset-2{position:relative;top:-50px}.y-offset-3{position:relative;top:-21px}.canvas-wrapper{position:relative}canvas.absolute{position:absolute;left:0;top:0}.hidden{display:none}button{outline:none;border:none}button:focus{outline:none;border:none}#scene.blur>*:not([data-scene-information-popup]):not([data-scene-win]){filter:blur(14px)}*{font-family:cursive}\n",""])},function(t,e){t.exports=function(t){return"string"!=typeof t?t:(/^['"].*['"]$/.test(t)&&(t=t.slice(1,-1)),/["'() \t\n]/.test(t)?'"'+t.replace(/"/g,'\\"').replace(/\n/g,"\\n")+'"':t)}},function(t,e){t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var i=function(t,e){var i=t[1]||"",n=t[3];if(!n)return i;if(e&&"function"==typeof btoa){var s=(a=n,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),r=n.sources.map((function(t){return"/*# sourceURL="+n.sourceRoot+t+" */"}));return[i].concat(r).concat([s]).join("\n")}var a;return[i].join("\n")}(e,t);return e[2]?"@media "+e[2]+"{"+i+"}":i})).join("")},e.i=function(t,i){"string"==typeof t&&(t=[[null,t,""]]);for(var n={},s=0;s<this.length;s++){var r=this[s][0];"number"==typeof r&&(n[r]=!0)}for(s=0;s<t.length;s++){var a=t[s];"number"==typeof a[0]&&n[a[0]]||(i&&!a[2]?a[2]=i:i&&(a[2]="("+a[2]+") and ("+i+")"),e.push(a))}},e}},function(t,e,i){t.exports=i.p+"app/img/circus-intro.png"},function(t,e,i){t.exports=i.p+"app/img/croco-dead.png"},function(t,e,i){t.exports=i.p+"app/img/rock-1.png"},function(t,e,i){t.exports=i.p+"app/img/rock-2.png"},function(t,e,i){t.exports=i.p+"app/img/rock-3.png"},function(t,e,i){t.exports=i.p+"app/img/road.svg"},function(t,e,i){t.exports=i.p+"app/img/factory-2.png"},function(t,e,i){t.exports=i.p+"app/img/factory-4.png"},function(t,e,i){t.exports=i.p+"app/img/reeds.png"},function(t,e,i){t.exports=i.p+"app/img/tree.svg"},function(t,e,i){t.exports=i.p+"app/img/shell-1.svg"},function(t,e,i){t.exports=i.p+"app/img/shell-2.svg"},function(t,e,i){t.exports=i.p+"app/img/shell-3.svg"},function(t,e,i){t.exports=i.p+"app/img/shell-4.svg"},function(t,e,i){t.exports=i.p+"app/img/shell-5.svg"},function(t,e,i){t.exports=i.p+"app/img/shell-6.svg"},function(t,e,i){t.exports=i.p+"app/img/snail.svg"},function(t,e,i){t.exports=i.p+"app/img/crab.svg"},function(t,e,i){t.exports=i.p+"app/img/sun-umbrella.png"},function(t,e,i){t.exports=i.p+"app/img/croco-head.png"},function(t,e,i){t.exports=i.p+"app/img/croco-swimming.png"},function(t,e,i){t.exports=i.p+"app/img/cancel.svg"},function(t,e,i){var n,s,r={},a=(n=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===s&&(s=n.apply(this,arguments)),s}),o=function(t,e){return e?e.querySelector(t):document.querySelector(t)},h=function(t){var e={};return function(t,i){if("function"==typeof t)return t();if(void 0===e[t]){var n=o.call(this,t,i);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}}(),c=null,l=0,u=[],p=i(60);function d(t,e){for(var i=0;i<t.length;i++){var n=t[i],s=r[n.id];if(s){s.refs++;for(var a=0;a<s.parts.length;a++)s.parts[a](n.parts[a]);for(;a<n.parts.length;a++)s.parts.push(x(n.parts[a],e))}else{var o=[];for(a=0;a<n.parts.length;a++)o.push(x(n.parts[a],e));r[n.id]={id:n.id,refs:1,parts:o}}}}function f(t,e){for(var i=[],n={},s=0;s<t.length;s++){var r=t[s],a=e.base?r[0]+e.base:r[0],o={css:r[1],media:r[2],sourceMap:r[3]};n[a]?n[a].parts.push(o):i.push(n[a]={id:a,parts:[o]})}return i}function g(t,e){var i=h(t.insertInto);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var n=u[u.length-1];if("top"===t.insertAt)n?n.nextSibling?i.insertBefore(e,n.nextSibling):i.appendChild(e):i.insertBefore(e,i.firstChild),u.push(e);else if("bottom"===t.insertAt)i.appendChild(e);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var s=h(t.insertAt.before,i);i.insertBefore(e,s)}}function _(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=u.indexOf(t);e>=0&&u.splice(e,1)}function v(t){var e=document.createElement("style");if(void 0===t.attrs.type&&(t.attrs.type="text/css"),void 0===t.attrs.nonce){var n=function(){0;return i.nc}();n&&(t.attrs.nonce=n)}return m(e,t.attrs),g(t,e),e}function m(t,e){Object.keys(e).forEach((function(i){t.setAttribute(i,e[i])}))}function x(t,e){var i,n,s,r;if(e.transform&&t.css){if(!(r="function"==typeof e.transform?e.transform(t.css):e.transform.default(t.css)))return function(){};t.css=r}if(e.singleton){var a=l++;i=c||(c=v(e)),n=b.bind(null,i,a,!1),s=b.bind(null,i,a,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(i=function(t){var e=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",m(e,t.attrs),g(t,e),e}(e),n=C.bind(null,i,e),s=function(){_(i),i.href&&URL.revokeObjectURL(i.href)}):(i=v(e),n=k.bind(null,i),s=function(){_(i)});return n(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;n(t=e)}else s()}}t.exports=function(t,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=a()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var i=f(t,e);return d(i,e),function(t){for(var n=[],s=0;s<i.length;s++){var a=i[s];(o=r[a.id]).refs--,n.push(o)}t&&d(f(t,e),e);for(s=0;s<n.length;s++){var o;if(0===(o=n[s]).refs){for(var h=0;h<o.parts.length;h++)o.parts[h]();delete r[o.id]}}}};var y,w=(y=[],function(t,e){return y[t]=e,y.filter(Boolean).join("\n")});function b(t,e,i,n){var s=i?"":n.css;if(t.styleSheet)t.styleSheet.cssText=w(e,s);else{var r=document.createTextNode(s),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(r,a[e]):t.appendChild(r)}}function k(t,e){var i=e.css,n=e.media;if(n&&t.setAttribute("media",n),t.styleSheet)t.styleSheet.cssText=i;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(i))}}function C(t,e,i){var n=i.css,s=i.sourceMap,r=void 0===e.convertToAbsoluteUrls&&s;(e.convertToAbsoluteUrls||r)&&(n=p(n)),s&&(n+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(s))))+" */");var a=new Blob([n],{type:"text/css"}),o=t.href;t.href=URL.createObjectURL(a),o&&URL.revokeObjectURL(o)}},function(t,e){t.exports=function(t){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var i=e.protocol+"//"+e.host,n=i+e.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,(function(t,e){var s,r=e.trim().replace(/^"(.*)"$/,(function(t,e){return e})).replace(/^'(.*)'$/,(function(t,e){return e}));return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(r)?t:(s=0===r.indexOf("//")?r:0===r.indexOf("/")?i+r:n+r.replace(/^\.\//,""),"url("+JSON.stringify(s)+")")}))}},function(t,e,i){"use strict";i.r(e);class n{constructor(t){this.sceneHandler=t,this.title=null,this.description=null,this.buttonTitle=null,this.getInfo(),this.setInfo()}getInfo(){const t=this.sceneHandler.current;this.title=t.title||"",this.description=t.description||"",this.buttonTitle=t.buttonTitle}setInfo(){const[t,e,i]=document.querySelectorAll(["[data-action-scene-info-title]","[data-action-scene-info-description]","[data-action-scene-info-button]"].join(","));t.innerHTML=this.title,e.innerHTML=this.description,i.textContent=this.buttonTitle,i.addEventListener("click",()=>{const t=Boolean(i.getAttribute("data-action-scene-info-button"));console.log("isEnd",t,pt()),t?this.sceneHandler.set(pt()):this.sceneHandler.next()})}}var s=i(5),r=i.n(s);const a=(t,e,i)=>{const n=document.getElementById(t),s=n.getContext("2d");return n.width=window.innerWidth*e,n.height=window.innerHeight*i,{c:n,ctx:s}};i(6);i(7);class o{constructor(t){this.sceneHandler=t,this.scene=t.current,this.setupIcons(),this.setupPopovers()}setupIcons(){this.icons=document.querySelectorAll("[data-action-icon]"),this.icons.forEach((t,e)=>{t.addEventListener("click",()=>{this.sceneHandler.next(e)}),t.addEventListener("mouseover",()=>{this.showPopover(e)}),t.addEventListener("mouseleave",()=>{this.hidePopover(e)}),t.style.backgroundImage=`url(${this.scene.icons[e]})`})}setupPopovers(){this.popovers=document.querySelectorAll("[data-action-popover]")}showPopover(t){const e=this.popovers[t];e.classList.add("show"),e.textContent=this.scene.popoversText[t]}hidePopover(t){this.popovers[t].classList.remove("show")}}var h=i(1);const c=(t,e)=>{var i=parseInt(t.replace("#",""),16),n=Math.round(2.55*e),s=(i>>16)+n,r=(i>>8&255)+n,a=(255&i)+n;return"#"+(16777216+65536*(s<255?s<1?0:s:255)+256*(r<255?r<1?0:r:255)+(a<255?a<1?0:a:255)).toString(16).slice(1)},l="sea";class u{constructor({c:t,color:e,lighting:i,type:n=l}){this.c=t,this.color=e||"#4682B4",this.lighting=i||4,this.type=n,this.draw()}draw(){let t,e,i,n,s,r,a,o,l,u;h.setup(this.c),u=h.project.view,o=new h.Group,e=function(t,e){let i,n,s,r,a;for(t.add(u.bounds.bottomLeft),i=n=-1,s=e+1;n<=s;i=n+=1)r=u.viewSize.width/e*i,a=u.viewSize.height/1.618,t.add(new h.Point(r,a));return t.add(u.bounds.bottomRight)},t=function(t,i,n){const s=new h.Path;return s.fillColor=i,s.opacity=n,e(s,t),s.smooth(),s},i=function(t,e,i){let n,s,r,a,o,h,c;for(o=[],n=s=0,r=(a=t.segments).length;s<r;n=++s)if(h=a[n],n>0&&n<t.segments.length-1){const t=15*(c=Math.sin(3*e.time+n-i))+15*i;o.push(h.point.y=t)}return o},r=this.isSea()?32:8;const p=[this.color];for(n=s=1,l=r;s<=l;n=s+=1){const e=c(p[n-1],this.lighting);p.push(e),(a=this.isSea()?t(1,e,1):t(3,e,1)).position.y+=25*n,o.addChild(a)}u.onFrame=function(t){let e,s,r,h;for(r=o.children,h=[],n=e=0,s=r.length;e<s;n=++e)a=r[n],h.push(i(a,t,n));return h},u.draw()}isSea(){return this.type===l}}class p{constructor({c:t,ctx:e,coords:i,color:n={from:"#ffe259",to:"#ffa751"},direction:s}){this.c=t,this.ctx=e,this.coords=i,this.color=n,this.direction=s,this.draw()}draw(){const[t,e,i]=this.coords.points;this.ctx.beginPath(),this.ctx.strokeStyle=this.color.from,this.ctx.moveTo(...t),this.ctx.lineTo(...e),this.ctx.lineTo(...i);const n=this.ctx.createLinearGradient(...this.coords.gradient);n.addColorStop(0,this.color.from),n.addColorStop(1,this.color.to),this.coords.curvedPoints.forEach(t=>this.ctx.quadraticCurveTo(...t)),this.ctx.fillStyle=n,this.ctx.fill(),this.ctx.stroke(),this.ctx.beginPath(),this.ctx.lineWidth=15,this.ctx.strokeStyle="#3792",this.ctx.moveTo(...i),this.coords.curvedPoints.forEach(t=>{const e=[...t];e[0]=t[0]+10,e[2]=t[2]+10,this.ctx.quadraticCurveTo(...e)}),this.ctx.stroke(),this.ctx.beginPath(),this.ctx.lineWidth=1,this.ctx.moveTo(0,this.coords.curvedPoints[this.coords.curvedPoints.length-1][3]),this.ctx.lineTo(0,this.c.height),this.ctx.stroke()}}const d=(t,e)=>{const i=[t,e],n=[t,i[1]-e],s=[n[0],n[1],n[0],n[1]],r=[s[0],s[1],s[2],s[3]],a=[r[0],r[1],r[2],r[3]],o=[a[0],a[1],a[2],a[3]];return{points:[[0,e],i,n],curvedPoints:[s,r,a,o,[o[0],o[1],0,o[3]]],gradient:[t/2,0,t/2,e]}},f=(t,e)=>Math.floor(Math.random()*(e-t)+t);class g{constructor(){this.img=document.querySelector("[data-crocodile-img]"),this.img.style.left="0px",this.img.style.top="0px",this.direction={left:1,top:1},this.speed={left:0,top:0},this.background={direction:1,position:1},window.requestAnimationFrame(this.setAnimation.bind(this))}setAnimation(){let t=parseInt(this.img.style.left),e=parseInt(this.img.style.top);window.requestAnimationFrame(this.setAnimation.bind(this)),this.setVerticalDirection(e),this.setHorizontalDirection(t),this.setSwimAnimation(),t+=this.speed.left*this.direction.left,e+=this.speed.top*this.direction.top,this.img.style.left=`${t}px`,this.img.style.top=`${e}px`}setVerticalDirection(t){this.speed.top=f(1,3),t+this.img.clientHeight>=.3*window.innerHeight?this.direction.top=-1:t<=0&&(this.direction.top=1)}setHorizontalDirection(t){if(this.speed.left=f(2,5),t+this.img.clientWidth>=window.innerWidth)return this.direction.left=-1,void this.img.classList.add("rotate");t<0&&(this.direction.left=1,this.img.classList.remove("rotate"))}setSwimAnimation(){this.background.position>=100?this.background.direction=-1:this.background.position<=1&&(this.background.direction=1),this.background.position+=.5*this.background.direction,this.img.style.backgroundPosition=`center ${this.background.position}px`}}var _=i(8),v=i.n(_),m=i(9),x=i.n(m),y=i(2),w=i.n(y),b=i(0),k=i.n(b),C=i(10),S=i.n(C);class I{constructor(){this.front=null,this.back=null,this.setElements(),this.draw()}setElements(){this.front=document.querySelector("[data-rain-front]"),this.back=document.querySelector("[data-rain-back]")}draw(){let t=0,e="",i="";for(;t<100;){const n=Math.floor(98*Math.random()+1),s=Math.floor(4*Math.random()+2);e+='<div class="drop" style="left: '+(t+=s)+"%; bottom: "+(s+s-1+100)+"%; animation-delay: 0."+n+"s; animation-duration: 0.5"+n+'s;"><div class="stem" style="animation-delay: 0.'+n+"s; animation-duration: 0.5"+n+'s;"></div><div class="splat" style="animation-delay: 0.'+n+"s; animation-duration: 0.5"+n+'s;"></div></div>',i+='<div class="drop" style="right: '+t+"%; bottom: "+(s+s-1+100)+"%; animation-delay: 0."+n+"s; animation-duration: 0.5"+n+'s;"><div class="stem" style="animation-delay: 0.'+n+"s; animation-duration: 0.5"+n+'s;"></div><div class="splat" style="animation-delay: 0.'+n+"s; animation-duration: 0.5"+n+'s;"></div></div>'}this.front.innerHTML=e,this.back.innerHTML=i}}var A=i(11),P=i.n(A),T=i(12),E=i.n(T),L=i(13),M=i.n(L);class O{constructor(){this.container=document.querySelector("[data-grass-container]"),this.coords=[0],this.getRandomWidth=f.bind(this,40,200),this.draw()}draw(){const t=document.createDocumentFragment();for(let e=0;e<30;e++){const e=document.createElement("div"),{width:i,height:n,left:s}=this.getRandomGrass();e.className="grass reeds",e.style.width=`${i}px`,e.style.height=`${n}px`,e.style.left=`${s}px`,t.appendChild(e)}this.container.appendChild(t)}getRandomGrass(){const t=this.getRandomWidth(),e=t-t/100*12,i=this.coords[this.coords.length-1];return this.coords.push(i+t/2),{width:t,height:e,left:i}}}var N=i(14),z=i.n(N),R=i(15),V=i.n(R),B=i(16),D=i.n(B),F=i(17),j=i.n(F);var q=i(18),U=i.n(q),H=i(19),W=i.n(H),G=i(20),Z=i.n(G),$=i(21),Y=i.n($);var K=i(22),Q=i.n(K);var X=i(23),J=i.n(X),tt=i(24),et=i.n(tt),it=i(25),nt=i.n(it);var st=i(26),rt=i.n(st);const at="START",ot="END",ht="SCENE_AFTER_LOSE",ct=[(()=>({init(t){new n(t)},template:r.a,title:"Спаси крокодила",description:"\n    31 мая далекого 2007 года из кочевого цирка, который приехал в Мариуполь на гастроли, сбежал крокодил по кличке Годзилла. Ушел в море! Полгода его искали спасатели и водолазы, , но все безрезультатно – он обходил сети и ловушки. А когда стало холодать, крокодил поселился в загрязненных, но теплых водах возле азовстальской ТЭЦ. Там его, недвижимого, и нашли работники металлургического комбината. Крокодила отдали спасателям, но после поимки он прожил всего сутки и скончался…\n    Крокодила можно было спасти, если бы…\n    <br>Выполни миссию – спаси крокодила!\n    ",buttonTitle:"Начать",type:at}))(),(()=>({init(t){const e=a("water",1,.4),i=a("beach",1,.25);new o(t),new u({...e}),new p({...i,coords:d(i.c.width,i.c.height)}),new g},template:`${S.a} ${k.a}`,icons:[v.a,x.a,w.a],popoversText:["Расставить сети","Позвонить спасателям, чтобы они расставили сети","Предупредить отдыхающих об опасности и ждать, пока крокодил выплывет на берег"],correctAnswers:[1,2],informationText:"Крокодил ушел в море. Его периодически видят в разных местах в черте городского пляжа. Но как поймать крокодила?",type:ht}))(),(()=>({init(t){const e=a("water",1,.4),i=a("beach",1,.7);new o(t),new u({...e,color:"#006994",lighting:2.6}),new p({...i,coords:d(i.c.width,i.c.height)}),new I},template:`${M.a} ${k.a}`,icons:[P.a,E.a,w.a],popoversText:["Разложить еду на берегу и расставить рядом капканы","Установить сигнальные гудки, чтобы вовремя оповещать спасателей","Наладить координацию между спасателями, водолазной службой, ветеринарной службой. Ведь крокодил не ел два дня. Организовать круглосуточные посты наблюдения"],informationText:"Двое суток проходит, крокодила нет. <br>Его видят в разных местах на пляже, но поймать не удается. Спасатели не поспевают прибыть на место. <br>Что делать?",correctAnswers:[2]}))(),(()=>({init(t){const e=a("water",1,.55);new u({...e,color:"#729bfb",lighting:2.6,type:"river"}),new O,new o(t)},informationText:"5 дней. Крокодила не удается поймать. Но его видели в пресных водах Кальмиуса, возле завода Азовсталь. <br>Что делать?",icons:[z.a,V.a,D.a],popoversText:["В такой грязной воде крокодилу не выжить. Нужно срочно очищать воду","Надо срочно остановить «Азовсталь» и прекратить выбросы","Ничего не делать, просто подождать, и крокодил начнет задыхаться и выскочит из воды сам"],correctAnswers:[0],template:`${j.a} ${k.a}`}))(),(()=>({init(t){const e=a("water",1,.55);new u({...e,color:"#729bfb",lighting:2.6,type:"river"}),new O,new o(t)},informationText:"К вечеру пятого дня крокодила находят на пирсе. Он не шевелится, но еще дышит. <br>Что делать?",icons:[U.a,W.a,Z.a],popoversText:["Срочно передать ветеринарам. Животное переохладилось, в ослабленном состоянии из-за плохого питания","Отдать владельцам – в цирк, они знают, что делать","Отдать спасателям. Это же их задача – спасать"],correctAnswers:[0],template:`${Y.a} ${k.a}`}))(),(()=>({init(t){new o(t)},template:`${J.a} ${k.a}`,popoversText:["Крокодил погибнет в живой природе","Надо выступать с законодательной инициативой и запрещать цирки с животными и передвижные зоопарки."],icons:[et.a,nt.a],correctAnswers:[1],informationText:"Годзи спасли и отдали в кочевую выставку экзотических животных. Там он находится за стеклом – не сбежит. <br>Все правильно?"}))(),(()=>({init(){},informationText:"Победа!<br>Вы спасли не только Годзи и сотни других несчастных, замученных животных в Украине",template:`${rt.a} ${k.a}`}))(),(()=>({init(t){new n(t)},icons:[],type:ot,title:"Вы не спасли крокодила",buttonTitle:"Попробовать еще раз",template:Q.a}))()],lt=()=>ct.findIndex(t=>t.type===at),ut=()=>ct.findIndex(t=>t.type===ot),pt=()=>ct.findIndex(t=>t.type===ht);class dt{constructor(){this.sceneContainer=document.getElementById("scene"),this.popup=null,this.text=null,this.close=null,this.hideTimeout=null,this.hideDelay=9e3}addCloseListener(){this.close=document.querySelector("[data-scene-information-popup-close]"),this.close&&this.close.addEventListener("click",()=>this.hide())}show(t){t?(clearTimeout(this.hideTimeout),this.popup=document.querySelector("[data-scene-information-popup]"),this.text=document.querySelector("[data-scene-information-popup-text]"),this.text.innerHTML=t,this.popup.classList.add("active"),this.sceneContainer.classList.add("blur"),this.addCloseListener(),this.hideTimeout=setTimeout(()=>this.hide(),this.hideDelay)):this.hide()}hide(){this.popup&&(this.popup.classList.remove("active"),this.sceneContainer.classList.remove("blur"))}}class ft{constructor(){this.sceneContainer=document.getElementById("scene"),this.scenes=ct.slice(),this.index=0,this.current=null,this.overlay=null,this.sceneInformationPopup=new dt,this.setOverlay(),this.initScene()}initScene(){this.overlay.classList.add("init"),this.index=lt(),this.current=this.scenes[this.index],this.handleSceneChange()}setOverlay(){this.overlay=document.querySelector("[data-action-overlay]")}next(t){void 0===t||this.isCorrectAnswer(t)?(this.index=++this.index%this.scenes.length,this.set(this.index)):this.set(ut())}set(t){this.animateOverlay(),this.index=t,this.current=this.scenes[t],this.handleSceneChange(600)}animateOverlay(){this.overlay.classList.add("active"),setTimeout(()=>{this.overlay.classList.remove("active")},1e3)}handleSceneChange(t=0){setTimeout(()=>{this.sceneContainer.innerHTML=this.current.template,this.current.init(this),this.sceneInformationPopup.show(this.current.informationText)},t)}isCorrectAnswer(t){return this.current.correctAnswers.some(e=>e===t)}}i(33);class gt{constructor(){window.scene=this.scene=new ft}}window.onload=function(){new gt}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,